
build/mng.elf:     format de fichier elf32-avr


Déassemblage de la section .text :

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       8:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      10:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      14:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      18:	0c 94 6b 04 	jmp	0x8d6	; 0x8d6 <__vector_6>
      1c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      20:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      24:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      28:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      2c:	0c 94 3d 0a 	jmp	0x147a	; 0x147a <__vector_11>
      30:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      34:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      38:	0c 94 9c 09 	jmp	0x1338	; 0x1338 <__vector_14>
      3c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      40:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      44:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      48:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      4c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      50:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      54:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      58:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      5c:	0c 94 5f 0a 	jmp	0x14be	; 0x14be <__vector_23>
      60:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      64:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      68:	ec 04       	cpc	r14, r12
      6a:	d0 04       	cpc	r13, r0
      6c:	a4 04       	cpc	r10, r4
      6e:	9b 04       	cpc	r9, r11
      70:	a1 04       	cpc	r10, r1
      72:	4a 05       	cpc	r20, r10
      74:	3f 05       	cpc	r19, r15
      76:	bf 0b       	sbc	r27, r31
      78:	9f 0a       	sbc	r9, r31
      7a:	9f 0a       	sbc	r9, r31
      7c:	bc 0b       	sbc	r27, r28
      7e:	c8 0b       	sbc	r28, r24
      80:	b8 0b       	sbc	r27, r24
      82:	cf 0b       	sbc	r28, r31
      84:	cb 0b       	sbc	r28, r27
      86:	d3 0b       	sbc	r29, r19
      88:	8b 0b       	sbc	r24, r27
      8a:	5d 0b       	sbc	r21, r29

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d8 e0       	ldi	r29, 0x08	; 8
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <wdt_init>:
#ifndef BOOTLOADER
// Ensure that wdt is inactive after system reset.
void wdt_init(void) __attribute__((naked)) __attribute__((section(".init3")));

void wdt_init(void) {
    MCUSR = 0;
      98:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
      9a:	0f b6       	in	r0, 0x3f	; 63
      9c:	f8 94       	cli
      9e:	a8 95       	wdr
      a0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
      a4:	88 61       	ori	r24, 0x18	; 24
      a6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
      aa:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
      ae:	0f be       	out	0x3f, r0	; 63

000000b0 <__do_copy_data>:
      b0:	11 e0       	ldi	r17, 0x01	; 1
      b2:	a0 e0       	ldi	r26, 0x00	; 0
      b4:	b1 e0       	ldi	r27, 0x01	; 1
      b6:	e0 ec       	ldi	r30, 0xC0	; 192
      b8:	f1 e2       	ldi	r31, 0x21	; 33
      ba:	02 c0       	rjmp	.+4      	; 0xc0 <__do_copy_data+0x10>
      bc:	05 90       	lpm	r0, Z+
      be:	0d 92       	st	X+, r0
      c0:	a0 31       	cpi	r26, 0x10	; 16
      c2:	b1 07       	cpc	r27, r17
      c4:	d9 f7       	brne	.-10     	; 0xbc <__do_copy_data+0xc>

000000c6 <__do_clear_bss>:
      c6:	27 e0       	ldi	r18, 0x07	; 7
      c8:	a0 e1       	ldi	r26, 0x10	; 16
      ca:	b1 e0       	ldi	r27, 0x01	; 1
      cc:	01 c0       	rjmp	.+2      	; 0xd0 <.do_clear_bss_start>

000000ce <.do_clear_bss_loop>:
      ce:	1d 92       	st	X+, r1

000000d0 <.do_clear_bss_start>:
      d0:	a1 3a       	cpi	r26, 0xA1	; 161
      d2:	b2 07       	cpc	r27, r18
      d4:	e1 f7       	brne	.-8      	; 0xce <.do_clear_bss_loop>
      d6:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <main>
      da:	0c 94 de 10 	jmp	0x21bc	; 0x21bc <_exit>

000000de <__bad_interrupt>:
      de:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e2 <message_tx>:

/*-------------------------------------------------------------------*/
/* Callback function for message transmission                        */
/*-------------------------------------------------------------------*/
message_t *message_tx() {
   if( broadcast_word ) {
      e2:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <broadcast_word>
      e6:	88 23       	and	r24, r24
      e8:	79 f0       	breq	.+30     	; 0x108 <message_tx+0x26>
      return &words[w_index];
      ea:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <w_index>
      ee:	90 e0       	ldi	r25, 0x00	; 0
      f0:	9c 01       	movw	r18, r24
      f2:	22 0f       	add	r18, r18
      f4:	33 1f       	adc	r19, r19
      f6:	82 0f       	add	r24, r18
      f8:	93 1f       	adc	r25, r19
      fa:	88 0f       	add	r24, r24
      fc:	99 1f       	adc	r25, r25
      fe:	88 0f       	add	r24, r24
     100:	99 1f       	adc	r25, r25
     102:	8d 5d       	subi	r24, 0xDD	; 221
     104:	9e 4f       	sbci	r25, 0xFE	; 254
     106:	08 95       	ret
   }
   return 0;
     108:	80 e0       	ldi	r24, 0x00	; 0
     10a:	90 e0       	ldi	r25, 0x00	; 0
}
     10c:	08 95       	ret

0000010e <tx_message_success>:

/*-------------------------------------------------------------------*/
/* Callback function for successful transmission                     */
/*-------------------------------------------------------------------*/
void tx_message_success() {
   set_color(RGB(0,0,0));
     10e:	80 e0       	ldi	r24, 0x00	; 0
     110:	0e 94 19 0a 	call	0x1432	; 0x1432 <set_color>
   broadcast_word = false;
     114:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <broadcast_word>
     118:	08 95       	ret

0000011a <message_rx>:


/*-------------------------------------------------------------------*/
/* Callback function for message reception                           */
/*-------------------------------------------------------------------*/
void message_rx( message_t *msg, distance_measurement_t *d ) {
     11a:	cf 93       	push	r28
   uint8_t received_word = msg->data[0];
     11c:	fc 01       	movw	r30, r24
     11e:	c0 81       	ld	r28, Z
   uint8_t cur_distance  = estimate_distance(d);
     120:	cb 01       	movw	r24, r22
     122:	0e 94 ca 06 	call	0xd94	; 0xd94 <estimate_distance>
   if( cur_distance > 100 ) {
     126:	85 36       	cpi	r24, 0x65	; 101
     128:	c8 f4       	brcc	.+50     	; 0x15c <message_rx+0x42>
   }
   
   /* Check if the received word is within the inventory */
   int i = 0;
   bool word_known = false;
   for( i = 0; i < inventory_size; ++i ) {
     12a:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <inventory_size>
     12e:	a9 2f       	mov	r26, r25
     130:	b0 e0       	ldi	r27, 0x00	; 0
     132:	10 97       	sbiw	r26, 0x00	; 0
     134:	e1 f0       	breq	.+56     	; 0x16e <message_rx+0x54>
      if( received_word == inventory[i] ) {
     136:	80 91 23 07 	lds	r24, 0x0723	; 0x800723 <inventory>
     13a:	c8 17       	cp	r28, r24
     13c:	89 f0       	breq	.+34     	; 0x160 <message_rx+0x46>
     13e:	e4 e2       	ldi	r30, 0x24	; 36
     140:	f7 e0       	ldi	r31, 0x07	; 7
     142:	ad 5d       	subi	r26, 0xDD	; 221
     144:	b8 4f       	sbci	r27, 0xF8	; 248
     146:	03 c0       	rjmp	.+6      	; 0x14e <message_rx+0x34>
     148:	81 91       	ld	r24, Z+
     14a:	c8 17       	cp	r28, r24
     14c:	49 f0       	breq	.+18     	; 0x160 <message_rx+0x46>
   }
   
   /* Check if the received word is within the inventory */
   int i = 0;
   bool word_known = false;
   for( i = 0; i < inventory_size; ++i ) {
     14e:	ae 17       	cp	r26, r30
     150:	bf 07       	cpc	r27, r31
     152:	d1 f7       	brne	.-12     	; 0x148 <message_rx+0x2e>
   if( word_known ) {
      inventory[0] = received_word;
      inventory_size = 1;
   }
   else {
      inventory[inventory_size] = received_word;
     154:	cc 93       	st	X, r28
      inventory_size += 1;
     156:	9f 5f       	subi	r25, 0xFF	; 255
     158:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <inventory_size>
   }
}
     15c:	cf 91       	pop	r28
     15e:	08 95       	ret
   }

   /* if the word is known, remove all other words from the
      inventory, otherwise insert it */
   if( word_known ) {
      inventory[0] = received_word;
     160:	c0 93 23 07 	sts	0x0723, r28	; 0x800723 <inventory>
      inventory_size = 1;
     164:	81 e0       	ldi	r24, 0x01	; 1
     166:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <inventory_size>
   }
   else {
      inventory[inventory_size] = received_word;
      inventory_size += 1;
   }
}
     16a:	cf 91       	pop	r28
     16c:	08 95       	ret
     16e:	a3 e2       	ldi	r26, 0x23	; 35
     170:	b7 e0       	ldi	r27, 0x07	; 7
     172:	f0 cf       	rjmp	.-32     	; 0x154 <message_rx+0x3a>

00000174 <setup>:


/*-------------------------------------------------------------------*/
/* Init function                                                     */
/*-------------------------------------------------------------------*/
void setup() {
     174:	1f 93       	push	r17
     176:	cf 93       	push	r28
     178:	df 93       	push	r29
   /* Initialise LED and motors */
   set_color(RGB(0,0,0));
     17a:	80 e0       	ldi	r24, 0x00	; 0
     17c:	0e 94 19 0a 	call	0x1432	; 0x1432 <set_color>
   set_motors(0,0);
     180:	60 e0       	ldi	r22, 0x00	; 0
     182:	80 e0       	ldi	r24, 0x00	; 0
     184:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <set_motors>

   /* Initialise random seed */
   uint8_t seed = rand_hard();
     188:	0e 94 43 06 	call	0xc86	; 0xc86 <rand_hard>
   rand_seed(seed);
     18c:	0e 94 aa 06 	call	0xd54	; 0xd54 <rand_seed>
     190:	c3 e2       	ldi	r28, 0x23	; 35
     192:	d1 e0       	ldi	r29, 0x01	; 1
     194:	10 e0       	ldi	r17, 0x00	; 0
   /* Initialise the list of words ready for message sending. The word
      index is contained in the first payload byte, while the
      follwoing three bytes contain the randomly-chosen word */
   int i;
   for( i = 0; i < num_words; i++ ) {
      words[i].data[0] = i;
     196:	18 83       	st	Y, r17
      words[i].type    = NORMAL;
     198:	19 86       	std	Y+9, r1	; 0x09
      words[i].crc     = message_crc(&words[i]);
     19a:	ce 01       	movw	r24, r28
     19c:	0e 94 66 0c 	call	0x18cc	; 0x18cc <message_crc>
     1a0:	9b 87       	std	Y+11, r25	; 0x0b
     1a2:	8a 87       	std	Y+10, r24	; 0x0a
     1a4:	1f 5f       	subi	r17, 0xFF	; 255
     1a6:	2c 96       	adiw	r28, 0x0c	; 12

   /* Initialise the list of words ready for message sending. The word
      index is contained in the first payload byte, while the
      follwoing three bytes contain the randomly-chosen word */
   int i;
   for( i = 0; i < num_words; i++ ) {
     1a8:	10 38       	cpi	r17, 0x80	; 128
     1aa:	a9 f7       	brne	.-22     	; 0x196 <setup+0x22>

/*-------------------------------------------------------------------*/
/* Function for setting the motor speed                              */
/*-------------------------------------------------------------------*/
void set_motion( motion_t new_motion_type ) {
	if( current_motion_type != new_motion_type ){
     1ac:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <current_motion_type>
     1b0:	81 30       	cpi	r24, 0x01	; 1
     1b2:	49 f0       	breq	.+18     	; 0x1c6 <setup+0x52>
		int calibrated = 0;
		switch( new_motion_type ) {
		case FORWARD:
			spinup_motors();
     1b4:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <spinup_motors>
			if (calibrated)
				set_motors(kilo_straight_left,kilo_straight_right);
			else 
				set_motors(67,67);
     1b8:	63 e4       	ldi	r22, 0x43	; 67
     1ba:	83 e4       	ldi	r24, 0x43	; 67
     1bc:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <set_motors>
			break;
		case STOP:
		default:
			set_motors(0,0);         
		}
		current_motion_type = new_motion_type;
     1c0:	81 e0       	ldi	r24, 0x01	; 1
     1c2:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <current_motion_type>
      words[i].crc     = message_crc(&words[i]);
   }

   /* Initialise motion variables */
   set_motion( FORWARD );
   last_motion_ticks = rand_soft() % max_straight_ticks + 1;
     1c6:	0e 94 92 06 	call	0xd24	; 0xd24 <rand_soft>
     1ca:	91 e0       	ldi	r25, 0x01	; 1
     1cc:	8f 3f       	cpi	r24, 0xFF	; 255
     1ce:	08 f4       	brcc	.+2      	; 0x1d2 <setup+0x5e>
     1d0:	90 e0       	ldi	r25, 0x00	; 0
     1d2:	98 0f       	add	r25, r24
     1d4:	89 2f       	mov	r24, r25
     1d6:	90 e0       	ldi	r25, 0x00	; 0
     1d8:	01 96       	adiw	r24, 0x01	; 1
     1da:	09 2e       	mov	r0, r25
     1dc:	00 0c       	add	r0, r0
     1de:	aa 0b       	sbc	r26, r26
     1e0:	bb 0b       	sbc	r27, r27
     1e2:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <last_motion_ticks>
     1e6:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <last_motion_ticks+0x1>
     1ea:	a0 93 16 01 	sts	0x0116, r26	; 0x800116 <last_motion_ticks+0x2>
     1ee:	b0 93 17 01 	sts	0x0117, r27	; 0x800117 <last_motion_ticks+0x3>

   /* Initialise mng variables */
   last_broadcast_ticks = rand_soft() % max_broadcast_ticks + 1;
     1f2:	0e 94 92 06 	call	0xd24	; 0xd24 <rand_soft>
     1f6:	91 e0       	ldi	r25, 0x01	; 1
     1f8:	8f 3f       	cpi	r24, 0xFF	; 255
     1fa:	08 f4       	brcc	.+2      	; 0x1fe <setup+0x8a>
     1fc:	90 e0       	ldi	r25, 0x00	; 0
     1fe:	98 0f       	add	r25, r24
     200:	89 2f       	mov	r24, r25
     202:	90 e0       	ldi	r25, 0x00	; 0
     204:	01 96       	adiw	r24, 0x01	; 1
     206:	09 2e       	mov	r0, r25
     208:	00 0c       	add	r0, r0
     20a:	aa 0b       	sbc	r26, r26
     20c:	bb 0b       	sbc	r27, r27
     20e:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
     212:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <__data_end+0x1>
     216:	a0 93 12 01 	sts	0x0112, r26	; 0x800112 <__data_end+0x2>
     21a:	b0 93 13 01 	sts	0x0113, r27	; 0x800113 <__data_end+0x3>
}
     21e:	df 91       	pop	r29
     220:	cf 91       	pop	r28
     222:	1f 91       	pop	r17
     224:	08 95       	ret

00000226 <loop>:

/*-------------------------------------------------------------------*/
/* Function implementing the uncorrelated random walk                */
/*-------------------------------------------------------------------*/
void random_walk(){
   switch( current_motion_type ) {
     226:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <current_motion_type>
     22a:	81 30       	cpi	r24, 0x01	; 1
     22c:	09 f4       	brne	.+2      	; 0x230 <loop+0xa>
     22e:	93 c0       	rjmp	.+294    	; 0x356 <loop+0x130>
     230:	08 f4       	brcc	.+2      	; 0x234 <loop+0xe>
     232:	40 c0       	rjmp	.+128    	; 0x2b4 <loop+0x8e>
     234:	84 30       	cpi	r24, 0x04	; 4
     236:	f0 f5       	brcc	.+124    	; 0x2b4 <loop+0x8e>
   case TURN_LEFT:
   case TURN_RIGHT:
      if( kilo_ticks > last_motion_ticks + turning_ticks ) {
     238:	40 91 66 07 	lds	r20, 0x0766	; 0x800766 <kilo_ticks>
     23c:	50 91 67 07 	lds	r21, 0x0767	; 0x800767 <kilo_ticks+0x1>
     240:	60 91 68 07 	lds	r22, 0x0768	; 0x800768 <kilo_ticks+0x2>
     244:	70 91 69 07 	lds	r23, 0x0769	; 0x800769 <kilo_ticks+0x3>
     248:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <turning_ticks>
     24c:	30 91 19 01 	lds	r19, 0x0119	; 0x800119 <turning_ticks+0x1>
     250:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <last_motion_ticks>
     254:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <last_motion_ticks+0x1>
     258:	a0 91 16 01 	lds	r26, 0x0116	; 0x800116 <last_motion_ticks+0x2>
     25c:	b0 91 17 01 	lds	r27, 0x0117	; 0x800117 <last_motion_ticks+0x3>
     260:	82 0f       	add	r24, r18
     262:	93 1f       	adc	r25, r19
     264:	a1 1d       	adc	r26, r1
     266:	b1 1d       	adc	r27, r1
     268:	84 17       	cp	r24, r20
     26a:	95 07       	cpc	r25, r21
     26c:	a6 07       	cpc	r26, r22
     26e:	b7 07       	cpc	r27, r23
     270:	08 f4       	brcc	.+2      	; 0x274 <loop+0x4e>
     272:	d6 c0       	rjmp	.+428    	; 0x420 <__LOCK_REGION_LENGTH__+0x20>

/*-------------------------------------------------------------------*/
/* Function to select a random word and to broadcast it              */
/*-------------------------------------------------------------------*/
void broadcast() {
   if( kilo_ticks > last_broadcast_ticks + max_broadcast_ticks ) {
     274:	40 91 66 07 	lds	r20, 0x0766	; 0x800766 <kilo_ticks>
     278:	50 91 67 07 	lds	r21, 0x0767	; 0x800767 <kilo_ticks+0x1>
     27c:	60 91 68 07 	lds	r22, 0x0768	; 0x800768 <kilo_ticks+0x2>
     280:	70 91 69 07 	lds	r23, 0x0769	; 0x800769 <kilo_ticks+0x3>
     284:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
     288:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <__data_end+0x1>
     28c:	a0 91 12 01 	lds	r26, 0x0112	; 0x800112 <__data_end+0x2>
     290:	b0 91 13 01 	lds	r27, 0x0113	; 0x800113 <__data_end+0x3>
     294:	81 50       	subi	r24, 0x01	; 1
     296:	9f 4f       	sbci	r25, 0xFF	; 255
     298:	af 4f       	sbci	r26, 0xFF	; 255
     29a:	bf 4f       	sbci	r27, 0xFF	; 255
     29c:	84 17       	cp	r24, r20
     29e:	95 07       	cpc	r25, r21
     2a0:	a6 07       	cpc	r26, r22
     2a2:	b7 07       	cpc	r27, r23
     2a4:	80 f0       	brcs	.+32     	; 0x2c6 <loop+0xa0>
     2a6:	20 91 1b 01 	lds	r18, 0x011B	; 0x80011b <inventory_size>

/*-------------------------------------------------------------------*/
/* Function to color-code the inventory size and the selected word   */
/*-------------------------------------------------------------------*/
void color_code() {
   if( inventory_size != 1 ) {
     2aa:	21 30       	cpi	r18, 0x01	; 1
     2ac:	a1 f1       	breq	.+104    	; 0x316 <loop+0xf0>
      set_color(RGB(0,0,0));
     2ae:	80 e0       	ldi	r24, 0x00	; 0
     2b0:	0c 94 19 0a 	jmp	0x1432	; 0x1432 <set_color>

/*-------------------------------------------------------------------*/
/* Function for setting the motor speed                              */
/*-------------------------------------------------------------------*/
void set_motion( motion_t new_motion_type ) {
	if( current_motion_type != new_motion_type ){
     2b4:	88 23       	and	r24, r24
     2b6:	f1 f2       	breq	.-68     	; 0x274 <loop+0x4e>
			else
				set_motors(0,70);
			break;
		case STOP:
		default:
			set_motors(0,0);         
     2b8:	60 e0       	ldi	r22, 0x00	; 0
     2ba:	80 e0       	ldi	r24, 0x00	; 0
     2bc:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <set_motors>
		}
		current_motion_type = new_motion_type;
     2c0:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <current_motion_type>
     2c4:	d7 cf       	rjmp	.-82     	; 0x274 <loop+0x4e>
/*-------------------------------------------------------------------*/
/* Function to select a random word and to broadcast it              */
/*-------------------------------------------------------------------*/
void broadcast() {
   if( kilo_ticks > last_broadcast_ticks + max_broadcast_ticks ) {
      last_broadcast_ticks = kilo_ticks;
     2c6:	80 91 66 07 	lds	r24, 0x0766	; 0x800766 <kilo_ticks>
     2ca:	90 91 67 07 	lds	r25, 0x0767	; 0x800767 <kilo_ticks+0x1>
     2ce:	a0 91 68 07 	lds	r26, 0x0768	; 0x800768 <kilo_ticks+0x2>
     2d2:	b0 91 69 07 	lds	r27, 0x0769	; 0x800769 <kilo_ticks+0x3>
     2d6:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
     2da:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <__data_end+0x1>
     2de:	a0 93 12 01 	sts	0x0112, r26	; 0x800112 <__data_end+0x2>
     2e2:	b0 93 13 01 	sts	0x0113, r27	; 0x800113 <__data_end+0x3>
      
      /* Select a random word from the inventory, or invent a new one
         if the inventory is empty */
      if( inventory_size == 0 ) {
     2e6:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <inventory_size>
     2ea:	88 23       	and	r24, r24
     2ec:	09 f4       	brne	.+2      	; 0x2f0 <loop+0xca>
     2ee:	7f c0       	rjmp	.+254    	; 0x3ee <loop+0x1c8>
         w_index = rand_soft()%num_words;
         inventory[0] = words[w_index].data[0];
         inventory_size = 1;
      }
      else {
         w_index = inventory[rand_soft() % inventory_size];
     2f0:	0e 94 92 06 	call	0xd24	; 0xd24 <rand_soft>
     2f4:	20 91 1b 01 	lds	r18, 0x011B	; 0x80011b <inventory_size>
     2f8:	62 2f       	mov	r22, r18
     2fa:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <__udivmodqi4>
     2fe:	e9 2f       	mov	r30, r25
     300:	f0 e0       	ldi	r31, 0x00	; 0
     302:	ed 5d       	subi	r30, 0xDD	; 221
     304:	f8 4f       	sbci	r31, 0xF8	; 248
     306:	80 81       	ld	r24, Z
     308:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <w_index>
      }
      
      /* set broadcast flag for transmission */
      broadcast_word = true;
     30c:	81 e0       	ldi	r24, 0x01	; 1
     30e:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <broadcast_word>

/*-------------------------------------------------------------------*/
/* Function to color-code the inventory size and the selected word   */
/*-------------------------------------------------------------------*/
void color_code() {
   if( inventory_size != 1 ) {
     312:	21 30       	cpi	r18, 0x01	; 1
     314:	61 f6       	brne	.-104    	; 0x2ae <loop+0x88>
      set_color(RGB(0,0,0));
      return;
   }

   /* Convert the number in base 4 to turn on the LED */
   uint8_t color = inventory[0]%63 + 1;
     316:	90 91 23 07 	lds	r25, 0x0723	; 0x800723 <inventory>
     31a:	85 e0       	ldi	r24, 0x05	; 5
     31c:	98 9f       	mul	r25, r24
     31e:	21 2d       	mov	r18, r1
     320:	11 24       	eor	r1, r1
     322:	89 2f       	mov	r24, r25
     324:	82 1b       	sub	r24, r18
     326:	86 95       	lsr	r24
     328:	82 0f       	add	r24, r18
     32a:	82 95       	swap	r24
     32c:	86 95       	lsr	r24
     32e:	87 70       	andi	r24, 0x07	; 7
     330:	2f e3       	ldi	r18, 0x3F	; 63
     332:	82 9f       	mul	r24, r18
     334:	90 19       	sub	r25, r0
     336:	11 24       	eor	r1, r1
     338:	9f 5f       	subi	r25, 0xFF	; 255
   uint8_t r     = color/16;
   uint8_t rem1  = color%16;
   uint8_t g     = rem1/4;
   uint8_t b     = rem1%4;
   set_color(RGB(r,g,b));
     33a:	29 2f       	mov	r18, r25
     33c:	23 70       	andi	r18, 0x03	; 3
     33e:	80 e1       	ldi	r24, 0x10	; 16
     340:	28 9f       	mul	r18, r24
     342:	90 01       	movw	r18, r0
     344:	11 24       	eor	r1, r1
     346:	89 2f       	mov	r24, r25
     348:	82 95       	swap	r24
     34a:	8f 70       	andi	r24, 0x0F	; 15
     34c:	82 2b       	or	r24, r18
     34e:	9c 70       	andi	r25, 0x0C	; 12
     350:	89 2b       	or	r24, r25
     352:	0c 94 19 0a 	jmp	0x1432	; 0x1432 <set_color>
         last_motion_ticks = kilo_ticks;
         set_motion(FORWARD);
      }
      break;
   case FORWARD:
      if( kilo_ticks > last_motion_ticks + max_straight_ticks ) {
     356:	40 91 66 07 	lds	r20, 0x0766	; 0x800766 <kilo_ticks>
     35a:	50 91 67 07 	lds	r21, 0x0767	; 0x800767 <kilo_ticks+0x1>
     35e:	60 91 68 07 	lds	r22, 0x0768	; 0x800768 <kilo_ticks+0x2>
     362:	70 91 69 07 	lds	r23, 0x0769	; 0x800769 <kilo_ticks+0x3>
     366:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <last_motion_ticks>
     36a:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <last_motion_ticks+0x1>
     36e:	a0 91 16 01 	lds	r26, 0x0116	; 0x800116 <last_motion_ticks+0x2>
     372:	b0 91 17 01 	lds	r27, 0x0117	; 0x800117 <last_motion_ticks+0x3>
     376:	81 50       	subi	r24, 0x01	; 1
     378:	9f 4f       	sbci	r25, 0xFF	; 255
     37a:	af 4f       	sbci	r26, 0xFF	; 255
     37c:	bf 4f       	sbci	r27, 0xFF	; 255
     37e:	84 17       	cp	r24, r20
     380:	95 07       	cpc	r25, r21
     382:	a6 07       	cpc	r26, r22
     384:	b7 07       	cpc	r27, r23
     386:	08 f0       	brcs	.+2      	; 0x38a <loop+0x164>
     388:	75 cf       	rjmp	.-278    	; 0x274 <loop+0x4e>
         /* perform a radnom turn */
         last_motion_ticks = kilo_ticks;
     38a:	80 91 66 07 	lds	r24, 0x0766	; 0x800766 <kilo_ticks>
     38e:	90 91 67 07 	lds	r25, 0x0767	; 0x800767 <kilo_ticks+0x1>
     392:	a0 91 68 07 	lds	r26, 0x0768	; 0x800768 <kilo_ticks+0x2>
     396:	b0 91 69 07 	lds	r27, 0x0769	; 0x800769 <kilo_ticks+0x3>
     39a:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <last_motion_ticks>
     39e:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <last_motion_ticks+0x1>
     3a2:	a0 93 16 01 	sts	0x0116, r26	; 0x800116 <last_motion_ticks+0x2>
     3a6:	b0 93 17 01 	sts	0x0117, r27	; 0x800117 <last_motion_ticks+0x3>
         if( rand_soft()%2 ) {
     3aa:	0e 94 92 06 	call	0xd24	; 0xd24 <rand_soft>
     3ae:	80 ff       	sbrs	r24, 0
     3b0:	51 c0       	rjmp	.+162    	; 0x454 <__LOCK_REGION_LENGTH__+0x54>

/*-------------------------------------------------------------------*/
/* Function for setting the motor speed                              */
/*-------------------------------------------------------------------*/
void set_motion( motion_t new_motion_type ) {
	if( current_motion_type != new_motion_type ){
     3b2:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <current_motion_type>
     3b6:	82 30       	cpi	r24, 0x02	; 2
     3b8:	49 f0       	breq	.+18     	; 0x3cc <loop+0x1a6>
				set_motors(kilo_straight_left,kilo_straight_right);
			else 
				set_motors(67,67);
			break;
		case TURN_LEFT:
			spinup_motors();
     3ba:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <spinup_motors>
			if (calibrated)
				set_motors(kilo_turn_left,0);
			else
				set_motors(70,0);
     3be:	60 e0       	ldi	r22, 0x00	; 0
     3c0:	86 e4       	ldi	r24, 0x46	; 70
     3c2:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <set_motors>
			break;
		case STOP:
		default:
			set_motors(0,0);         
		}
		current_motion_type = new_motion_type;
     3c6:	82 e0       	ldi	r24, 0x02	; 2
     3c8:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <current_motion_type>
            set_motion(TURN_LEFT);
         }
         else {
            set_motion(TURN_RIGHT);
         }
         turning_ticks = rand_soft()%max_turning_ticks + 1;
     3cc:	0e 94 92 06 	call	0xd24	; 0xd24 <rand_soft>
     3d0:	91 e0       	ldi	r25, 0x01	; 1
     3d2:	80 3a       	cpi	r24, 0xA0	; 160
     3d4:	08 f4       	brcc	.+2      	; 0x3d8 <loop+0x1b2>
     3d6:	90 e0       	ldi	r25, 0x00	; 0
     3d8:	20 e6       	ldi	r18, 0x60	; 96
     3da:	92 9f       	mul	r25, r18
     3dc:	80 0d       	add	r24, r0
     3de:	11 24       	eor	r1, r1
     3e0:	90 e0       	ldi	r25, 0x00	; 0
     3e2:	01 96       	adiw	r24, 0x01	; 1
     3e4:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <turning_ticks+0x1>
     3e8:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <turning_ticks>
     3ec:	43 cf       	rjmp	.-378    	; 0x274 <loop+0x4e>
      last_broadcast_ticks = kilo_ticks;
      
      /* Select a random word from the inventory, or invent a new one
         if the inventory is empty */
      if( inventory_size == 0 ) {
         w_index = rand_soft()%num_words;
     3ee:	0e 94 92 06 	call	0xd24	; 0xd24 <rand_soft>
     3f2:	8f 77       	andi	r24, 0x7F	; 127
     3f4:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <w_index>
         inventory[0] = words[w_index].data[0];
     3f8:	90 e0       	ldi	r25, 0x00	; 0
     3fa:	fc 01       	movw	r30, r24
     3fc:	ee 0f       	add	r30, r30
     3fe:	ff 1f       	adc	r31, r31
     400:	e8 0f       	add	r30, r24
     402:	f9 1f       	adc	r31, r25
     404:	ee 0f       	add	r30, r30
     406:	ff 1f       	adc	r31, r31
     408:	ee 0f       	add	r30, r30
     40a:	ff 1f       	adc	r31, r31
     40c:	ed 5d       	subi	r30, 0xDD	; 221
     40e:	fe 4f       	sbci	r31, 0xFE	; 254
     410:	80 81       	ld	r24, Z
     412:	80 93 23 07 	sts	0x0723, r24	; 0x800723 <inventory>
         inventory_size = 1;
     416:	81 e0       	ldi	r24, 0x01	; 1
     418:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <inventory_size>
     41c:	21 e0       	ldi	r18, 0x01	; 1
     41e:	76 cf       	rjmp	.-276    	; 0x30c <loop+0xe6>
   switch( current_motion_type ) {
   case TURN_LEFT:
   case TURN_RIGHT:
      if( kilo_ticks > last_motion_ticks + turning_ticks ) {
         /* start moving forward */
         last_motion_ticks = kilo_ticks;
     420:	80 91 66 07 	lds	r24, 0x0766	; 0x800766 <kilo_ticks>
     424:	90 91 67 07 	lds	r25, 0x0767	; 0x800767 <kilo_ticks+0x1>
     428:	a0 91 68 07 	lds	r26, 0x0768	; 0x800768 <kilo_ticks+0x2>
     42c:	b0 91 69 07 	lds	r27, 0x0769	; 0x800769 <kilo_ticks+0x3>
     430:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <last_motion_ticks>
     434:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <last_motion_ticks+0x1>
     438:	a0 93 16 01 	sts	0x0116, r26	; 0x800116 <last_motion_ticks+0x2>
     43c:	b0 93 17 01 	sts	0x0117, r27	; 0x800117 <last_motion_ticks+0x3>
void set_motion( motion_t new_motion_type ) {
	if( current_motion_type != new_motion_type ){
		int calibrated = 0;
		switch( new_motion_type ) {
		case FORWARD:
			spinup_motors();
     440:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <spinup_motors>
			if (calibrated)
				set_motors(kilo_straight_left,kilo_straight_right);
			else 
				set_motors(67,67);
     444:	63 e4       	ldi	r22, 0x43	; 67
     446:	83 e4       	ldi	r24, 0x43	; 67
     448:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <set_motors>
			break;
		case STOP:
		default:
			set_motors(0,0);         
		}
		current_motion_type = new_motion_type;
     44c:	81 e0       	ldi	r24, 0x01	; 1
     44e:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <current_motion_type>
     452:	10 cf       	rjmp	.-480    	; 0x274 <loop+0x4e>

/*-------------------------------------------------------------------*/
/* Function for setting the motor speed                              */
/*-------------------------------------------------------------------*/
void set_motion( motion_t new_motion_type ) {
	if( current_motion_type != new_motion_type ){
     454:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <current_motion_type>
     458:	83 30       	cpi	r24, 0x03	; 3
     45a:	09 f4       	brne	.+2      	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
     45c:	b7 cf       	rjmp	.-146    	; 0x3cc <loop+0x1a6>
				set_motors(kilo_turn_left,0);
			else
				set_motors(70,0);
			break;
		case TURN_RIGHT:
			spinup_motors();
     45e:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <spinup_motors>
			if (calibrated)
				set_motors(0,kilo_turn_right);
			else
				set_motors(0,70);
     462:	66 e4       	ldi	r22, 0x46	; 70
     464:	80 e0       	ldi	r24, 0x00	; 0
     466:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <set_motors>
			break;
		case STOP:
		default:
			set_motors(0,0);         
		}
		current_motion_type = new_motion_type;
     46a:	83 e0       	ldi	r24, 0x03	; 3
     46c:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <current_motion_type>
     470:	ad cf       	rjmp	.-166    	; 0x3cc <loop+0x1a6>

00000472 <set_motion>:


/*-------------------------------------------------------------------*/
/* Function for setting the motor speed                              */
/*-------------------------------------------------------------------*/
void set_motion( motion_t new_motion_type ) {
     472:	cf 93       	push	r28
	if( current_motion_type != new_motion_type ){
     474:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <current_motion_type>
     478:	98 17       	cp	r25, r24
     47a:	69 f0       	breq	.+26     	; 0x496 <set_motion+0x24>
     47c:	c8 2f       	mov	r28, r24
		int calibrated = 0;
		switch( new_motion_type ) {
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	99 f0       	breq	.+38     	; 0x4a8 <set_motion+0x36>
     482:	83 30       	cpi	r24, 0x03	; 3
     484:	51 f0       	breq	.+20     	; 0x49a <set_motion+0x28>
     486:	81 30       	cpi	r24, 0x01	; 1
     488:	b1 f0       	breq	.+44     	; 0x4b6 <set_motion+0x44>
			else
				set_motors(0,70);
			break;
		case STOP:
		default:
			set_motors(0,0);         
     48a:	60 e0       	ldi	r22, 0x00	; 0
     48c:	80 e0       	ldi	r24, 0x00	; 0
     48e:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <set_motors>
		}
		current_motion_type = new_motion_type;
     492:	c0 93 1a 01 	sts	0x011A, r28	; 0x80011a <current_motion_type>
	}
}
     496:	cf 91       	pop	r28
     498:	08 95       	ret
				set_motors(kilo_turn_left,0);
			else
				set_motors(70,0);
			break;
		case TURN_RIGHT:
			spinup_motors();
     49a:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <spinup_motors>
			if (calibrated)
				set_motors(0,kilo_turn_right);
			else
				set_motors(0,70);
     49e:	66 e4       	ldi	r22, 0x46	; 70
     4a0:	80 e0       	ldi	r24, 0x00	; 0
     4a2:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <set_motors>
     4a6:	f5 cf       	rjmp	.-22     	; 0x492 <set_motion+0x20>
				set_motors(kilo_straight_left,kilo_straight_right);
			else 
				set_motors(67,67);
			break;
		case TURN_LEFT:
			spinup_motors();
     4a8:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <spinup_motors>
			if (calibrated)
				set_motors(kilo_turn_left,0);
			else
				set_motors(70,0);
     4ac:	60 e0       	ldi	r22, 0x00	; 0
     4ae:	86 e4       	ldi	r24, 0x46	; 70
     4b0:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <set_motors>
     4b4:	ee cf       	rjmp	.-36     	; 0x492 <set_motion+0x20>
void set_motion( motion_t new_motion_type ) {
	if( current_motion_type != new_motion_type ){
		int calibrated = 0;
		switch( new_motion_type ) {
		case FORWARD:
			spinup_motors();
     4b6:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <spinup_motors>
			if (calibrated)
				set_motors(kilo_straight_left,kilo_straight_right);
			else 
				set_motors(67,67);
     4ba:	63 e4       	ldi	r22, 0x43	; 67
     4bc:	83 e4       	ldi	r24, 0x43	; 67
     4be:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <set_motors>
     4c2:	e7 cf       	rjmp	.-50     	; 0x492 <set_motion+0x20>

000004c4 <random_walk>:

/*-------------------------------------------------------------------*/
/* Function implementing the uncorrelated random walk                */
/*-------------------------------------------------------------------*/
void random_walk(){
   switch( current_motion_type ) {
     4c4:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <current_motion_type>
     4c8:	81 30       	cpi	r24, 0x01	; 1
     4ca:	59 f1       	breq	.+86     	; 0x522 <random_walk+0x5e>
     4cc:	08 f1       	brcs	.+66     	; 0x510 <random_walk+0x4c>
     4ce:	84 30       	cpi	r24, 0x04	; 4
     4d0:	f8 f4       	brcc	.+62     	; 0x510 <random_walk+0x4c>
   case TURN_LEFT:
   case TURN_RIGHT:
      if( kilo_ticks > last_motion_ticks + turning_ticks ) {
     4d2:	40 91 66 07 	lds	r20, 0x0766	; 0x800766 <kilo_ticks>
     4d6:	50 91 67 07 	lds	r21, 0x0767	; 0x800767 <kilo_ticks+0x1>
     4da:	60 91 68 07 	lds	r22, 0x0768	; 0x800768 <kilo_ticks+0x2>
     4de:	70 91 69 07 	lds	r23, 0x0769	; 0x800769 <kilo_ticks+0x3>
     4e2:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <turning_ticks>
     4e6:	30 91 19 01 	lds	r19, 0x0119	; 0x800119 <turning_ticks+0x1>
     4ea:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <last_motion_ticks>
     4ee:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <last_motion_ticks+0x1>
     4f2:	a0 91 16 01 	lds	r26, 0x0116	; 0x800116 <last_motion_ticks+0x2>
     4f6:	b0 91 17 01 	lds	r27, 0x0117	; 0x800117 <last_motion_ticks+0x3>
     4fa:	82 0f       	add	r24, r18
     4fc:	93 1f       	adc	r25, r19
     4fe:	a1 1d       	adc	r26, r1
     500:	b1 1d       	adc	r27, r1
     502:	84 17       	cp	r24, r20
     504:	95 07       	cpc	r25, r21
     506:	a6 07       	cpc	r26, r22
     508:	b7 07       	cpc	r27, r23
     50a:	08 f4       	brcc	.+2      	; 0x50e <random_walk+0x4a>
     50c:	55 c0       	rjmp	.+170    	; 0x5b8 <random_walk+0xf4>
     50e:	08 95       	ret

/*-------------------------------------------------------------------*/
/* Function for setting the motor speed                              */
/*-------------------------------------------------------------------*/
void set_motion( motion_t new_motion_type ) {
	if( current_motion_type != new_motion_type ){
     510:	88 23       	and	r24, r24
     512:	e9 f3       	breq	.-6      	; 0x50e <random_walk+0x4a>
			else
				set_motors(0,70);
			break;
		case STOP:
		default:
			set_motors(0,0);         
     514:	60 e0       	ldi	r22, 0x00	; 0
     516:	80 e0       	ldi	r24, 0x00	; 0
     518:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <set_motors>
		}
		current_motion_type = new_motion_type;
     51c:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <current_motion_type>
     520:	08 95       	ret
         last_motion_ticks = kilo_ticks;
         set_motion(FORWARD);
      }
      break;
   case FORWARD:
      if( kilo_ticks > last_motion_ticks + max_straight_ticks ) {
     522:	40 91 66 07 	lds	r20, 0x0766	; 0x800766 <kilo_ticks>
     526:	50 91 67 07 	lds	r21, 0x0767	; 0x800767 <kilo_ticks+0x1>
     52a:	60 91 68 07 	lds	r22, 0x0768	; 0x800768 <kilo_ticks+0x2>
     52e:	70 91 69 07 	lds	r23, 0x0769	; 0x800769 <kilo_ticks+0x3>
     532:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <last_motion_ticks>
     536:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <last_motion_ticks+0x1>
     53a:	a0 91 16 01 	lds	r26, 0x0116	; 0x800116 <last_motion_ticks+0x2>
     53e:	b0 91 17 01 	lds	r27, 0x0117	; 0x800117 <last_motion_ticks+0x3>
     542:	81 50       	subi	r24, 0x01	; 1
     544:	9f 4f       	sbci	r25, 0xFF	; 255
     546:	af 4f       	sbci	r26, 0xFF	; 255
     548:	bf 4f       	sbci	r27, 0xFF	; 255
     54a:	84 17       	cp	r24, r20
     54c:	95 07       	cpc	r25, r21
     54e:	a6 07       	cpc	r26, r22
     550:	b7 07       	cpc	r27, r23
     552:	e8 f6       	brcc	.-70     	; 0x50e <random_walk+0x4a>
         /* perform a radnom turn */
         last_motion_ticks = kilo_ticks;
     554:	80 91 66 07 	lds	r24, 0x0766	; 0x800766 <kilo_ticks>
     558:	90 91 67 07 	lds	r25, 0x0767	; 0x800767 <kilo_ticks+0x1>
     55c:	a0 91 68 07 	lds	r26, 0x0768	; 0x800768 <kilo_ticks+0x2>
     560:	b0 91 69 07 	lds	r27, 0x0769	; 0x800769 <kilo_ticks+0x3>
     564:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <last_motion_ticks>
     568:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <last_motion_ticks+0x1>
     56c:	a0 93 16 01 	sts	0x0116, r26	; 0x800116 <last_motion_ticks+0x2>
     570:	b0 93 17 01 	sts	0x0117, r27	; 0x800117 <last_motion_ticks+0x3>
         if( rand_soft()%2 ) {
     574:	0e 94 92 06 	call	0xd24	; 0xd24 <rand_soft>
     578:	80 ff       	sbrs	r24, 0
     57a:	38 c0       	rjmp	.+112    	; 0x5ec <random_walk+0x128>

/*-------------------------------------------------------------------*/
/* Function for setting the motor speed                              */
/*-------------------------------------------------------------------*/
void set_motion( motion_t new_motion_type ) {
	if( current_motion_type != new_motion_type ){
     57c:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <current_motion_type>
     580:	82 30       	cpi	r24, 0x02	; 2
     582:	49 f0       	breq	.+18     	; 0x596 <random_walk+0xd2>
				set_motors(kilo_straight_left,kilo_straight_right);
			else 
				set_motors(67,67);
			break;
		case TURN_LEFT:
			spinup_motors();
     584:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <spinup_motors>
			if (calibrated)
				set_motors(kilo_turn_left,0);
			else
				set_motors(70,0);
     588:	60 e0       	ldi	r22, 0x00	; 0
     58a:	86 e4       	ldi	r24, 0x46	; 70
     58c:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <set_motors>
			break;
		case STOP:
		default:
			set_motors(0,0);         
		}
		current_motion_type = new_motion_type;
     590:	82 e0       	ldi	r24, 0x02	; 2
     592:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <current_motion_type>
            set_motion(TURN_LEFT);
         }
         else {
            set_motion(TURN_RIGHT);
         }
         turning_ticks = rand_soft()%max_turning_ticks + 1;
     596:	0e 94 92 06 	call	0xd24	; 0xd24 <rand_soft>
     59a:	91 e0       	ldi	r25, 0x01	; 1
     59c:	80 3a       	cpi	r24, 0xA0	; 160
     59e:	08 f4       	brcc	.+2      	; 0x5a2 <random_walk+0xde>
     5a0:	90 e0       	ldi	r25, 0x00	; 0
     5a2:	20 e6       	ldi	r18, 0x60	; 96
     5a4:	92 9f       	mul	r25, r18
     5a6:	80 0d       	add	r24, r0
     5a8:	11 24       	eor	r1, r1
     5aa:	90 e0       	ldi	r25, 0x00	; 0
     5ac:	01 96       	adiw	r24, 0x01	; 1
     5ae:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <turning_ticks+0x1>
     5b2:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <turning_ticks>
     5b6:	08 95       	ret
   switch( current_motion_type ) {
   case TURN_LEFT:
   case TURN_RIGHT:
      if( kilo_ticks > last_motion_ticks + turning_ticks ) {
         /* start moving forward */
         last_motion_ticks = kilo_ticks;
     5b8:	80 91 66 07 	lds	r24, 0x0766	; 0x800766 <kilo_ticks>
     5bc:	90 91 67 07 	lds	r25, 0x0767	; 0x800767 <kilo_ticks+0x1>
     5c0:	a0 91 68 07 	lds	r26, 0x0768	; 0x800768 <kilo_ticks+0x2>
     5c4:	b0 91 69 07 	lds	r27, 0x0769	; 0x800769 <kilo_ticks+0x3>
     5c8:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <last_motion_ticks>
     5cc:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <last_motion_ticks+0x1>
     5d0:	a0 93 16 01 	sts	0x0116, r26	; 0x800116 <last_motion_ticks+0x2>
     5d4:	b0 93 17 01 	sts	0x0117, r27	; 0x800117 <last_motion_ticks+0x3>
void set_motion( motion_t new_motion_type ) {
	if( current_motion_type != new_motion_type ){
		int calibrated = 0;
		switch( new_motion_type ) {
		case FORWARD:
			spinup_motors();
     5d8:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <spinup_motors>
			if (calibrated)
				set_motors(kilo_straight_left,kilo_straight_right);
			else 
				set_motors(67,67);
     5dc:	63 e4       	ldi	r22, 0x43	; 67
     5de:	83 e4       	ldi	r24, 0x43	; 67
     5e0:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <set_motors>
			break;
		case STOP:
		default:
			set_motors(0,0);         
		}
		current_motion_type = new_motion_type;
     5e4:	81 e0       	ldi	r24, 0x01	; 1
     5e6:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <current_motion_type>
     5ea:	08 95       	ret

/*-------------------------------------------------------------------*/
/* Function for setting the motor speed                              */
/*-------------------------------------------------------------------*/
void set_motion( motion_t new_motion_type ) {
	if( current_motion_type != new_motion_type ){
     5ec:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <current_motion_type>
     5f0:	83 30       	cpi	r24, 0x03	; 3
     5f2:	89 f2       	breq	.-94     	; 0x596 <random_walk+0xd2>
				set_motors(kilo_turn_left,0);
			else
				set_motors(70,0);
			break;
		case TURN_RIGHT:
			spinup_motors();
     5f4:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <spinup_motors>
			if (calibrated)
				set_motors(0,kilo_turn_right);
			else
				set_motors(0,70);
     5f8:	66 e4       	ldi	r22, 0x46	; 70
     5fa:	80 e0       	ldi	r24, 0x00	; 0
     5fc:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <set_motors>
			break;
		case STOP:
		default:
			set_motors(0,0);         
		}
		current_motion_type = new_motion_type;
     600:	83 e0       	ldi	r24, 0x03	; 3
     602:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <current_motion_type>
     606:	c7 cf       	rjmp	.-114    	; 0x596 <random_walk+0xd2>

00000608 <broadcast>:

/*-------------------------------------------------------------------*/
/* Function to select a random word and to broadcast it              */
/*-------------------------------------------------------------------*/
void broadcast() {
   if( kilo_ticks > last_broadcast_ticks + max_broadcast_ticks ) {
     608:	40 91 66 07 	lds	r20, 0x0766	; 0x800766 <kilo_ticks>
     60c:	50 91 67 07 	lds	r21, 0x0767	; 0x800767 <kilo_ticks+0x1>
     610:	60 91 68 07 	lds	r22, 0x0768	; 0x800768 <kilo_ticks+0x2>
     614:	70 91 69 07 	lds	r23, 0x0769	; 0x800769 <kilo_ticks+0x3>
     618:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
     61c:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <__data_end+0x1>
     620:	a0 91 12 01 	lds	r26, 0x0112	; 0x800112 <__data_end+0x2>
     624:	b0 91 13 01 	lds	r27, 0x0113	; 0x800113 <__data_end+0x3>
     628:	81 50       	subi	r24, 0x01	; 1
     62a:	9f 4f       	sbci	r25, 0xFF	; 255
     62c:	af 4f       	sbci	r26, 0xFF	; 255
     62e:	bf 4f       	sbci	r27, 0xFF	; 255
     630:	84 17       	cp	r24, r20
     632:	95 07       	cpc	r25, r21
     634:	a6 07       	cpc	r26, r22
     636:	b7 07       	cpc	r27, r23
     638:	20 f5       	brcc	.+72     	; 0x682 <broadcast+0x7a>
      last_broadcast_ticks = kilo_ticks;
     63a:	80 91 66 07 	lds	r24, 0x0766	; 0x800766 <kilo_ticks>
     63e:	90 91 67 07 	lds	r25, 0x0767	; 0x800767 <kilo_ticks+0x1>
     642:	a0 91 68 07 	lds	r26, 0x0768	; 0x800768 <kilo_ticks+0x2>
     646:	b0 91 69 07 	lds	r27, 0x0769	; 0x800769 <kilo_ticks+0x3>
     64a:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
     64e:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <__data_end+0x1>
     652:	a0 93 12 01 	sts	0x0112, r26	; 0x800112 <__data_end+0x2>
     656:	b0 93 13 01 	sts	0x0113, r27	; 0x800113 <__data_end+0x3>
      
      /* Select a random word from the inventory, or invent a new one
         if the inventory is empty */
      if( inventory_size == 0 ) {
     65a:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <inventory_size>
     65e:	88 23       	and	r24, r24
     660:	89 f0       	breq	.+34     	; 0x684 <broadcast+0x7c>
         w_index = rand_soft()%num_words;
         inventory[0] = words[w_index].data[0];
         inventory_size = 1;
      }
      else {
         w_index = inventory[rand_soft() % inventory_size];
     662:	0e 94 92 06 	call	0xd24	; 0xd24 <rand_soft>
     666:	60 91 1b 01 	lds	r22, 0x011B	; 0x80011b <inventory_size>
     66a:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <__udivmodqi4>
     66e:	e9 2f       	mov	r30, r25
     670:	f0 e0       	ldi	r31, 0x00	; 0
     672:	ed 5d       	subi	r30, 0xDD	; 221
     674:	f8 4f       	sbci	r31, 0xF8	; 248
     676:	80 81       	ld	r24, Z
     678:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <w_index>
      }
      
      /* set broadcast flag for transmission */
      broadcast_word = true;
     67c:	81 e0       	ldi	r24, 0x01	; 1
     67e:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <broadcast_word>
     682:	08 95       	ret
      last_broadcast_ticks = kilo_ticks;
      
      /* Select a random word from the inventory, or invent a new one
         if the inventory is empty */
      if( inventory_size == 0 ) {
         w_index = rand_soft()%num_words;
     684:	0e 94 92 06 	call	0xd24	; 0xd24 <rand_soft>
     688:	8f 77       	andi	r24, 0x7F	; 127
     68a:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <w_index>
         inventory[0] = words[w_index].data[0];
     68e:	90 e0       	ldi	r25, 0x00	; 0
     690:	fc 01       	movw	r30, r24
     692:	ee 0f       	add	r30, r30
     694:	ff 1f       	adc	r31, r31
     696:	e8 0f       	add	r30, r24
     698:	f9 1f       	adc	r31, r25
     69a:	ee 0f       	add	r30, r30
     69c:	ff 1f       	adc	r31, r31
     69e:	ee 0f       	add	r30, r30
     6a0:	ff 1f       	adc	r31, r31
     6a2:	ed 5d       	subi	r30, 0xDD	; 221
     6a4:	fe 4f       	sbci	r31, 0xFE	; 254
     6a6:	80 81       	ld	r24, Z
     6a8:	80 93 23 07 	sts	0x0723, r24	; 0x800723 <inventory>
         inventory_size = 1;
     6ac:	81 e0       	ldi	r24, 0x01	; 1
     6ae:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <inventory_size>
     6b2:	e4 cf       	rjmp	.-56     	; 0x67c <broadcast+0x74>

000006b4 <color_code>:

/*-------------------------------------------------------------------*/
/* Function to color-code the inventory size and the selected word   */
/*-------------------------------------------------------------------*/
void color_code() {
   if( inventory_size != 1 ) {
     6b4:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <inventory_size>
     6b8:	81 30       	cpi	r24, 0x01	; 1
     6ba:	19 f0       	breq	.+6      	; 0x6c2 <color_code+0xe>
      set_color(RGB(0,0,0));
     6bc:	80 e0       	ldi	r24, 0x00	; 0
     6be:	0c 94 19 0a 	jmp	0x1432	; 0x1432 <set_color>
      return;
   }

   /* Convert the number in base 4 to turn on the LED */
   uint8_t color = inventory[0]%63 + 1;
     6c2:	90 91 23 07 	lds	r25, 0x0723	; 0x800723 <inventory>
     6c6:	85 e0       	ldi	r24, 0x05	; 5
     6c8:	98 9f       	mul	r25, r24
     6ca:	21 2d       	mov	r18, r1
     6cc:	11 24       	eor	r1, r1
     6ce:	89 2f       	mov	r24, r25
     6d0:	82 1b       	sub	r24, r18
     6d2:	86 95       	lsr	r24
     6d4:	82 0f       	add	r24, r18
     6d6:	82 95       	swap	r24
     6d8:	86 95       	lsr	r24
     6da:	87 70       	andi	r24, 0x07	; 7
     6dc:	2f e3       	ldi	r18, 0x3F	; 63
     6de:	82 9f       	mul	r24, r18
     6e0:	90 19       	sub	r25, r0
     6e2:	11 24       	eor	r1, r1
     6e4:	9f 5f       	subi	r25, 0xFF	; 255
   uint8_t r     = color/16;
   uint8_t rem1  = color%16;
   uint8_t g     = rem1/4;
   uint8_t b     = rem1%4;
   set_color(RGB(r,g,b));
     6e6:	29 2f       	mov	r18, r25
     6e8:	23 70       	andi	r18, 0x03	; 3
     6ea:	80 e1       	ldi	r24, 0x10	; 16
     6ec:	28 9f       	mul	r18, r24
     6ee:	90 01       	movw	r18, r0
     6f0:	11 24       	eor	r1, r1
     6f2:	89 2f       	mov	r24, r25
     6f4:	82 95       	swap	r24
     6f6:	8f 70       	andi	r24, 0x0F	; 15
     6f8:	82 2b       	or	r24, r18
     6fa:	9c 70       	andi	r25, 0x0C	; 12
     6fc:	89 2b       	or	r24, r25
     6fe:	0c 94 19 0a 	jmp	0x1432	; 0x1432 <set_color>

00000702 <message_rx_dummy>:
/* Number of clock cycles for an entire message. */
#define rx_msgcycles (11*rx_bitcycles)

typedef void (*AddressPointer_t)(void) __attribute__ ((noreturn));

void message_rx_dummy(message_t *m, distance_measurement_t *d) { }
     702:	08 95       	ret

00000704 <message_tx_dummy>:
message_t *message_tx_dummy() { return NULL; }
     704:	80 e0       	ldi	r24, 0x00	; 0
     706:	90 e0       	ldi	r25, 0x00	; 0
     708:	08 95       	ret

0000070a <message_tx_success_dummy>:
void message_tx_success_dummy() {}
     70a:	08 95       	ret

0000070c <kilo_init>:
    RUNNING,
    CHARGING,
    MOVING
} kilo_state;

void kilo_init() {
     70c:	df 92       	push	r13
     70e:	ef 92       	push	r14
     710:	ff 92       	push	r15
     712:	0f 93       	push	r16
     714:	1f 93       	push	r17
     716:	cf 93       	push	r28
     718:	df 93       	push	r29
    cli();
     71a:	f8 94       	cli

    ports_off();
     71c:	14 b8       	out	0x04, r1	; 4
     71e:	17 b8       	out	0x07, r1	; 7
     720:	1a b8       	out	0x0a, r1	; 10
     722:	15 b8       	out	0x05, r1	; 5
     724:	18 b8       	out	0x08, r1	; 8
     726:	1b b8       	out	0x0b, r1	; 11
    ports_on();
     728:	52 9a       	sbi	0x0a, 2	; 10
     72a:	5a 9a       	sbi	0x0b, 2	; 11
    tx_timer_setup();
     72c:	14 bc       	out	0x24, r1	; 36
     72e:	85 e0       	ldi	r24, 0x05	; 5
     730:	85 bd       	out	0x25, r24	; 37
     732:	8f ef       	ldi	r24, 0xFF	; 255
     734:	87 bd       	out	0x27, r24	; 39
     736:	82 e0       	ldi	r24, 0x02	; 2
     738:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
    rx_timer_setup();
     73c:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     740:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
     744:	2f e8       	ldi	r18, 0x8F	; 143
     746:	3b e0       	ldi	r19, 0x0B	; 11
     748:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
     74c:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
     750:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
    motors_setup();
     754:	53 98       	cbi	0x0a, 3	; 10
     756:	23 98       	cbi	0x04, 3	; 4
     758:	91 ea       	ldi	r25, 0xA1	; 161
     75a:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
     75e:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
     762:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>
     766:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
    acomp_setup();
     76a:	8b e0       	ldi	r24, 0x0B	; 11
     76c:	80 bf       	out	0x30, r24	; 48
     76e:	83 e0       	ldi	r24, 0x03	; 3
     770:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <__DATA_REGION_ORIGIN__+0x1f>
    adc_setup();
     774:	86 e0       	ldi	r24, 0x06	; 6
     776:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
     77a:	83 e8       	ldi	r24, 0x83	; 131
     77c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     780:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     784:	80 64       	ori	r24, 0x40	; 64
     786:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     78a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     78e:	86 fd       	sbrc	r24, 6
     790:	fc cf       	rjmp	.-8      	; 0x78a <kilo_init+0x7e>
    adc_trigger_high_gain();
     792:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
     796:	83 ea       	ldi	r24, 0xA3	; 163
     798:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     79c:	81 e0       	ldi	r24, 0x01	; 1
     79e:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__DATA_REGION_ORIGIN__+0x1b>

    uint8_t osccal = eeprom_read_byte(EEPROM_OSCCAL);
     7a2:	81 e0       	ldi	r24, 0x01	; 1
     7a4:	90 e0       	ldi	r25, 0x00	; 0
     7a6:	0e 94 74 10 	call	0x20e8	; 0x20e8 <eeprom_read_byte>
    if (osccal != 0xFF)
     7aa:	8f 3f       	cpi	r24, 0xFF	; 255
     7ac:	11 f0       	breq	.+4      	; 0x7b2 <kilo_init+0xa6>
        OSCCAL = osccal;
     7ae:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__DATA_REGION_ORIGIN__+0x6>

    rx_busy = 0;
     7b2:	10 92 6a 07 	sts	0x076A, r1	; 0x80076a <rx_busy>
    rx_leadingbit = 1;
     7b6:	c1 e0       	ldi	r28, 0x01	; 1
     7b8:	c0 93 43 07 	sts	0x0743, r28	; 0x800743 <rx_leadingbit>
    rx_leadingbyte = 1;
     7bc:	c0 93 87 07 	sts	0x0787, r28	; 0x800787 <rx_leadingbyte>
    rx_byteindex = 0;
     7c0:	10 92 61 07 	sts	0x0761, r1	; 0x800761 <rx_byteindex>
    rx_bytevalue = 0;
     7c4:	10 92 9b 07 	sts	0x079B, r1	; 0x80079b <rx_bytevalue>
#ifndef BOOTLOADER
    tx_mask = eeprom_read_byte(EEPROM_TXMASK);
     7c8:	80 e9       	ldi	r24, 0x90	; 144
     7ca:	90 e0       	ldi	r25, 0x00	; 0
     7cc:	0e 94 74 10 	call	0x20e8	; 0x20e8 <eeprom_read_byte>
     7d0:	80 93 60 07 	sts	0x0760, r24	; 0x800760 <tx_mask>
    if (tx_mask & ~TX_MASK_MAX)
     7d4:	80 91 60 07 	lds	r24, 0x0760	; 0x800760 <tx_mask>
     7d8:	88 73       	andi	r24, 0x38	; 56
     7da:	11 f0       	breq	.+4      	; 0x7e0 <kilo_init+0xd4>
        tx_mask = TX_MASK_MIN;
     7dc:	c0 93 60 07 	sts	0x0760, r28	; 0x800760 <tx_mask>
    tx_clock = 0;
     7e0:	10 92 8b 07 	sts	0x078B, r1	; 0x80078b <tx_clock+0x1>
     7e4:	10 92 8a 07 	sts	0x078A, r1	; 0x80078a <tx_clock>
    tx_increment = 255;
     7e8:	8f ef       	ldi	r24, 0xFF	; 255
     7ea:	90 e0       	ldi	r25, 0x00	; 0
     7ec:	90 93 89 07 	sts	0x0789, r25	; 0x800789 <tx_increment+0x1>
     7f0:	80 93 88 07 	sts	0x0788, r24	; 0x800788 <tx_increment>
    kilo_ticks = 0;
     7f4:	10 92 66 07 	sts	0x0766, r1	; 0x800766 <kilo_ticks>
     7f8:	10 92 67 07 	sts	0x0767, r1	; 0x800767 <kilo_ticks+0x1>
     7fc:	10 92 68 07 	sts	0x0768, r1	; 0x800768 <kilo_ticks+0x2>
     800:	10 92 69 07 	sts	0x0769, r1	; 0x800769 <kilo_ticks+0x3>
    kilo_state = IDLE;
     804:	81 e0       	ldi	r24, 0x01	; 1
     806:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <kilo_state>
    kilo_tx_period = 3906;
     80a:	82 e4       	ldi	r24, 0x42	; 66
     80c:	9f e0       	ldi	r25, 0x0F	; 15
     80e:	90 93 9a 07 	sts	0x079A, r25	; 0x80079a <kilo_tx_period+0x1>
     812:	80 93 99 07 	sts	0x0799, r24	; 0x800799 <kilo_tx_period>
    kilo_uid = eeprom_read_byte(EEPROM_UID) | eeprom_read_byte(EEPROM_UID+1)<<8;
     816:	80 eb       	ldi	r24, 0xB0	; 176
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	0e 94 74 10 	call	0x20e8	; 0x20e8 <eeprom_read_byte>
     81e:	c8 2f       	mov	r28, r24
     820:	81 eb       	ldi	r24, 0xB1	; 177
     822:	90 e0       	ldi	r25, 0x00	; 0
     824:	0e 94 74 10 	call	0x20e8	; 0x20e8 <eeprom_read_byte>
     828:	2c 2f       	mov	r18, r28
     82a:	30 e0       	ldi	r19, 0x00	; 0
     82c:	38 2b       	or	r19, r24
     82e:	30 93 9d 07 	sts	0x079D, r19	; 0x80079d <kilo_uid+0x1>
     832:	20 93 9c 07 	sts	0x079C, r18	; 0x80079c <kilo_uid>
    kilo_turn_left = eeprom_read_byte(EEPROM_LEFT_ROTATE);
     836:	85 e0       	ldi	r24, 0x05	; 5
     838:	90 e0       	ldi	r25, 0x00	; 0
     83a:	0e 94 74 10 	call	0x20e8	; 0x20e8 <eeprom_read_byte>
     83e:	80 93 a0 07 	sts	0x07A0, r24	; 0x8007a0 <kilo_turn_left>
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
     842:	89 e0       	ldi	r24, 0x09	; 9
     844:	90 e0       	ldi	r25, 0x00	; 0
     846:	0e 94 74 10 	call	0x20e8	; 0x20e8 <eeprom_read_byte>
     84a:	80 93 8c 07 	sts	0x078C, r24	; 0x80078c <kilo_turn_right>
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
     84e:	8c e0       	ldi	r24, 0x0C	; 12
     850:	90 e0       	ldi	r25, 0x00	; 0
     852:	0e 94 74 10 	call	0x20e8	; 0x20e8 <eeprom_read_byte>
     856:	80 93 9e 07 	sts	0x079E, r24	; 0x80079e <kilo_straight_left>
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);
     85a:	84 e1       	ldi	r24, 0x14	; 20
     85c:	90 e0       	ldi	r25, 0x00	; 0
     85e:	0e 94 74 10 	call	0x20e8	; 0x20e8 <eeprom_read_byte>
     862:	80 93 9f 07 	sts	0x079F, r24	; 0x80079f <kilo_straight_right>
     866:	5b e6       	ldi	r21, 0x6B	; 107
     868:	e5 2e       	mov	r14, r21
     86a:	57 e0       	ldi	r21, 0x07	; 7
     86c:	f5 2e       	mov	r15, r21
     86e:	04 e4       	ldi	r16, 0x44	; 68
     870:	17 e0       	ldi	r17, 0x07	; 7
     872:	c0 e2       	ldi	r28, 0x20	; 32
     874:	d0 e0       	ldi	r29, 0x00	; 0

    uint8_t i;
    for (i=0; i<14; i++) {
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
     876:	ce 01       	movw	r24, r28
     878:	0e 94 74 10 	call	0x20e8	; 0x20e8 <eeprom_read_byte>
     87c:	d8 2e       	mov	r13, r24
     87e:	ce 01       	movw	r24, r28
     880:	01 96       	adiw	r24, 0x01	; 1
     882:	0e 94 74 10 	call	0x20e8	; 0x20e8 <eeprom_read_byte>
     886:	2d 2d       	mov	r18, r13
     888:	30 e0       	ldi	r19, 0x00	; 0
     88a:	32 2f       	mov	r19, r18
     88c:	22 27       	eor	r18, r18
     88e:	28 2b       	or	r18, r24
     890:	f7 01       	movw	r30, r14
     892:	21 93       	st	Z+, r18
     894:	31 93       	st	Z+, r19
     896:	7f 01       	movw	r14, r30
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
     898:	ce 01       	movw	r24, r28
     89a:	c0 96       	adiw	r24, 0x30	; 48
     89c:	0e 94 74 10 	call	0x20e8	; 0x20e8 <eeprom_read_byte>
     8a0:	d8 2e       	mov	r13, r24
     8a2:	ce 01       	movw	r24, r28
     8a4:	c1 96       	adiw	r24, 0x31	; 49
     8a6:	0e 94 74 10 	call	0x20e8	; 0x20e8 <eeprom_read_byte>
     8aa:	2d 2d       	mov	r18, r13
     8ac:	30 e0       	ldi	r19, 0x00	; 0
     8ae:	32 2f       	mov	r19, r18
     8b0:	22 27       	eor	r18, r18
     8b2:	28 2b       	or	r18, r24
     8b4:	f8 01       	movw	r30, r16
     8b6:	21 93       	st	Z+, r18
     8b8:	31 93       	st	Z+, r19
     8ba:	8f 01       	movw	r16, r30
     8bc:	22 96       	adiw	r28, 0x02	; 2
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);

    uint8_t i;
    for (i=0; i<14; i++) {
     8be:	cc 33       	cpi	r28, 0x3C	; 60
     8c0:	d1 05       	cpc	r29, r1
     8c2:	c9 f6       	brne	.-78     	; 0x876 <kilo_init+0x16a>
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
    }
#endif
    sei();
     8c4:	78 94       	sei
}
     8c6:	df 91       	pop	r29
     8c8:	cf 91       	pop	r28
     8ca:	1f 91       	pop	r17
     8cc:	0f 91       	pop	r16
     8ce:	ff 90       	pop	r15
     8d0:	ef 90       	pop	r14
     8d2:	df 90       	pop	r13
     8d4:	08 95       	ret

000008d6 <__vector_6>:

/**
 * Watchdog timer interrupt.
 * Used to wakeup from low power sleep mode.
 */
ISR(WDT_vect) {
     8d6:	1f 92       	push	r1
     8d8:	0f 92       	push	r0
     8da:	0f b6       	in	r0, 0x3f	; 63
     8dc:	0f 92       	push	r0
     8de:	11 24       	eor	r1, r1
     8e0:	8f 93       	push	r24
     8e2:	0f b6       	in	r0, 0x3f	; 63
     8e4:	f8 94       	cli
     8e6:	a8 95       	wdr
     8e8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     8ec:	88 61       	ori	r24, 0x18	; 24
     8ee:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
     8f2:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
     8f6:	0f be       	out	0x3f, r0	; 63
    wdt_disable();
}
     8f8:	8f 91       	pop	r24
     8fa:	0f 90       	pop	r0
     8fc:	0f be       	out	0x3f, r0	; 63
     8fe:	0f 90       	pop	r0
     900:	1f 90       	pop	r1
     902:	18 95       	reti

00000904 <kilo_start>:
    MOVE_STRAIGHT
};

static volatile uint8_t prev_motion = MOVE_STOP, cur_motion = MOVE_STOP;

void kilo_start(void (*setup)(void), void (*loop)(void)) {
     904:	3c 01       	movw	r6, r24
     906:	eb 01       	movw	r28, r22
    int16_t voltage;
    uint8_t has_setup = 0;
     908:	10 e0       	ldi	r17, 0x00	; 0
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    OCR2B = cw;
     90a:	99 24       	eor	r9, r9
     90c:	9a 94       	dec	r9
            case SETUP:
                if (!has_setup) {
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     90e:	84 e0       	ldi	r24, 0x04	; 4
     910:	c8 2e       	mov	r12, r24

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
        cli();                                    // disable interrupts
        adc_setup_conversion(6);
     912:	96 e0       	ldi	r25, 0x06	; 6
     914:	a9 2e       	mov	r10, r25
     916:	23 e8       	ldi	r18, 0x83	; 131
     918:	b2 2e       	mov	r11, r18
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
     91a:	38 e1       	ldi	r19, 0x18	; 24
     91c:	d3 2e       	mov	r13, r19
     91e:	49 e2       	ldi	r20, 0x29	; 41
     920:	e4 2e       	mov	r14, r20

void kilo_start(void (*setup)(void), void (*loop)(void)) {
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
     922:	e0 91 22 01 	lds	r30, 0x0122	; 0x800122 <kilo_state>
     926:	f0 e0       	ldi	r31, 0x00	; 0
     928:	e7 30       	cpi	r30, 0x07	; 7
     92a:	f1 05       	cpc	r31, r1
     92c:	d0 f7       	brcc	.-12     	; 0x922 <kilo_start+0x1e>
     92e:	ec 5c       	subi	r30, 0xCC	; 204
     930:	ff 4f       	sbci	r31, 0xFF	; 255
     932:	0c 94 df 0d 	jmp	0x1bbe	; 0x1bbe <__tablejump2__>
                    _delay_ms(200);
                } else
                    set_color(RGB(0,0,0));
                break;
            case SETUP:
                if (!has_setup) {
     936:	11 23       	and	r17, r17
     938:	09 f4       	brne	.+2      	; 0x93c <kilo_start+0x38>
     93a:	05 c1       	rjmp	.+522    	; 0xb46 <kilo_start+0x242>
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     93c:	c0 92 22 01 	sts	0x0122, r12	; 0x800122 <kilo_state>
     940:	11 e0       	ldi	r17, 0x01	; 1
            case RUNNING:
                loop();
     942:	fe 01       	movw	r30, r28
     944:	09 95       	icall
                break;
     946:	ed cf       	rjmp	.-38     	; 0x922 <kilo_start+0x1e>
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     948:	80 91 6a 07 	lds	r24, 0x076A	; 0x80076a <rx_busy>
     94c:	81 11       	cpse	r24, r1
     94e:	05 c1       	rjmp	.+522    	; 0xb5a <kilo_start+0x256>
        cli();                                    // disable interrupts
     950:	f8 94       	cli
        adc_setup_conversion(6);
     952:	a0 92 7c 00 	sts	0x007C, r10	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
     956:	b0 92 7a 00 	sts	0x007A, r11	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
        adc_start_conversion();
     95a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     95e:	80 64       	ori	r24, 0x40	; 64
     960:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
        adc_finish_conversion();
     964:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     968:	86 fd       	sbrc	r24, 6
     96a:	fc cf       	rjmp	.-8      	; 0x964 <kilo_start+0x60>
        voltage = ADCW;                           // store AD result
     96c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
     970:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     974:	78 94       	sei
                set_color(RGB(0,0,0));
                _delay_ms(200);
                break;
            case BATTERY:
                voltage = get_voltage();
                if(voltage > 682)
     976:	8b 3a       	cpi	r24, 0xAB	; 171
     978:	e2 e0       	ldi	r30, 0x02	; 2
     97a:	9e 07       	cpc	r25, r30
     97c:	0c f0       	brlt	.+2      	; 0x980 <kilo_start+0x7c>
     97e:	e6 c0       	rjmp	.+460    	; 0xb4c <kilo_start+0x248>
                    set_color(RGB(0,3,0));
                else if(voltage > 648)
     980:	89 38       	cpi	r24, 0x89	; 137
     982:	f2 e0       	ldi	r31, 0x02	; 2
     984:	9f 07       	cpc	r25, r31
     986:	0c f0       	brlt	.+2      	; 0x98a <kilo_start+0x86>
     988:	ef c0       	rjmp	.+478    	; 0xb68 <kilo_start+0x264>
                    set_color(RGB(0,0,3));
                else if(voltage > 614)
     98a:	87 36       	cpi	r24, 0x67	; 103
     98c:	92 40       	sbci	r25, 0x02	; 2
     98e:	0c f4       	brge	.+2      	; 0x992 <kilo_start+0x8e>
     990:	e4 c0       	rjmp	.+456    	; 0xb5a <kilo_start+0x256>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     992:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     994:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     996:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     998:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     99a:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     99c:	3c 98       	cbi	0x07, 4	; 7
     99e:	c1 cf       	rjmp	.-126    	; 0x922 <kilo_start+0x1e>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     9a0:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     9a2:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     9a4:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     9a6:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     9a8:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     9aa:	3c 98       	cbi	0x07, 4	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     9ac:	ef ec       	ldi	r30, 0xCF	; 207
     9ae:	f7 e0       	ldi	r31, 0x07	; 7
     9b0:	31 97       	sbiw	r30, 0x01	; 1
     9b2:	f1 f7       	brne	.-4      	; 0x9b0 <kilo_start+0xac>
     9b4:	00 c0       	rjmp	.+0      	; 0x9b6 <kilo_start+0xb2>
     9b6:	00 00       	nop

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     9b8:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     9ba:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     9bc:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     9be:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     9c0:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     9c2:	3c 98       	cbi	0x07, 4	; 7
     9c4:	ff ef       	ldi	r31, 0xFF	; 255
     9c6:	21 ee       	ldi	r18, 0xE1	; 225
     9c8:	84 e0       	ldi	r24, 0x04	; 4
     9ca:	f1 50       	subi	r31, 0x01	; 1
     9cc:	20 40       	sbci	r18, 0x00	; 0
     9ce:	80 40       	sbci	r24, 0x00	; 0
     9d0:	e1 f7       	brne	.-8      	; 0x9ca <kilo_start+0xc6>
     9d2:	00 c0       	rjmp	.+0      	; 0x9d4 <kilo_start+0xd0>
     9d4:	00 00       	nop
     9d6:	a5 cf       	rjmp	.-182    	; 0x922 <kilo_start+0x1e>
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
            case SLEEPING:
                cli();
     9d8:	f8 94       	cli
                acomp_off();
     9da:	80 b7       	in	r24, 0x30	; 48
     9dc:	87 7f       	andi	r24, 0xF7	; 247
     9de:	80 bf       	out	0x30, r24	; 48
                adc_off();
     9e0:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     9e4:	8f 77       	andi	r24, 0x7F	; 127
     9e6:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
                ports_off();
     9ea:	14 b8       	out	0x04, r1	; 4
     9ec:	17 b8       	out	0x07, r1	; 7
     9ee:	1a b8       	out	0x0a, r1	; 10
     9f0:	15 b8       	out	0x05, r1	; 5
     9f2:	18 b8       	out	0x08, r1	; 8
     9f4:	1b b8       	out	0x0b, r1	; 11
     9f6:	0f b6       	in	r0, 0x3f	; 63
     9f8:	f8 94       	cli
     9fa:	a8 95       	wdr
     9fc:	d0 92 60 00 	sts	0x0060, r13	; 0x800060 <__DATA_REGION_ORIGIN__>
     a00:	0f be       	out	0x3f, r0	; 63
     a02:	e0 92 60 00 	sts	0x0060, r14	; 0x800060 <__DATA_REGION_ORIGIN__>
                wdt_enable(WDTO_8S);
                WDTCSR |= (1<<WDIE);
     a06:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     a0a:	80 64       	ori	r24, 0x40	; 64
     a0c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
                set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     a10:	83 b7       	in	r24, 0x33	; 51
     a12:	81 7f       	andi	r24, 0xF1	; 241
     a14:	84 60       	ori	r24, 0x04	; 4
     a16:	83 bf       	out	0x33, r24	; 51
                cli();
     a18:	f8 94       	cli
                sleep_enable();
     a1a:	83 b7       	in	r24, 0x33	; 51
     a1c:	81 60       	ori	r24, 0x01	; 1
     a1e:	83 bf       	out	0x33, r24	; 51
                sei();
     a20:	78 94       	sei
                sleep_cpu();
     a22:	88 95       	sleep
                sleep_disable();
     a24:	83 b7       	in	r24, 0x33	; 51
     a26:	8e 7f       	andi	r24, 0xFE	; 254
     a28:	83 bf       	out	0x33, r24	; 51
                sei();
     a2a:	78 94       	sei
                rx_busy = 0;
     a2c:	10 92 6a 07 	sts	0x076A, r1	; 0x80076a <rx_busy>
                ports_on();
     a30:	52 9a       	sbi	0x0a, 2	; 10
     a32:	5a 9a       	sbi	0x0b, 2	; 11
                adc_on();
     a34:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     a38:	80 68       	ori	r24, 0x80	; 128
     a3a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a3e:	87 e5       	ldi	r24, 0x57	; 87
     a40:	92 e0       	ldi	r25, 0x02	; 2
     a42:	01 97       	sbiw	r24, 0x01	; 1
     a44:	f1 f7       	brne	.-4      	; 0xa42 <kilo_start+0x13e>
     a46:	00 c0       	rjmp	.+0      	; 0xa48 <kilo_start+0x144>
     a48:	00 00       	nop
                _delay_us(300);
                acomp_on();
     a4a:	80 b7       	in	r24, 0x30	; 48
     a4c:	88 61       	ori	r24, 0x18	; 24
     a4e:	80 bf       	out	0x30, r24	; 48

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     a50:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     a52:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     a54:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     a56:	3a 9a       	sbi	0x07, 2	; 7
    else
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
     a58:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
        DDRC |= (1<<4);
     a5a:	3c 9a       	sbi	0x07, 4	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a5c:	ef e1       	ldi	r30, 0x1F	; 31
     a5e:	fe e4       	ldi	r31, 0x4E	; 78
     a60:	31 97       	sbiw	r30, 0x01	; 1
     a62:	f1 f7       	brne	.-4      	; 0xa60 <kilo_start+0x15c>
     a64:	00 c0       	rjmp	.+0      	; 0xa66 <kilo_start+0x162>
     a66:	00 00       	nop
                _delay_us(300);
                acomp_on();

                set_color(RGB(3,3,3));
                _delay_ms(10);
                if (rx_busy) {
     a68:	80 91 6a 07 	lds	r24, 0x076A	; 0x80076a <rx_busy>
     a6c:	81 11       	cpse	r24, r1
     a6e:	5b c0       	rjmp	.+182    	; 0xb26 <kilo_start+0x222>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     a70:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     a72:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     a74:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     a76:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     a78:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     a7a:	3c 98       	cbi	0x07, 4	; 7
     a7c:	52 cf       	rjmp	.-348    	; 0x922 <kilo_start+0x1e>
                kilo_state = RUNNING;
            case RUNNING:
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
     a7e:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <cur_motion>
     a82:	81 11       	cpse	r24, r1
     a84:	25 c0       	rjmp	.+74     	; 0xad0 <kilo_start+0x1cc>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     a86:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
    OCR2B = cw;
     a8a:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
     a8e:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <prev_motion>
     a92:	47 cf       	rjmp	.-370    	; 0x922 <kilo_start+0x1e>
                    set_color(RGB(3,3,0));
                else
                    set_color(RGB(3,0,0));
                break;
            case CHARGING:
                if (is_charging()) {
     a94:	48 99       	sbic	0x09, 0	; 9
     a96:	ec cf       	rjmp	.-40     	; 0xa70 <kilo_start+0x16c>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     a98:	55 9a       	sbi	0x0a, 5	; 10
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     a9a:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     a9c:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     a9e:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     aa0:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     aa2:	3c 98       	cbi	0x07, 4	; 7
     aa4:	8f ec       	ldi	r24, 0xCF	; 207
     aa6:	97 e0       	ldi	r25, 0x07	; 7
     aa8:	01 97       	sbiw	r24, 0x01	; 1
     aaa:	f1 f7       	brne	.-4      	; 0xaa8 <kilo_start+0x1a4>
     aac:	00 c0       	rjmp	.+0      	; 0xaae <kilo_start+0x1aa>
     aae:	00 00       	nop

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     ab0:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     ab2:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     ab4:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     ab6:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     ab8:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     aba:	3c 98       	cbi	0x07, 4	; 7
     abc:	9f ef       	ldi	r25, 0xFF	; 255
     abe:	e1 ee       	ldi	r30, 0xE1	; 225
     ac0:	f4 e0       	ldi	r31, 0x04	; 4
     ac2:	91 50       	subi	r25, 0x01	; 1
     ac4:	e0 40       	sbci	r30, 0x00	; 0
     ac6:	f0 40       	sbci	r31, 0x00	; 0
     ac8:	e1 f7       	brne	.-8      	; 0xac2 <kilo_start+0x1be>
     aca:	00 c0       	rjmp	.+0      	; 0xacc <kilo_start+0x1c8>
     acc:	00 00       	nop
     ace:	29 cf       	rjmp	.-430    	; 0x922 <kilo_start+0x1e>
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
                } else {
                    if (cur_motion != prev_motion) {
     ad0:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <cur_motion>
     ad4:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <prev_motion>
     ad8:	98 17       	cp	r25, r24
     ada:	09 f4       	brne	.+2      	; 0xade <kilo_start+0x1da>
     adc:	22 cf       	rjmp	.-444    	; 0x922 <kilo_start+0x1e>
                        prev_motion = cur_motion;
     ade:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <cur_motion>
     ae2:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <prev_motion>
                        if (cur_motion == MOVE_LEFT) {
     ae6:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <cur_motion>
     aea:	81 30       	cpi	r24, 0x01	; 1
     aec:	09 f4       	brne	.+2      	; 0xaf0 <kilo_start+0x1ec>
     aee:	50 c0       	rjmp	.+160    	; 0xb90 <kilo_start+0x28c>
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     af0:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <cur_motion>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     af4:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
    OCR2B = cw;
     af8:	90 92 b4 00 	sts	0x00B4, r9	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     afc:	82 30       	cpi	r24, 0x02	; 2
     afe:	d9 f1       	breq	.+118    	; 0xb76 <kilo_start+0x272>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     b00:	90 92 b3 00 	sts	0x00B3, r9	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
    OCR2B = cw;
     b04:	90 92 b4 00 	sts	0x00B4, r9	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>
     b08:	8f e2       	ldi	r24, 0x2F	; 47
     b0a:	95 e7       	ldi	r25, 0x75	; 117
     b0c:	01 97       	sbiw	r24, 0x01	; 1
     b0e:	f1 f7       	brne	.-4      	; 0xb0c <kilo_start+0x208>
     b10:	00 c0       	rjmp	.+0      	; 0xb12 <kilo_start+0x20e>
     b12:	00 00       	nop
                            set_motors(0, kilo_turn_right);
                        } else {
                            set_motors(0, 0xFF);
                            set_motors(0xFF, 0xFF);
                            _delay_ms(15);
                            set_motors(kilo_straight_left, kilo_straight_right);
     b14:	80 91 9f 07 	lds	r24, 0x079F	; 0x80079f <kilo_straight_right>
     b18:	90 91 9e 07 	lds	r25, 0x079E	; 0x80079e <kilo_straight_left>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     b1c:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
    OCR2B = cw;
     b20:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>
     b24:	fe ce       	rjmp	.-516    	; 0x922 <kilo_start+0x1e>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     b26:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     b28:	54 9a       	sbi	0x0a, 4	; 10
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     b2a:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     b2c:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     b2e:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     b30:	3c 98       	cbi	0x07, 4	; 7
     b32:	ff ef       	ldi	r31, 0xFF	; 255
     b34:	20 e7       	ldi	r18, 0x70	; 112
     b36:	82 e0       	ldi	r24, 0x02	; 2
     b38:	f1 50       	subi	r31, 0x01	; 1
     b3a:	20 40       	sbci	r18, 0x00	; 0
     b3c:	80 40       	sbci	r24, 0x00	; 0
     b3e:	e1 f7       	brne	.-8      	; 0xb38 <kilo_start+0x234>
     b40:	00 c0       	rjmp	.+0      	; 0xb42 <kilo_start+0x23e>
     b42:	00 00       	nop
     b44:	95 cf       	rjmp	.-214    	; 0xa70 <kilo_start+0x16c>
                } else
                    set_color(RGB(0,0,0));
                break;
            case SETUP:
                if (!has_setup) {
                    setup();
     b46:	f3 01       	movw	r30, r6
     b48:	09 95       	icall
     b4a:	f8 ce       	rjmp	.-528    	; 0x93c <kilo_start+0x38>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     b4c:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     b4e:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     b50:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     b52:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     b54:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     b56:	3c 98       	cbi	0x07, 4	; 7
     b58:	e4 ce       	rjmp	.-568    	; 0x922 <kilo_start+0x1e>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     b5a:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     b5c:	54 9a       	sbi	0x0a, 4	; 10
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     b5e:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     b60:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     b62:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     b64:	3c 98       	cbi	0x07, 4	; 7
     b66:	dd ce       	rjmp	.-582    	; 0x922 <kilo_start+0x1e>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     b68:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     b6a:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     b6c:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     b6e:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
     b70:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
        DDRC |= (1<<4);
     b72:	3c 9a       	sbi	0x07, 4	; 7
     b74:	d6 ce       	rjmp	.-596    	; 0x922 <kilo_start+0x1e>
     b76:	ef e2       	ldi	r30, 0x2F	; 47
     b78:	f5 e7       	ldi	r31, 0x75	; 117
     b7a:	31 97       	sbiw	r30, 0x01	; 1
     b7c:	f1 f7       	brne	.-4      	; 0xb7a <kilo_start+0x276>
     b7e:	00 c0       	rjmp	.+0      	; 0xb80 <kilo_start+0x27c>
     b80:	00 00       	nop
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
                            set_motors(0, 0xFF);
                            _delay_ms(15);
                            set_motors(0, kilo_turn_right);
     b82:	80 91 8c 07 	lds	r24, 0x078C	; 0x80078c <kilo_turn_right>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     b86:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
    OCR2B = cw;
     b8a:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>
     b8e:	c9 ce       	rjmp	.-622    	; 0x922 <kilo_start+0x1e>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     b90:	90 92 b3 00 	sts	0x00B3, r9	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
    OCR2B = cw;
     b94:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>
     b98:	8f e2       	ldi	r24, 0x2F	; 47
     b9a:	95 e7       	ldi	r25, 0x75	; 117
     b9c:	01 97       	sbiw	r24, 0x01	; 1
     b9e:	f1 f7       	brne	.-4      	; 0xb9c <kilo_start+0x298>
     ba0:	00 c0       	rjmp	.+0      	; 0xba2 <kilo_start+0x29e>
     ba2:	00 00       	nop
                    if (cur_motion != prev_motion) {
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
     ba4:	80 91 a0 07 	lds	r24, 0x07A0	; 0x8007a0 <kilo_turn_left>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     ba8:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
    OCR2B = cw;
     bac:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>
     bb0:	b8 ce       	rjmp	.-656    	; 0x922 <kilo_start+0x1e>

00000bb2 <delay>:
        default:
            break;
    }
}

void delay(uint16_t ms) {
     bb2:	07 c0       	rjmp	.+14     	; 0xbc2 <delay+0x10>
     bb4:	ef ec       	ldi	r30, 0xCF	; 207
     bb6:	f7 e0       	ldi	r31, 0x07	; 7
     bb8:	31 97       	sbiw	r30, 0x01	; 1
     bba:	f1 f7       	brne	.-4      	; 0xbb8 <delay+0x6>
     bbc:	00 c0       	rjmp	.+0      	; 0xbbe <delay+0xc>
     bbe:	00 00       	nop
    while (ms > 0) {
        _delay_ms(1);
        ms--;
     bc0:	01 97       	sbiw	r24, 0x01	; 1
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     bc2:	00 97       	sbiw	r24, 0x00	; 0
     bc4:	b9 f7       	brne	.-18     	; 0xbb4 <delay+0x2>
     bc6:	08 95       	ret

00000bc8 <set_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     bc8:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
    OCR2B = cw;
     bcc:	60 93 b4 00 	sts	0x00B4, r22	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>
     bd0:	08 95       	ret

00000bd2 <spinup_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     bd2:	8f ef       	ldi	r24, 0xFF	; 255
     bd4:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
    OCR2B = cw;
     bd8:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>
     bdc:	8f e0       	ldi	r24, 0x0F	; 15
     bde:	90 e0       	ldi	r25, 0x00	; 0
     be0:	ef ec       	ldi	r30, 0xCF	; 207
     be2:	f7 e0       	ldi	r31, 0x07	; 7
     be4:	31 97       	sbiw	r30, 0x01	; 1
     be6:	f1 f7       	brne	.-4      	; 0xbe4 <spinup_motors+0x12>
     be8:	00 c0       	rjmp	.+0      	; 0xbea <spinup_motors+0x18>
     bea:	00 00       	nop
     bec:	01 97       	sbiw	r24, 0x01	; 1
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     bee:	c1 f7       	brne	.-16     	; 0xbe0 <spinup_motors+0xe>
}

void spinup_motors() {
    set_motors(255, 255);
    delay(15);
}
     bf0:	08 95       	ret

00000bf2 <get_ambientlight>:

int16_t get_ambientlight() {
    int16_t light = -1;
    if (!rx_busy) {
     bf2:	80 91 6a 07 	lds	r24, 0x076A	; 0x80076a <rx_busy>
     bf6:	81 11       	cpse	r24, r1
     bf8:	1e c0       	rjmp	.+60     	; 0xc36 <get_ambientlight+0x44>
        cli();
     bfa:	f8 94       	cli
        adc_setup_conversion(7);
     bfc:	87 e0       	ldi	r24, 0x07	; 7
     bfe:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
     c02:	83 e8       	ldi	r24, 0x83	; 131
     c04:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
        adc_start_conversion();
     c08:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     c0c:	80 64       	ori	r24, 0x40	; 64
     c0e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
        adc_finish_conversion();
     c12:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     c16:	86 fd       	sbrc	r24, 6
     c18:	fc cf       	rjmp	.-8      	; 0xc12 <get_ambientlight+0x20>
        light = ADCW;                             // store AD result
     c1a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
     c1e:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     c22:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
     c26:	23 ea       	ldi	r18, 0xA3	; 163
     c28:	20 93 7a 00 	sts	0x007A, r18	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     c2c:	21 e0       	ldi	r18, 0x01	; 1
     c2e:	20 93 7b 00 	sts	0x007B, r18	; 0x80007b <__DATA_REGION_ORIGIN__+0x1b>
        sei();                                    // reenable interrupts
     c32:	78 94       	sei
     c34:	08 95       	ret
    set_motors(255, 255);
    delay(15);
}

int16_t get_ambientlight() {
    int16_t light = -1;
     c36:	8f ef       	ldi	r24, 0xFF	; 255
     c38:	9f ef       	ldi	r25, 0xFF	; 255
        light = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return light;
}
     c3a:	08 95       	ret

00000c3c <get_temperature>:

int16_t get_temperature() {
    int16_t temp = -1;
    if (!rx_busy) {
     c3c:	80 91 6a 07 	lds	r24, 0x076A	; 0x80076a <rx_busy>
     c40:	81 11       	cpse	r24, r1
     c42:	1e c0       	rjmp	.+60     	; 0xc80 <get_temperature+0x44>
        cli();
     c44:	f8 94       	cli
        ADMUX = (1<<3)|(1<<6)|(1<<7);
     c46:	88 ec       	ldi	r24, 0xC8	; 200
     c48:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
        ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     c4c:	87 e8       	ldi	r24, 0x87	; 135
     c4e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
        adc_start_conversion();
     c52:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     c56:	80 64       	ori	r24, 0x40	; 64
     c58:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
        adc_finish_conversion();
     c5c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     c60:	86 fd       	sbrc	r24, 6
     c62:	fc cf       	rjmp	.-8      	; 0xc5c <get_temperature+0x20>
        temp = ADCW;                             // store AD result
     c64:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
     c68:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     c6c:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
     c70:	23 ea       	ldi	r18, 0xA3	; 163
     c72:	20 93 7a 00 	sts	0x007A, r18	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     c76:	21 e0       	ldi	r18, 0x01	; 1
     c78:	20 93 7b 00 	sts	0x007B, r18	; 0x80007b <__DATA_REGION_ORIGIN__+0x1b>
        sei();                                    // reenable interrupts
     c7c:	78 94       	sei
     c7e:	08 95       	ret
    }
    return light;
}

int16_t get_temperature() {
    int16_t temp = -1;
     c80:	8f ef       	ldi	r24, 0xFF	; 255
     c82:	9f ef       	ldi	r25, 0xFF	; 255
        temp = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return temp;
}
     c84:	08 95       	ret

00000c86 <rand_hard>:

uint8_t rand_hard() {
     c86:	0f 93       	push	r16
     c88:	1f 93       	push	r17
     c8a:	cf 93       	push	r28
     c8c:	df 93       	push	r29
     c8e:	e0 e0       	ldi	r30, 0x00	; 0
     c90:	f0 e0       	ldi	r31, 0x00	; 0
    uint8_t num = 0;
     c92:	80 e0       	ldi	r24, 0x00	; 0
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
            adc_trigger_high_gain();
     c94:	03 ea       	ldi	r16, 0xA3	; 163
     c96:	11 e0       	ldi	r17, 0x01	; 1
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
            adc_setup_conversion(6);
     c98:	d6 e0       	ldi	r29, 0x06	; 6
     c9a:	c3 e8       	ldi	r28, 0x83	; 131
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
     c9c:	a1 e0       	ldi	r26, 0x01	; 1
     c9e:	b0 e0       	ldi	r27, 0x00	; 0
    }
    return temp;
}

uint8_t rand_hard() {
    uint8_t num = 0;
     ca0:	60 e8       	ldi	r22, 0x80	; 128
     ca2:	70 e0       	ldi	r23, 0x00	; 0
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
     ca4:	f8 94       	cli
            adc_setup_conversion(6);
     ca6:	d0 93 7c 00 	sts	0x007C, r29	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
     caa:	c0 93 7a 00 	sts	0x007A, r28	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
            adc_start_conversion();
     cae:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     cb2:	90 64       	ori	r25, 0x40	; 64
     cb4:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
            adc_finish_conversion();
     cb8:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     cbc:	96 fd       	sbrc	r25, 6
     cbe:	fc cf       	rjmp	.-8      	; 0xcb8 <rand_hard+0x32>
            a = ADCW&0x1;
     cc0:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
     cc4:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
     cc8:	21 70       	andi	r18, 0x01	; 1
            adc_start_conversion();
     cca:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     cce:	90 64       	ori	r25, 0x40	; 64
     cd0:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
            adc_finish_conversion();
     cd4:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     cd8:	96 fd       	sbrc	r25, 6
     cda:	fc cf       	rjmp	.-8      	; 0xcd4 <rand_hard+0x4e>
            b = ADCW&0x1;
     cdc:	40 91 78 00 	lds	r20, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
     ce0:	50 91 79 00 	lds	r21, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
            adc_trigger_high_gain();
     ce4:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
     ce8:	00 93 7a 00 	sts	0x007A, r16	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     cec:	10 93 7b 00 	sts	0x007B, r17	; 0x80007b <__DATA_REGION_ORIGIN__+0x1b>
            sei();
     cf0:	78 94       	sei
            tries++;
        } while (a == b && tries < 128);
     cf2:	41 70       	andi	r20, 0x01	; 1
     cf4:	24 13       	cpse	r18, r20
     cf6:	03 c0       	rjmp	.+6      	; 0xcfe <rand_hard+0x78>
     cf8:	61 50       	subi	r22, 0x01	; 1
     cfa:	71 09       	sbc	r23, r1
     cfc:	99 f6       	brne	.-90     	; 0xca4 <rand_hard+0x1e>
        if (a)
     cfe:	22 23       	and	r18, r18
     d00:	39 f0       	breq	.+14     	; 0xd10 <rand_hard+0x8a>
            num |= (1<<i);
     d02:	9d 01       	movw	r18, r26
     d04:	0e 2e       	mov	r0, r30
     d06:	01 c0       	rjmp	.+2      	; 0xd0a <rand_hard+0x84>
     d08:	22 0f       	add	r18, r18
     d0a:	0a 94       	dec	r0
     d0c:	ea f7       	brpl	.-6      	; 0xd08 <rand_hard+0x82>
     d0e:	82 2b       	or	r24, r18
     d10:	31 96       	adiw	r30, 0x01	; 1
}

uint8_t rand_hard() {
    uint8_t num = 0;
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
     d12:	e8 30       	cpi	r30, 0x08	; 8
     d14:	f1 05       	cpc	r31, r1
     d16:	09 f0       	breq	.+2      	; 0xd1a <rand_hard+0x94>
     d18:	c3 cf       	rjmp	.-122    	; 0xca0 <rand_hard+0x1a>
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
    }
    return num;
}
     d1a:	df 91       	pop	r29
     d1c:	cf 91       	pop	r28
     d1e:	1f 91       	pop	r17
     d20:	0f 91       	pop	r16
     d22:	08 95       	ret

00000d24 <rand_soft>:

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
     d24:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     d28:	98 2f       	mov	r25, r24
     d2a:	99 0f       	add	r25, r25
     d2c:	99 0f       	add	r25, r25
     d2e:	99 0f       	add	r25, r25
     d30:	89 27       	eor	r24, r25
    seed ^= seed>>5;
    seed ^= accumulator++>>2;
     d32:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <accumulator>
     d36:	21 e0       	ldi	r18, 0x01	; 1
     d38:	29 0f       	add	r18, r25
     d3a:	20 93 1f 01 	sts	0x011F, r18	; 0x80011f <accumulator>
     d3e:	28 2f       	mov	r18, r24
     d40:	22 95       	swap	r18
     d42:	26 95       	lsr	r18
     d44:	27 70       	andi	r18, 0x07	; 7
     d46:	82 27       	eor	r24, r18
     d48:	96 95       	lsr	r25
     d4a:	96 95       	lsr	r25
     d4c:	89 27       	eor	r24, r25
     d4e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    return seed;
}
     d52:	08 95       	ret

00000d54 <rand_seed>:

void rand_seed(uint8_t s) {
    seed = s;
     d54:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     d58:	08 95       	ret

00000d5a <get_voltage>:
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     d5a:	80 91 6a 07 	lds	r24, 0x076A	; 0x80076a <rx_busy>
     d5e:	81 11       	cpse	r24, r1
     d60:	16 c0       	rjmp	.+44     	; 0xd8e <get_voltage+0x34>
        cli();                                    // disable interrupts
     d62:	f8 94       	cli
        adc_setup_conversion(6);
     d64:	86 e0       	ldi	r24, 0x06	; 6
     d66:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
     d6a:	83 e8       	ldi	r24, 0x83	; 131
     d6c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
        adc_start_conversion();
     d70:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     d74:	80 64       	ori	r24, 0x40	; 64
     d76:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
        adc_finish_conversion();
     d7a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     d7e:	86 fd       	sbrc	r24, 6
     d80:	fc cf       	rjmp	.-8      	; 0xd7a <get_voltage+0x20>
        voltage = ADCW;                           // store AD result
     d82:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
     d86:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     d8a:	78 94       	sei
     d8c:	08 95       	ret
void rand_seed(uint8_t s) {
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
     d8e:	8f ef       	ldi	r24, 0xFF	; 255
     d90:	9f ef       	ldi	r25, 0xFF	; 255
        voltage = ADCW;                           // store AD result
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return voltage;
}
     d92:	08 95       	ret

00000d94 <estimate_distance>:

uint8_t estimate_distance(const distance_measurement_t *dist) {
     d94:	2f 92       	push	r2
     d96:	3f 92       	push	r3
     d98:	4f 92       	push	r4
     d9a:	5f 92       	push	r5
     d9c:	6f 92       	push	r6
     d9e:	7f 92       	push	r7
     da0:	8f 92       	push	r8
     da2:	9f 92       	push	r9
     da4:	af 92       	push	r10
     da6:	bf 92       	push	r11
     da8:	cf 92       	push	r12
     daa:	df 92       	push	r13
     dac:	ef 92       	push	r14
     dae:	ff 92       	push	r15
     db0:	0f 93       	push	r16
     db2:	1f 93       	push	r17
     db4:	cf 93       	push	r28
     db6:	df 93       	push	r29
     db8:	00 d0       	rcall	.+0      	; 0xdba <estimate_distance+0x26>
     dba:	00 d0       	rcall	.+0      	; 0xdbc <estimate_distance+0x28>
     dbc:	00 d0       	rcall	.+0      	; 0xdbe <estimate_distance+0x2a>
     dbe:	cd b7       	in	r28, 0x3d	; 61
     dc0:	de b7       	in	r29, 0x3e	; 62
     dc2:	1c 01       	movw	r2, r24
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
     dc4:	dc 01       	movw	r26, r24
     dc6:	12 96       	adiw	r26, 0x02	; 2
     dc8:	0d 90       	ld	r0, X+
     dca:	bc 91       	ld	r27, X
     dcc:	a0 2d       	mov	r26, r0
     dce:	be 83       	std	Y+6, r27	; 0x06
     dd0:	ad 83       	std	Y+5, r26	; 0x05
     dd2:	a4 38       	cpi	r26, 0x84	; 132
     dd4:	e3 e0       	ldi	r30, 0x03	; 3
     dd6:	be 07       	cpc	r27, r30
     dd8:	0c f0       	brlt	.+2      	; 0xddc <estimate_distance+0x48>
     dda:	cb c0       	rjmp	.+406    	; 0xf72 <estimate_distance+0x1de>
        if (dist->high_gain > kilo_irhigh[0]) {
     ddc:	80 91 44 07 	lds	r24, 0x0744	; 0x800744 <kilo_irhigh>
     de0:	90 91 45 07 	lds	r25, 0x0745	; 0x800745 <kilo_irhigh+0x1>
     de4:	8a 17       	cp	r24, r26
     de6:	9b 07       	cpc	r25, r27
     de8:	08 f4       	brcc	.+2      	; 0xdec <estimate_distance+0x58>
     dea:	8c c1       	rjmp	.+792    	; 0x1104 <estimate_distance+0x370>
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     dec:	00 91 46 07 	lds	r16, 0x0746	; 0x800746 <kilo_irhigh+0x2>
     df0:	10 91 47 07 	lds	r17, 0x0747	; 0x800747 <kilo_irhigh+0x3>
     df4:	0a 17       	cp	r16, r26
     df6:	1b 07       	cpc	r17, r27
     df8:	08 f4       	brcc	.+2      	; 0xdfc <estimate_distance+0x68>
     dfa:	22 c2       	rjmp	.+1092   	; 0x1240 <estimate_distance+0x4ac>
     dfc:	00 91 48 07 	lds	r16, 0x0748	; 0x800748 <kilo_irhigh+0x4>
     e00:	10 91 49 07 	lds	r17, 0x0749	; 0x800749 <kilo_irhigh+0x5>
     e04:	0a 17       	cp	r16, r26
     e06:	1b 07       	cpc	r17, r27
     e08:	08 f4       	brcc	.+2      	; 0xe0c <estimate_distance+0x78>
     e0a:	28 c2       	rjmp	.+1104   	; 0x125c <estimate_distance+0x4c8>
     e0c:	00 91 4a 07 	lds	r16, 0x074A	; 0x80074a <kilo_irhigh+0x6>
     e10:	10 91 4b 07 	lds	r17, 0x074B	; 0x80074b <kilo_irhigh+0x7>
     e14:	0a 17       	cp	r16, r26
     e16:	1b 07       	cpc	r17, r27
     e18:	08 f4       	brcc	.+2      	; 0xe1c <estimate_distance+0x88>
     e1a:	24 c2       	rjmp	.+1096   	; 0x1264 <estimate_distance+0x4d0>
     e1c:	00 91 4c 07 	lds	r16, 0x074C	; 0x80074c <kilo_irhigh+0x8>
     e20:	10 91 4d 07 	lds	r17, 0x074D	; 0x80074d <kilo_irhigh+0x9>
     e24:	0a 17       	cp	r16, r26
     e26:	1b 07       	cpc	r17, r27
     e28:	08 f4       	brcc	.+2      	; 0xe2c <estimate_distance+0x98>
     e2a:	25 c2       	rjmp	.+1098   	; 0x1276 <estimate_distance+0x4e2>
     e2c:	00 91 4e 07 	lds	r16, 0x074E	; 0x80074e <kilo_irhigh+0xa>
     e30:	10 91 4f 07 	lds	r17, 0x074F	; 0x80074f <kilo_irhigh+0xb>
     e34:	0a 17       	cp	r16, r26
     e36:	1b 07       	cpc	r17, r27
     e38:	08 f4       	brcc	.+2      	; 0xe3c <estimate_distance+0xa8>
     e3a:	e6 c1       	rjmp	.+972    	; 0x1208 <estimate_distance+0x474>
     e3c:	00 91 50 07 	lds	r16, 0x0750	; 0x800750 <kilo_irhigh+0xc>
     e40:	10 91 51 07 	lds	r17, 0x0751	; 0x800751 <kilo_irhigh+0xd>
     e44:	0a 17       	cp	r16, r26
     e46:	1b 07       	cpc	r17, r27
     e48:	08 f4       	brcc	.+2      	; 0xe4c <estimate_distance+0xb8>
     e4a:	1e c2       	rjmp	.+1084   	; 0x1288 <estimate_distance+0x4f4>
     e4c:	00 91 52 07 	lds	r16, 0x0752	; 0x800752 <kilo_irhigh+0xe>
     e50:	10 91 53 07 	lds	r17, 0x0753	; 0x800753 <kilo_irhigh+0xf>
     e54:	0a 17       	cp	r16, r26
     e56:	1b 07       	cpc	r17, r27
     e58:	08 f4       	brcc	.+2      	; 0xe5c <estimate_distance+0xc8>
     e5a:	1f c2       	rjmp	.+1086   	; 0x129a <estimate_distance+0x506>
     e5c:	00 91 54 07 	lds	r16, 0x0754	; 0x800754 <kilo_irhigh+0x10>
     e60:	10 91 55 07 	lds	r17, 0x0755	; 0x800755 <kilo_irhigh+0x11>
     e64:	0a 17       	cp	r16, r26
     e66:	1b 07       	cpc	r17, r27
     e68:	08 f4       	brcc	.+2      	; 0xe6c <estimate_distance+0xd8>
     e6a:	25 c2       	rjmp	.+1098   	; 0x12b6 <estimate_distance+0x522>
     e6c:	00 91 56 07 	lds	r16, 0x0756	; 0x800756 <kilo_irhigh+0x12>
     e70:	10 91 57 07 	lds	r17, 0x0757	; 0x800757 <kilo_irhigh+0x13>
     e74:	0a 17       	cp	r16, r26
     e76:	1b 07       	cpc	r17, r27
     e78:	08 f4       	brcc	.+2      	; 0xe7c <estimate_distance+0xe8>
     e7a:	26 c2       	rjmp	.+1100   	; 0x12c8 <estimate_distance+0x534>
     e7c:	00 91 58 07 	lds	r16, 0x0758	; 0x800758 <kilo_irhigh+0x14>
     e80:	10 91 59 07 	lds	r17, 0x0759	; 0x800759 <kilo_irhigh+0x15>
     e84:	0a 17       	cp	r16, r26
     e86:	1b 07       	cpc	r17, r27
     e88:	08 f4       	brcc	.+2      	; 0xe8c <estimate_distance+0xf8>
     e8a:	22 c2       	rjmp	.+1092   	; 0x12d0 <estimate_distance+0x53c>
     e8c:	00 91 5a 07 	lds	r16, 0x075A	; 0x80075a <kilo_irhigh+0x16>
     e90:	10 91 5b 07 	lds	r17, 0x075B	; 0x80075b <kilo_irhigh+0x17>
     e94:	0a 17       	cp	r16, r26
     e96:	1b 07       	cpc	r17, r27
     e98:	08 f4       	brcc	.+2      	; 0xe9c <estimate_distance+0x108>
     e9a:	23 c2       	rjmp	.+1094   	; 0x12e2 <estimate_distance+0x54e>
     e9c:	00 91 5c 07 	lds	r16, 0x075C	; 0x80075c <kilo_irhigh+0x18>
     ea0:	10 91 5d 07 	lds	r17, 0x075D	; 0x80075d <kilo_irhigh+0x19>
     ea4:	0a 17       	cp	r16, r26
     ea6:	1b 07       	cpc	r17, r27
     ea8:	08 f4       	brcc	.+2      	; 0xeac <estimate_distance+0x118>
     eaa:	24 c2       	rjmp	.+1096   	; 0x12f4 <estimate_distance+0x560>
     eac:	00 91 5e 07 	lds	r16, 0x075E	; 0x80075e <kilo_irhigh+0x1a>
     eb0:	10 91 5f 07 	lds	r17, 0x075F	; 0x80075f <kilo_irhigh+0x1b>
     eb4:	0a 17       	cp	r16, r26
     eb6:	1b 07       	cpc	r17, r27
     eb8:	08 f4       	brcc	.+2      	; 0xebc <estimate_distance+0x128>
     eba:	25 c2       	rjmp	.+1098   	; 0x1306 <estimate_distance+0x572>
     ebc:	80 e0       	ldi	r24, 0x00	; 0
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	a0 ed       	ldi	r26, 0xD0	; 208
     ec2:	b0 e4       	ldi	r27, 0x40	; 64
     ec4:	89 83       	std	Y+1, r24	; 0x01
     ec6:	9a 83       	std	Y+2, r25	; 0x02
     ec8:	ab 83       	std	Y+3, r26	; 0x03
     eca:	bc 83       	std	Y+4, r27	; 0x04
     ecc:	2c e0       	ldi	r18, 0x0C	; 12
     ece:	e2 2e       	mov	r14, r18
     ed0:	f1 2c       	mov	r15, r1
                    index_high = i;
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
     ed2:	f7 01       	movw	r30, r14
     ed4:	ee 0f       	add	r30, r30
     ed6:	ff 1f       	adc	r31, r31
     ed8:	ec 5b       	subi	r30, 0xBC	; 188
     eda:	f8 4f       	sbci	r31, 0xF8	; 248
     edc:	80 81       	ld	r24, Z
     ede:	91 81       	ldd	r25, Z+1	; 0x01
     ee0:	b8 01       	movw	r22, r16
     ee2:	68 1b       	sub	r22, r24
     ee4:	79 0b       	sbc	r23, r25
     ee6:	80 e0       	ldi	r24, 0x00	; 0
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <__floatunsisf>
     eee:	9b 01       	movw	r18, r22
     ef0:	ac 01       	movw	r20, r24
     ef2:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <__addsf3>
     ef6:	6b 01       	movw	r12, r22
     ef8:	7c 01       	movw	r14, r24
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
     efa:	ad 81       	ldd	r26, Y+5	; 0x05
     efc:	be 81       	ldd	r27, Y+6	; 0x06
     efe:	bd 01       	movw	r22, r26
     f00:	bb 0f       	add	r27, r27
     f02:	88 0b       	sbc	r24, r24
     f04:	99 0b       	sbc	r25, r25
     f06:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <__floatsisf>
     f0a:	4b 01       	movw	r8, r22
     f0c:	5c 01       	movw	r10, r24
     f0e:	b8 01       	movw	r22, r16
     f10:	80 e0       	ldi	r24, 0x00	; 0
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <__floatunsisf>
     f18:	2b 01       	movw	r4, r22
     f1a:	3c 01       	movw	r6, r24
     f1c:	29 81       	ldd	r18, Y+1	; 0x01
     f1e:	3a 81       	ldd	r19, Y+2	; 0x02
     f20:	4b 81       	ldd	r20, Y+3	; 0x03
     f22:	5c 81       	ldd	r21, Y+4	; 0x04
     f24:	c7 01       	movw	r24, r14
     f26:	b6 01       	movw	r22, r12
     f28:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <__mulsf3>
     f2c:	9b 01       	movw	r18, r22
     f2e:	ac 01       	movw	r20, r24
     f30:	c3 01       	movw	r24, r6
     f32:	b2 01       	movw	r22, r4
     f34:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <__subsf3>
     f38:	9b 01       	movw	r18, r22
     f3a:	ac 01       	movw	r20, r24
     f3c:	c5 01       	movw	r24, r10
     f3e:	b4 01       	movw	r22, r8
     f40:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <__subsf3>
            b=((int)((int)b/(int)slope));
            dist_high=b;
     f44:	20 e0       	ldi	r18, 0x00	; 0
     f46:	30 e0       	ldi	r19, 0x00	; 0
     f48:	40 e2       	ldi	r20, 0x20	; 32
     f4a:	51 e4       	ldi	r21, 0x41	; 65
     f4c:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <__mulsf3>
     f50:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <__fixsfsi>
     f54:	8b 01       	movw	r16, r22
     f56:	c7 01       	movw	r24, r14
     f58:	b6 01       	movw	r22, r12
     f5a:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <__fixsfsi>
     f5e:	ab 01       	movw	r20, r22
     f60:	bc 01       	movw	r22, r24
     f62:	c8 01       	movw	r24, r16
     f64:	ba 01       	movw	r22, r20
     f66:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <__divmodhi4>
     f6a:	69 83       	std	Y+1, r22	; 0x01
     f6c:	ed 81       	ldd	r30, Y+5	; 0x05
     f6e:	fe 81       	ldd	r31, Y+6	; 0x06
     f70:	cb c0       	rjmp	.+406    	; 0x1108 <estimate_distance+0x374>
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
     f72:	dc 01       	movw	r26, r24
     f74:	cd 90       	ld	r12, X+
     f76:	dc 90       	ld	r13, X
     f78:	80 91 6b 07 	lds	r24, 0x076B	; 0x80076b <kilo_irlow>
     f7c:	90 91 6c 07 	lds	r25, 0x076C	; 0x80076c <kilo_irlow+0x1>
     f80:	8c 15       	cp	r24, r12
     f82:	9d 05       	cpc	r25, r13
     f84:	08 f4       	brcc	.+2      	; 0xf88 <estimate_distance+0x1f4>
     f86:	df c0       	rjmp	.+446    	; 0x1146 <estimate_distance+0x3b2>

uint8_t estimate_distance(const distance_measurement_t *dist) {
    uint8_t i;
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
     f88:	bf ef       	ldi	r27, 0xFF	; 255
     f8a:	b9 83       	std	Y+1, r27	; 0x01
    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     f8c:	00 91 6d 07 	lds	r16, 0x076D	; 0x80076d <kilo_irlow+0x2>
     f90:	10 91 6e 07 	lds	r17, 0x076E	; 0x80076e <kilo_irlow+0x3>
     f94:	0c 15       	cp	r16, r12
     f96:	1d 05       	cpc	r17, r13
     f98:	08 f4       	brcc	.+2      	; 0xf9c <estimate_distance+0x208>
     f9a:	56 c1       	rjmp	.+684    	; 0x1248 <estimate_distance+0x4b4>
     f9c:	00 91 6f 07 	lds	r16, 0x076F	; 0x80076f <kilo_irlow+0x4>
     fa0:	10 91 70 07 	lds	r17, 0x0770	; 0x800770 <kilo_irlow+0x5>
     fa4:	0c 15       	cp	r16, r12
     fa6:	1d 05       	cpc	r17, r13
     fa8:	08 f4       	brcc	.+2      	; 0xfac <estimate_distance+0x218>
     faa:	53 c1       	rjmp	.+678    	; 0x1252 <estimate_distance+0x4be>
     fac:	00 91 71 07 	lds	r16, 0x0771	; 0x800771 <kilo_irlow+0x6>
     fb0:	10 91 72 07 	lds	r17, 0x0772	; 0x800772 <kilo_irlow+0x7>
     fb4:	0c 15       	cp	r16, r12
     fb6:	1d 05       	cpc	r17, r13
     fb8:	08 f4       	brcc	.+2      	; 0xfbc <estimate_distance+0x228>
     fba:	58 c1       	rjmp	.+688    	; 0x126c <estimate_distance+0x4d8>
     fbc:	00 91 73 07 	lds	r16, 0x0773	; 0x800773 <kilo_irlow+0x8>
     fc0:	10 91 74 07 	lds	r17, 0x0774	; 0x800774 <kilo_irlow+0x9>
     fc4:	0c 15       	cp	r16, r12
     fc6:	1d 05       	cpc	r17, r13
     fc8:	08 f4       	brcc	.+2      	; 0xfcc <estimate_distance+0x238>
     fca:	59 c1       	rjmp	.+690    	; 0x127e <estimate_distance+0x4ea>
     fcc:	00 91 75 07 	lds	r16, 0x0775	; 0x800775 <kilo_irlow+0xa>
     fd0:	10 91 76 07 	lds	r17, 0x0776	; 0x800776 <kilo_irlow+0xb>
     fd4:	0c 15       	cp	r16, r12
     fd6:	1d 05       	cpc	r17, r13
     fd8:	08 f4       	brcc	.+2      	; 0xfdc <estimate_distance+0x248>
     fda:	b7 c0       	rjmp	.+366    	; 0x114a <estimate_distance+0x3b6>
     fdc:	00 91 77 07 	lds	r16, 0x0777	; 0x800777 <kilo_irlow+0xc>
     fe0:	10 91 78 07 	lds	r17, 0x0778	; 0x800778 <kilo_irlow+0xd>
     fe4:	0c 15       	cp	r16, r12
     fe6:	1d 05       	cpc	r17, r13
     fe8:	08 f4       	brcc	.+2      	; 0xfec <estimate_distance+0x258>
     fea:	52 c1       	rjmp	.+676    	; 0x1290 <estimate_distance+0x4fc>
     fec:	00 91 79 07 	lds	r16, 0x0779	; 0x800779 <kilo_irlow+0xe>
     ff0:	10 91 7a 07 	lds	r17, 0x077A	; 0x80077a <kilo_irlow+0xf>
     ff4:	0c 15       	cp	r16, r12
     ff6:	1d 05       	cpc	r17, r13
     ff8:	08 f4       	brcc	.+2      	; 0xffc <estimate_distance+0x268>
     ffa:	53 c1       	rjmp	.+678    	; 0x12a2 <estimate_distance+0x50e>
     ffc:	00 91 7b 07 	lds	r16, 0x077B	; 0x80077b <kilo_irlow+0x10>
    1000:	10 91 7c 07 	lds	r17, 0x077C	; 0x80077c <kilo_irlow+0x11>
    1004:	0c 15       	cp	r16, r12
    1006:	1d 05       	cpc	r17, r13
    1008:	08 f4       	brcc	.+2      	; 0x100c <estimate_distance+0x278>
    100a:	50 c1       	rjmp	.+672    	; 0x12ac <estimate_distance+0x518>
    100c:	00 91 7d 07 	lds	r16, 0x077D	; 0x80077d <kilo_irlow+0x12>
    1010:	10 91 7e 07 	lds	r17, 0x077E	; 0x80077e <kilo_irlow+0x13>
    1014:	0c 15       	cp	r16, r12
    1016:	1d 05       	cpc	r17, r13
    1018:	08 f4       	brcc	.+2      	; 0x101c <estimate_distance+0x288>
    101a:	51 c1       	rjmp	.+674    	; 0x12be <estimate_distance+0x52a>
    101c:	00 91 7f 07 	lds	r16, 0x077F	; 0x80077f <kilo_irlow+0x14>
    1020:	10 91 80 07 	lds	r17, 0x0780	; 0x800780 <kilo_irlow+0x15>
    1024:	0c 15       	cp	r16, r12
    1026:	1d 05       	cpc	r17, r13
    1028:	08 f4       	brcc	.+2      	; 0x102c <estimate_distance+0x298>
    102a:	56 c1       	rjmp	.+684    	; 0x12d8 <estimate_distance+0x544>
    102c:	00 91 81 07 	lds	r16, 0x0781	; 0x800781 <kilo_irlow+0x16>
    1030:	10 91 82 07 	lds	r17, 0x0782	; 0x800782 <kilo_irlow+0x17>
    1034:	0c 15       	cp	r16, r12
    1036:	1d 05       	cpc	r17, r13
    1038:	08 f4       	brcc	.+2      	; 0x103c <estimate_distance+0x2a8>
    103a:	57 c1       	rjmp	.+686    	; 0x12ea <estimate_distance+0x556>
    103c:	00 91 83 07 	lds	r16, 0x0783	; 0x800783 <kilo_irlow+0x18>
    1040:	10 91 84 07 	lds	r17, 0x0784	; 0x800784 <kilo_irlow+0x19>
    1044:	0c 15       	cp	r16, r12
    1046:	1d 05       	cpc	r17, r13
    1048:	08 f4       	brcc	.+2      	; 0x104c <estimate_distance+0x2b8>
    104a:	58 c1       	rjmp	.+688    	; 0x12fc <estimate_distance+0x568>
    104c:	00 91 85 07 	lds	r16, 0x0785	; 0x800785 <kilo_irlow+0x1a>
    1050:	10 91 86 07 	lds	r17, 0x0786	; 0x800786 <kilo_irlow+0x1b>
    1054:	0c 15       	cp	r16, r12
    1056:	1d 05       	cpc	r17, r13
    1058:	08 f4       	brcc	.+2      	; 0x105c <estimate_distance+0x2c8>
    105a:	59 c1       	rjmp	.+690    	; 0x130e <estimate_distance+0x57a>
                    break;
                }
            }

            if(index_low == 255) {
                dist_low=90;
    105c:	1a e5       	ldi	r17, 0x5A	; 90
            }
        }
    }

    if (dist_low != 255) {
        if (dist_high != 255) {
    105e:	b9 81       	ldd	r27, Y+1	; 0x01
    1060:	bf 3f       	cpi	r27, 0xFF	; 255
    1062:	09 f4       	brne	.+2      	; 0x1066 <estimate_distance+0x2d2>
    1064:	59 c1       	rjmp	.+690    	; 0x1318 <estimate_distance+0x584>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
    1066:	ed 81       	ldd	r30, Y+5	; 0x05
    1068:	fe 81       	ldd	r31, Y+6	; 0x06
    106a:	bf 01       	movw	r22, r30
    106c:	ff 0f       	add	r31, r31
    106e:	88 0b       	sbc	r24, r24
    1070:	99 0b       	sbc	r25, r25
    1072:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <__floatsisf>
    1076:	4b 01       	movw	r8, r22
    1078:	5c 01       	movw	r10, r24
    107a:	f9 81       	ldd	r31, Y+1	; 0x01
    107c:	6f 2f       	mov	r22, r31
    107e:	70 e0       	ldi	r23, 0x00	; 0
    1080:	80 e0       	ldi	r24, 0x00	; 0
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <__floatunsisf>
    1088:	6b 01       	movw	r12, r22
    108a:	7c 01       	movw	r14, r24
    108c:	a5 01       	movw	r20, r10
    108e:	94 01       	movw	r18, r8
    1090:	60 e0       	ldi	r22, 0x00	; 0
    1092:	70 e0       	ldi	r23, 0x00	; 0
    1094:	81 e6       	ldi	r24, 0x61	; 97
    1096:	94 e4       	ldi	r25, 0x44	; 68
    1098:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <__subsf3>
    109c:	9b 01       	movw	r18, r22
    109e:	ac 01       	movw	r20, r24
    10a0:	c7 01       	movw	r24, r14
    10a2:	b6 01       	movw	r22, r12
    10a4:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <__mulsf3>
    10a8:	6b 01       	movw	r12, r22
    10aa:	7c 01       	movw	r14, r24
    10ac:	61 2f       	mov	r22, r17
    10ae:	70 e0       	ldi	r23, 0x00	; 0
    10b0:	80 e0       	ldi	r24, 0x00	; 0
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <__floatunsisf>
    10b8:	2b 01       	movw	r4, r22
    10ba:	3c 01       	movw	r6, r24
    10bc:	20 e0       	ldi	r18, 0x00	; 0
    10be:	30 e0       	ldi	r19, 0x00	; 0
    10c0:	4f e2       	ldi	r20, 0x2F	; 47
    10c2:	54 e4       	ldi	r21, 0x44	; 68
    10c4:	c5 01       	movw	r24, r10
    10c6:	b4 01       	movw	r22, r8
    10c8:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <__subsf3>
    10cc:	9b 01       	movw	r18, r22
    10ce:	ac 01       	movw	r20, r24
    10d0:	c3 01       	movw	r24, r6
    10d2:	b2 01       	movw	r22, r4
    10d4:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <__mulsf3>
    10d8:	9b 01       	movw	r18, r22
    10da:	ac 01       	movw	r20, r24
    10dc:	c7 01       	movw	r24, r14
    10de:	b6 01       	movw	r22, r12
    10e0:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <__addsf3>
    10e4:	20 e0       	ldi	r18, 0x00	; 0
    10e6:	30 e0       	ldi	r19, 0x00	; 0
    10e8:	48 e4       	ldi	r20, 0x48	; 72
    10ea:	53 e4       	ldi	r21, 0x43	; 67
    10ec:	0e 94 75 0e 	call	0x1cea	; 0x1cea <__divsf3>
    10f0:	20 e0       	ldi	r18, 0x00	; 0
    10f2:	30 e0       	ldi	r19, 0x00	; 0
    10f4:	44 e0       	ldi	r20, 0x04	; 4
    10f6:	52 e4       	ldi	r21, 0x42	; 66
    10f8:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <__addsf3>
    10fc:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <__fixunssfsi>
    1100:	86 2f       	mov	r24, r22
    1102:	08 c0       	rjmp	.+16     	; 0x1114 <estimate_distance+0x380>
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
    1104:	19 82       	std	Y+1, r1	; 0x01
    1106:	fd 01       	movw	r30, r26
            b=((int)((int)b/(int)slope));
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
    1108:	ed 3b       	cpi	r30, 0xBD	; 189
    110a:	f2 40       	sbci	r31, 0x02	; 2
    110c:	0c f0       	brlt	.+2      	; 0x1110 <estimate_distance+0x37c>
    110e:	07 c1       	rjmp	.+526    	; 0x131e <estimate_distance+0x58a>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
        }
    } else {
        return 33 + dist_high;
    1110:	89 81       	ldd	r24, Y+1	; 0x01
    1112:	8f 5d       	subi	r24, 0xDF	; 223
    }
}
    1114:	26 96       	adiw	r28, 0x06	; 6
    1116:	0f b6       	in	r0, 0x3f	; 63
    1118:	f8 94       	cli
    111a:	de bf       	out	0x3e, r29	; 62
    111c:	0f be       	out	0x3f, r0	; 63
    111e:	cd bf       	out	0x3d, r28	; 61
    1120:	df 91       	pop	r29
    1122:	cf 91       	pop	r28
    1124:	1f 91       	pop	r17
    1126:	0f 91       	pop	r16
    1128:	ff 90       	pop	r15
    112a:	ef 90       	pop	r14
    112c:	df 90       	pop	r13
    112e:	cf 90       	pop	r12
    1130:	bf 90       	pop	r11
    1132:	af 90       	pop	r10
    1134:	9f 90       	pop	r9
    1136:	8f 90       	pop	r8
    1138:	7f 90       	pop	r7
    113a:	6f 90       	pop	r6
    113c:	5f 90       	pop	r5
    113e:	4f 90       	pop	r4
    1140:	3f 90       	pop	r3
    1142:	2f 90       	pop	r2
    1144:	08 95       	ret
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
    1146:	81 e2       	ldi	r24, 0x21	; 33

    if (dist_low != 255) {
        if (dist_high != 255) {
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
    1148:	e5 cf       	rjmp	.-54     	; 0x1114 <estimate_distance+0x380>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    114a:	f5 e0       	ldi	r31, 0x05	; 5
    114c:	3f 2e       	mov	r3, r31
                if(dist->low_gain > kilo_irlow[i]) {
    114e:	e5 e0       	ldi	r30, 0x05	; 5
    1150:	f0 e0       	ldi	r31, 0x00	; 0
            }

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
    1152:	ee 0f       	add	r30, r30
    1154:	ff 1f       	adc	r31, r31
    1156:	e7 59       	subi	r30, 0x97	; 151
    1158:	f8 4f       	sbci	r31, 0xF8	; 248
    115a:	80 81       	ld	r24, Z
    115c:	91 81       	ldd	r25, Z+1	; 0x01
    115e:	b8 01       	movw	r22, r16
    1160:	68 1b       	sub	r22, r24
    1162:	79 0b       	sbc	r23, r25
    1164:	80 e0       	ldi	r24, 0x00	; 0
    1166:	90 e0       	ldi	r25, 0x00	; 0
    1168:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <__floatunsisf>
    116c:	9b 01       	movw	r18, r22
    116e:	ac 01       	movw	r20, r24
    1170:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <__addsf3>
    1174:	4b 01       	movw	r8, r22
    1176:	5c 01       	movw	r10, r24
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
    1178:	b6 01       	movw	r22, r12
    117a:	dd 0c       	add	r13, r13
    117c:	88 0b       	sbc	r24, r24
    117e:	99 0b       	sbc	r25, r25
    1180:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <__floatsisf>
    1184:	2b 01       	movw	r4, r22
    1186:	3c 01       	movw	r6, r24
    1188:	b8 01       	movw	r22, r16
    118a:	80 e0       	ldi	r24, 0x00	; 0
    118c:	90 e0       	ldi	r25, 0x00	; 0
    118e:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <__floatunsisf>
    1192:	6b 01       	movw	r12, r22
    1194:	7c 01       	movw	r14, r24
    1196:	63 2d       	mov	r22, r3
    1198:	70 e0       	ldi	r23, 0x00	; 0
    119a:	80 e0       	ldi	r24, 0x00	; 0
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <__floatunsisf>
    11a2:	20 e0       	ldi	r18, 0x00	; 0
    11a4:	30 e0       	ldi	r19, 0x00	; 0
    11a6:	40 e0       	ldi	r20, 0x00	; 0
    11a8:	5f e3       	ldi	r21, 0x3F	; 63
    11aa:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <__mulsf3>
    11ae:	20 e0       	ldi	r18, 0x00	; 0
    11b0:	30 e0       	ldi	r19, 0x00	; 0
    11b2:	a9 01       	movw	r20, r18
    11b4:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <__addsf3>
    11b8:	a5 01       	movw	r20, r10
    11ba:	94 01       	movw	r18, r8
    11bc:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <__mulsf3>
    11c0:	9b 01       	movw	r18, r22
    11c2:	ac 01       	movw	r20, r24
    11c4:	c7 01       	movw	r24, r14
    11c6:	b6 01       	movw	r22, r12
    11c8:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <__subsf3>
    11cc:	9b 01       	movw	r18, r22
    11ce:	ac 01       	movw	r20, r24
    11d0:	c3 01       	movw	r24, r6
    11d2:	b2 01       	movw	r22, r4
    11d4:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <__subsf3>
                b=((int)((int)b/(int)slope));
                dist_low=b;
    11d8:	20 e0       	ldi	r18, 0x00	; 0
    11da:	30 e0       	ldi	r19, 0x00	; 0
    11dc:	40 e2       	ldi	r20, 0x20	; 32
    11de:	51 e4       	ldi	r21, 0x41	; 65
    11e0:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <__mulsf3>
    11e4:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <__fixsfsi>
    11e8:	8b 01       	movw	r16, r22
    11ea:	c5 01       	movw	r24, r10
    11ec:	b4 01       	movw	r22, r8
    11ee:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <__fixsfsi>
    11f2:	ab 01       	movw	r20, r22
    11f4:	bc 01       	movw	r22, r24
    11f6:	c8 01       	movw	r24, r16
    11f8:	ba 01       	movw	r22, r20
    11fa:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <__divmodhi4>
    11fe:	16 2f       	mov	r17, r22
            }
        }
    }

    if (dist_low != 255) {
    1200:	6f 3f       	cpi	r22, 0xFF	; 255
    1202:	09 f0       	breq	.+2      	; 0x1206 <estimate_distance+0x472>
    1204:	2c cf       	rjmp	.-424    	; 0x105e <estimate_distance+0x2ca>
    1206:	84 cf       	rjmp	.-248    	; 0x1110 <estimate_distance+0x37c>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    1208:	65 e0       	ldi	r22, 0x05	; 5
                if (dist->high_gain > kilo_irhigh[i]) {
    120a:	85 e0       	ldi	r24, 0x05	; 5
    120c:	90 e0       	ldi	r25, 0x00	; 0
    120e:	7c 01       	movw	r14, r24
    1210:	f1 e0       	ldi	r31, 0x01	; 1
    1212:	ef 1a       	sub	r14, r31
    1214:	f1 08       	sbc	r15, r1
    1216:	70 e0       	ldi	r23, 0x00	; 0
    1218:	80 e0       	ldi	r24, 0x00	; 0
    121a:	90 e0       	ldi	r25, 0x00	; 0
    121c:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <__floatunsisf>
    1220:	20 e0       	ldi	r18, 0x00	; 0
    1222:	30 e0       	ldi	r19, 0x00	; 0
    1224:	40 e0       	ldi	r20, 0x00	; 0
    1226:	5f e3       	ldi	r21, 0x3F	; 63
    1228:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <__mulsf3>
    122c:	20 e0       	ldi	r18, 0x00	; 0
    122e:	30 e0       	ldi	r19, 0x00	; 0
    1230:	a9 01       	movw	r20, r18
    1232:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <__addsf3>
    1236:	69 83       	std	Y+1, r22	; 0x01
    1238:	7a 83       	std	Y+2, r23	; 0x02
    123a:	8b 83       	std	Y+3, r24	; 0x03
    123c:	9c 83       	std	Y+4, r25	; 0x04
    123e:	49 ce       	rjmp	.-878    	; 0xed2 <estimate_distance+0x13e>
    1240:	61 e0       	ldi	r22, 0x01	; 1
    1242:	81 e0       	ldi	r24, 0x01	; 1
    1244:	90 e0       	ldi	r25, 0x00	; 0
    1246:	e3 cf       	rjmp	.-58     	; 0x120e <estimate_distance+0x47a>
    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
    1248:	33 24       	eor	r3, r3
    124a:	33 94       	inc	r3
    124c:	e1 e0       	ldi	r30, 0x01	; 1
    124e:	f0 e0       	ldi	r31, 0x00	; 0
    1250:	80 cf       	rjmp	.-256    	; 0x1152 <estimate_distance+0x3be>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    1252:	82 e0       	ldi	r24, 0x02	; 2
    1254:	38 2e       	mov	r3, r24
                if(dist->low_gain > kilo_irlow[i]) {
    1256:	e2 e0       	ldi	r30, 0x02	; 2
    1258:	f0 e0       	ldi	r31, 0x00	; 0
    125a:	7b cf       	rjmp	.-266    	; 0x1152 <estimate_distance+0x3be>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    125c:	62 e0       	ldi	r22, 0x02	; 2
                if (dist->high_gain > kilo_irhigh[i]) {
    125e:	82 e0       	ldi	r24, 0x02	; 2
    1260:	90 e0       	ldi	r25, 0x00	; 0
    1262:	d5 cf       	rjmp	.-86     	; 0x120e <estimate_distance+0x47a>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    1264:	63 e0       	ldi	r22, 0x03	; 3
                if (dist->high_gain > kilo_irhigh[i]) {
    1266:	83 e0       	ldi	r24, 0x03	; 3
    1268:	90 e0       	ldi	r25, 0x00	; 0
    126a:	d1 cf       	rjmp	.-94     	; 0x120e <estimate_distance+0x47a>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    126c:	b3 e0       	ldi	r27, 0x03	; 3
    126e:	3b 2e       	mov	r3, r27
                if(dist->low_gain > kilo_irlow[i]) {
    1270:	e3 e0       	ldi	r30, 0x03	; 3
    1272:	f0 e0       	ldi	r31, 0x00	; 0
    1274:	6e cf       	rjmp	.-292    	; 0x1152 <estimate_distance+0x3be>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    1276:	64 e0       	ldi	r22, 0x04	; 4
                if (dist->high_gain > kilo_irhigh[i]) {
    1278:	84 e0       	ldi	r24, 0x04	; 4
    127a:	90 e0       	ldi	r25, 0x00	; 0
    127c:	c8 cf       	rjmp	.-112    	; 0x120e <estimate_distance+0x47a>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    127e:	a4 e0       	ldi	r26, 0x04	; 4
    1280:	3a 2e       	mov	r3, r26
                if(dist->low_gain > kilo_irlow[i]) {
    1282:	e4 e0       	ldi	r30, 0x04	; 4
    1284:	f0 e0       	ldi	r31, 0x00	; 0
    1286:	65 cf       	rjmp	.-310    	; 0x1152 <estimate_distance+0x3be>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    1288:	66 e0       	ldi	r22, 0x06	; 6
                if (dist->high_gain > kilo_irhigh[i]) {
    128a:	86 e0       	ldi	r24, 0x06	; 6
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	bf cf       	rjmp	.-130    	; 0x120e <estimate_distance+0x47a>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    1290:	e6 e0       	ldi	r30, 0x06	; 6
    1292:	3e 2e       	mov	r3, r30
                if(dist->low_gain > kilo_irlow[i]) {
    1294:	e6 e0       	ldi	r30, 0x06	; 6
    1296:	f0 e0       	ldi	r31, 0x00	; 0
    1298:	5c cf       	rjmp	.-328    	; 0x1152 <estimate_distance+0x3be>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    129a:	67 e0       	ldi	r22, 0x07	; 7
                if (dist->high_gain > kilo_irhigh[i]) {
    129c:	87 e0       	ldi	r24, 0x07	; 7
    129e:	90 e0       	ldi	r25, 0x00	; 0
    12a0:	b6 cf       	rjmp	.-148    	; 0x120e <estimate_distance+0x47a>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    12a2:	77 e0       	ldi	r23, 0x07	; 7
    12a4:	37 2e       	mov	r3, r23
                if(dist->low_gain > kilo_irlow[i]) {
    12a6:	e7 e0       	ldi	r30, 0x07	; 7
    12a8:	f0 e0       	ldi	r31, 0x00	; 0
    12aa:	53 cf       	rjmp	.-346    	; 0x1152 <estimate_distance+0x3be>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    12ac:	68 e0       	ldi	r22, 0x08	; 8
    12ae:	36 2e       	mov	r3, r22
                if(dist->low_gain > kilo_irlow[i]) {
    12b0:	e8 e0       	ldi	r30, 0x08	; 8
    12b2:	f0 e0       	ldi	r31, 0x00	; 0
    12b4:	4e cf       	rjmp	.-356    	; 0x1152 <estimate_distance+0x3be>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    12b6:	68 e0       	ldi	r22, 0x08	; 8
                if (dist->high_gain > kilo_irhigh[i]) {
    12b8:	88 e0       	ldi	r24, 0x08	; 8
    12ba:	90 e0       	ldi	r25, 0x00	; 0
    12bc:	a8 cf       	rjmp	.-176    	; 0x120e <estimate_distance+0x47a>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    12be:	59 e0       	ldi	r21, 0x09	; 9
    12c0:	35 2e       	mov	r3, r21
                if(dist->low_gain > kilo_irlow[i]) {
    12c2:	e9 e0       	ldi	r30, 0x09	; 9
    12c4:	f0 e0       	ldi	r31, 0x00	; 0
    12c6:	45 cf       	rjmp	.-374    	; 0x1152 <estimate_distance+0x3be>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    12c8:	69 e0       	ldi	r22, 0x09	; 9
                if (dist->high_gain > kilo_irhigh[i]) {
    12ca:	89 e0       	ldi	r24, 0x09	; 9
    12cc:	90 e0       	ldi	r25, 0x00	; 0
    12ce:	9f cf       	rjmp	.-194    	; 0x120e <estimate_distance+0x47a>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    12d0:	6a e0       	ldi	r22, 0x0A	; 10
                if (dist->high_gain > kilo_irhigh[i]) {
    12d2:	8a e0       	ldi	r24, 0x0A	; 10
    12d4:	90 e0       	ldi	r25, 0x00	; 0
    12d6:	9b cf       	rjmp	.-202    	; 0x120e <estimate_distance+0x47a>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    12d8:	4a e0       	ldi	r20, 0x0A	; 10
    12da:	34 2e       	mov	r3, r20
                if(dist->low_gain > kilo_irlow[i]) {
    12dc:	ea e0       	ldi	r30, 0x0A	; 10
    12de:	f0 e0       	ldi	r31, 0x00	; 0
    12e0:	38 cf       	rjmp	.-400    	; 0x1152 <estimate_distance+0x3be>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    12e2:	6b e0       	ldi	r22, 0x0B	; 11
                if (dist->high_gain > kilo_irhigh[i]) {
    12e4:	8b e0       	ldi	r24, 0x0B	; 11
    12e6:	90 e0       	ldi	r25, 0x00	; 0
    12e8:	92 cf       	rjmp	.-220    	; 0x120e <estimate_distance+0x47a>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    12ea:	3b e0       	ldi	r19, 0x0B	; 11
    12ec:	33 2e       	mov	r3, r19
                if(dist->low_gain > kilo_irlow[i]) {
    12ee:	eb e0       	ldi	r30, 0x0B	; 11
    12f0:	f0 e0       	ldi	r31, 0x00	; 0
    12f2:	2f cf       	rjmp	.-418    	; 0x1152 <estimate_distance+0x3be>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    12f4:	6c e0       	ldi	r22, 0x0C	; 12
                if (dist->high_gain > kilo_irhigh[i]) {
    12f6:	8c e0       	ldi	r24, 0x0C	; 12
    12f8:	90 e0       	ldi	r25, 0x00	; 0
    12fa:	89 cf       	rjmp	.-238    	; 0x120e <estimate_distance+0x47a>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    12fc:	2c e0       	ldi	r18, 0x0C	; 12
    12fe:	32 2e       	mov	r3, r18
                if(dist->low_gain > kilo_irlow[i]) {
    1300:	ec e0       	ldi	r30, 0x0C	; 12
    1302:	f0 e0       	ldi	r31, 0x00	; 0
    1304:	26 cf       	rjmp	.-436    	; 0x1152 <estimate_distance+0x3be>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    1306:	6d e0       	ldi	r22, 0x0D	; 13
                if (dist->high_gain > kilo_irhigh[i]) {
    1308:	8d e0       	ldi	r24, 0x0D	; 13
    130a:	90 e0       	ldi	r25, 0x00	; 0
    130c:	80 cf       	rjmp	.-256    	; 0x120e <estimate_distance+0x47a>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    130e:	9d e0       	ldi	r25, 0x0D	; 13
    1310:	39 2e       	mov	r3, r25
                if(dist->low_gain > kilo_irlow[i]) {
    1312:	ed e0       	ldi	r30, 0x0D	; 13
    1314:	f0 e0       	ldi	r31, 0x00	; 0
    1316:	1d cf       	rjmp	.-454    	; 0x1152 <estimate_distance+0x3be>
    1318:	81 e2       	ldi	r24, 0x21	; 33
    131a:	81 0f       	add	r24, r17
    131c:	fb ce       	rjmp	.-522    	; 0x1114 <estimate_distance+0x380>
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
    131e:	d1 01       	movw	r26, r2
    1320:	cd 90       	ld	r12, X+
    1322:	dc 90       	ld	r13, X
    1324:	80 91 6b 07 	lds	r24, 0x076B	; 0x80076b <kilo_irlow>
    1328:	90 91 6c 07 	lds	r25, 0x076C	; 0x80076c <kilo_irlow+0x1>
    132c:	8c 15       	cp	r24, r12
    132e:	9d 05       	cpc	r25, r13
    1330:	08 f0       	brcs	.+2      	; 0x1334 <estimate_distance+0x5a0>
    1332:	2c ce       	rjmp	.-936    	; 0xf8c <estimate_distance+0x1f8>
            dist_low=0;
    1334:	10 e0       	ldi	r17, 0x00	; 0
    1336:	93 ce       	rjmp	.-730    	; 0x105e <estimate_distance+0x2ca>

00001338 <__vector_14>:

/**
 * Timer0 interrupt.
 * Used to send messages every kilo_tx_period ticks.
 */
ISR(TIMER0_COMPA_vect) {
    1338:	1f 92       	push	r1
    133a:	0f 92       	push	r0
    133c:	0f b6       	in	r0, 0x3f	; 63
    133e:	0f 92       	push	r0
    1340:	11 24       	eor	r1, r1
    1342:	2f 93       	push	r18
    1344:	3f 93       	push	r19
    1346:	4f 93       	push	r20
    1348:	5f 93       	push	r21
    134a:	6f 93       	push	r22
    134c:	7f 93       	push	r23
    134e:	8f 93       	push	r24
    1350:	9f 93       	push	r25
    1352:	af 93       	push	r26
    1354:	bf 93       	push	r27
    1356:	ef 93       	push	r30
    1358:	ff 93       	push	r31
    tx_clock += tx_increment;
    135a:	20 91 8a 07 	lds	r18, 0x078A	; 0x80078a <tx_clock>
    135e:	30 91 8b 07 	lds	r19, 0x078B	; 0x80078b <tx_clock+0x1>
    1362:	80 91 88 07 	lds	r24, 0x0788	; 0x800788 <tx_increment>
    1366:	90 91 89 07 	lds	r25, 0x0789	; 0x800789 <tx_increment+0x1>
    136a:	82 0f       	add	r24, r18
    136c:	93 1f       	adc	r25, r19
    136e:	90 93 8b 07 	sts	0x078B, r25	; 0x80078b <tx_clock+0x1>
    1372:	80 93 8a 07 	sts	0x078A, r24	; 0x80078a <tx_clock>
    tx_increment = 0xFF;
    1376:	8f ef       	ldi	r24, 0xFF	; 255
    1378:	90 e0       	ldi	r25, 0x00	; 0
    137a:	90 93 89 07 	sts	0x0789, r25	; 0x800789 <tx_increment+0x1>
    137e:	80 93 88 07 	sts	0x0788, r24	; 0x800788 <tx_increment>
    OCR0A = tx_increment;
    1382:	8f ef       	ldi	r24, 0xFF	; 255
    1384:	87 bd       	out	0x27, r24	; 39
    kilo_ticks++;
    1386:	80 91 66 07 	lds	r24, 0x0766	; 0x800766 <kilo_ticks>
    138a:	90 91 67 07 	lds	r25, 0x0767	; 0x800767 <kilo_ticks+0x1>
    138e:	a0 91 68 07 	lds	r26, 0x0768	; 0x800768 <kilo_ticks+0x2>
    1392:	b0 91 69 07 	lds	r27, 0x0769	; 0x800769 <kilo_ticks+0x3>
    1396:	01 96       	adiw	r24, 0x01	; 1
    1398:	a1 1d       	adc	r26, r1
    139a:	b1 1d       	adc	r27, r1
    139c:	80 93 66 07 	sts	0x0766, r24	; 0x800766 <kilo_ticks>
    13a0:	90 93 67 07 	sts	0x0767, r25	; 0x800767 <kilo_ticks+0x1>
    13a4:	a0 93 68 07 	sts	0x0768, r26	; 0x800768 <kilo_ticks+0x2>
    13a8:	b0 93 69 07 	sts	0x0769, r27	; 0x800769 <kilo_ticks+0x3>

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
    13ac:	80 91 6a 07 	lds	r24, 0x076A	; 0x80076a <rx_busy>
    13b0:	81 11       	cpse	r24, r1
    13b2:	0f c0       	rjmp	.+30     	; 0x13d2 <__vector_14+0x9a>
    13b4:	80 91 99 07 	lds	r24, 0x0799	; 0x800799 <kilo_tx_period>
    13b8:	90 91 9a 07 	lds	r25, 0x079A	; 0x80079a <kilo_tx_period+0x1>
    13bc:	20 91 8a 07 	lds	r18, 0x078A	; 0x80078a <tx_clock>
    13c0:	30 91 8b 07 	lds	r19, 0x078B	; 0x80078b <tx_clock+0x1>
    13c4:	82 17       	cp	r24, r18
    13c6:	93 07       	cpc	r25, r19
    13c8:	20 f4       	brcc	.+8      	; 0x13d2 <__vector_14+0x9a>
    13ca:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <kilo_state>
    13ce:	84 30       	cpi	r24, 0x04	; 4
    13d0:	89 f0       	breq	.+34     	; 0x13f4 <__vector_14+0xbc>
                tx_increment = rand()&0xFF;
                OCR0A = tx_increment;
            }
        }
    }
}
    13d2:	ff 91       	pop	r31
    13d4:	ef 91       	pop	r30
    13d6:	bf 91       	pop	r27
    13d8:	af 91       	pop	r26
    13da:	9f 91       	pop	r25
    13dc:	8f 91       	pop	r24
    13de:	7f 91       	pop	r23
    13e0:	6f 91       	pop	r22
    13e2:	5f 91       	pop	r21
    13e4:	4f 91       	pop	r20
    13e6:	3f 91       	pop	r19
    13e8:	2f 91       	pop	r18
    13ea:	0f 90       	pop	r0
    13ec:	0f be       	out	0x3f, r0	; 63
    13ee:	0f 90       	pop	r0
    13f0:	1f 90       	pop	r1
    13f2:	18 95       	reti
    tx_increment = 0xFF;
    OCR0A = tx_increment;
    kilo_ticks++;

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
        message_t *msg = kilo_message_tx();
    13f4:	e0 91 03 01 	lds	r30, 0x0103	; 0x800103 <kilo_message_tx>
    13f8:	f0 91 04 01 	lds	r31, 0x0104	; 0x800104 <kilo_message_tx+0x1>
    13fc:	09 95       	icall
        if (msg) {
    13fe:	00 97       	sbiw	r24, 0x00	; 0
    1400:	41 f3       	breq	.-48     	; 0x13d2 <__vector_14+0x9a>
            if (message_send(msg)) {
    1402:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <message_send>
    1406:	81 11       	cpse	r24, r1
    1408:	0a c0       	rjmp	.+20     	; 0x141e <__vector_14+0xe6>
                kilo_message_tx_success();
                tx_clock = 0;
            } else {
                tx_increment = rand()&0xFF;
    140a:	0e 94 64 10 	call	0x20c8	; 0x20c8 <rand>
    140e:	9c 01       	movw	r18, r24
    1410:	33 27       	eor	r19, r19
    1412:	30 93 89 07 	sts	0x0789, r19	; 0x800789 <tx_increment+0x1>
    1416:	20 93 88 07 	sts	0x0788, r18	; 0x800788 <tx_increment>
                OCR0A = tx_increment;
    141a:	87 bd       	out	0x27, r24	; 39
            }
        }
    }
}
    141c:	da cf       	rjmp	.-76     	; 0x13d2 <__vector_14+0x9a>

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
        message_t *msg = kilo_message_tx();
        if (msg) {
            if (message_send(msg)) {
                kilo_message_tx_success();
    141e:	e0 91 01 01 	lds	r30, 0x0101	; 0x800101 <kilo_message_tx_success>
    1422:	f0 91 02 01 	lds	r31, 0x0102	; 0x800102 <kilo_message_tx_success+0x1>
    1426:	09 95       	icall
                tx_clock = 0;
    1428:	10 92 8b 07 	sts	0x078B, r1	; 0x80078b <tx_clock+0x1>
    142c:	10 92 8a 07 	sts	0x078A, r1	; 0x80078a <tx_clock>
    1430:	d0 cf       	rjmp	.-96     	; 0x13d2 <__vector_14+0x9a>

00001432 <set_color>:
EMPTY_INTERRUPT(TIMER0_COMPA_vect)

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
    1432:	80 ff       	sbrs	r24, 0
    1434:	11 c0       	rjmp	.+34     	; 0x1458 <set_color+0x26>
        DDRD |= (1<<5);
    1436:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
    1438:	81 ff       	sbrs	r24, 1
    143a:	11 c0       	rjmp	.+34     	; 0x145e <set_color+0x2c>
        DDRD |= (1<<4);
    143c:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
    143e:	82 ff       	sbrs	r24, 2
    1440:	11 c0       	rjmp	.+34     	; 0x1464 <set_color+0x32>
        DDRC |= (1<<3);
    1442:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
    1444:	83 ff       	sbrs	r24, 3
    1446:	11 c0       	rjmp	.+34     	; 0x146a <set_color+0x38>
        DDRC |= (1<<2);
    1448:	3a 9a       	sbi	0x07, 2	; 7
    else
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
    144a:	84 ff       	sbrs	r24, 4
    144c:	11 c0       	rjmp	.+34     	; 0x1470 <set_color+0x3e>
        DDRC |= (1<<5);
    144e:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
    1450:	85 fd       	sbrc	r24, 5
    1452:	11 c0       	rjmp	.+34     	; 0x1476 <set_color+0x44>
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
    1454:	3c 98       	cbi	0x07, 4	; 7
    1456:	08 95       	ret

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
    1458:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
    145a:	81 fd       	sbrc	r24, 1
    145c:	ef cf       	rjmp	.-34     	; 0x143c <set_color+0xa>
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
    145e:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
    1460:	82 fd       	sbrc	r24, 2
    1462:	ef cf       	rjmp	.-34     	; 0x1442 <set_color+0x10>
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
    1464:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
    1466:	83 fd       	sbrc	r24, 3
    1468:	ef cf       	rjmp	.-34     	; 0x1448 <set_color+0x16>
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
    146a:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
    146c:	84 fd       	sbrc	r24, 4
    146e:	ef cf       	rjmp	.-34     	; 0x144e <set_color+0x1c>
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
    1470:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
    1472:	85 ff       	sbrs	r24, 5
    1474:	ef cf       	rjmp	.-34     	; 0x1454 <set_color+0x22>
        DDRC |= (1<<4);
    1476:	3c 9a       	sbi	0x07, 4	; 7
    1478:	08 95       	ret

0000147a <__vector_11>:

/**
 * Timer1 interrupt.
 * Timeout which is trigerred if stop bit is not received.
 */
ISR(TIMER1_COMPA_vect) {
    147a:	1f 92       	push	r1
    147c:	0f 92       	push	r0
    147e:	0f b6       	in	r0, 0x3f	; 63
    1480:	0f 92       	push	r0
    1482:	11 24       	eor	r1, r1
    1484:	8f 93       	push	r24
    1486:	9f 93       	push	r25
    rx_timer_off();
    1488:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
    148c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1490:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    rx_leadingbit = 1;
    1494:	81 e0       	ldi	r24, 0x01	; 1
    1496:	80 93 43 07 	sts	0x0743, r24	; 0x800743 <rx_leadingbit>
    rx_leadingbyte = 1;
    149a:	80 93 87 07 	sts	0x0787, r24	; 0x800787 <rx_leadingbyte>
    rx_busy = 0;
    149e:	10 92 6a 07 	sts	0x076A, r1	; 0x80076a <rx_busy>
    adc_trigger_high_gain();
    14a2:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
    14a6:	93 ea       	ldi	r25, 0xA3	; 163
    14a8:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    14ac:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__DATA_REGION_ORIGIN__+0x1b>
}
    14b0:	9f 91       	pop	r25
    14b2:	8f 91       	pop	r24
    14b4:	0f 90       	pop	r0
    14b6:	0f be       	out	0x3f, r0	; 63
    14b8:	0f 90       	pop	r0
    14ba:	1f 90       	pop	r1
    14bc:	18 95       	reti

000014be <__vector_23>:

/**
 * Analog comparator trigger interrupt.
 * Triggerred for incoming IR pulses (i.e. individual bits).
 */
ISR(ANALOG_COMP_vect) {
    14be:	1f 92       	push	r1
    14c0:	0f 92       	push	r0
    14c2:	0f b6       	in	r0, 0x3f	; 63
    14c4:	0f 92       	push	r0
    14c6:	11 24       	eor	r1, r1
    14c8:	2f 93       	push	r18
    14ca:	3f 93       	push	r19
    14cc:	4f 93       	push	r20
    14ce:	5f 93       	push	r21
    14d0:	6f 93       	push	r22
    14d2:	7f 93       	push	r23
    14d4:	8f 93       	push	r24
    14d6:	9f 93       	push	r25
    14d8:	af 93       	push	r26
    14da:	bf 93       	push	r27
    14dc:	cf 93       	push	r28
    14de:	df 93       	push	r29
    14e0:	ef 93       	push	r30
    14e2:	ff 93       	push	r31
    uint16_t timer = TCNT1;
    14e4:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    14e8:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>

    rx_busy = 1;
    14ec:	41 e0       	ldi	r20, 0x01	; 1
    14ee:	40 93 6a 07 	sts	0x076A, r20	; 0x80076a <rx_busy>
    /* adc_trigger_stop(); */

    if(rx_leadingbit) {       // Start bit received.
    14f2:	80 91 43 07 	lds	r24, 0x0743	; 0x800743 <rx_leadingbit>
    14f6:	88 23       	and	r24, r24
    14f8:	a9 f1       	breq	.+106    	; 0x1564 <__vector_23+0xa6>
        rx_timer_on();
    14fa:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    14fe:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1502:	40 93 81 00 	sts	0x0081, r20	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
        rx_bytevalue = 0;
    1506:	10 92 9b 07 	sts	0x079B, r1	; 0x80079b <rx_bytevalue>
        rx_leadingbit = 0;
    150a:	10 92 43 07 	sts	0x0743, r1	; 0x800743 <rx_leadingbit>
        if (rx_leadingbyte) {
    150e:	80 91 87 07 	lds	r24, 0x0787	; 0x800787 <rx_leadingbyte>
    1512:	88 23       	and	r24, r24
    1514:	a1 f0       	breq	.+40     	; 0x153e <__vector_23+0x80>
            adc_finish_conversion();
    1516:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    151a:	86 fd       	sbrc	r24, 6
    151c:	fc cf       	rjmp	.-8      	; 0x1516 <__vector_23+0x58>
            rx_dist.high_gain = ADCW;
    151e:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
    1522:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
    1526:	90 93 65 07 	sts	0x0765, r25	; 0x800765 <rx_dist+0x3>
    152a:	80 93 64 07 	sts	0x0764, r24	; 0x800764 <rx_dist+0x2>
            adc_trigger_low_gain();
    152e:	81 e0       	ldi	r24, 0x01	; 1
    1530:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
    1534:	93 ea       	ldi	r25, 0xA3	; 163
    1536:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    153a:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__DATA_REGION_ORIGIN__+0x1b>
                    }
                }
            }
        }
    }
}
    153e:	ff 91       	pop	r31
    1540:	ef 91       	pop	r30
    1542:	df 91       	pop	r29
    1544:	cf 91       	pop	r28
    1546:	bf 91       	pop	r27
    1548:	af 91       	pop	r26
    154a:	9f 91       	pop	r25
    154c:	8f 91       	pop	r24
    154e:	7f 91       	pop	r23
    1550:	6f 91       	pop	r22
    1552:	5f 91       	pop	r21
    1554:	4f 91       	pop	r20
    1556:	3f 91       	pop	r19
    1558:	2f 91       	pop	r18
    155a:	0f 90       	pop	r0
    155c:	0f be       	out	0x3f, r0	; 63
    155e:	0f 90       	pop	r0
    1560:	1f 90       	pop	r1
    1562:	18 95       	reti
            rx_dist.high_gain = ADCW;
            adc_trigger_low_gain();
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
    1564:	c9 01       	movw	r24, r18
    1566:	87 58       	subi	r24, 0x87	; 135
    1568:	91 09       	sbc	r25, r1
    156a:	84 37       	cpi	r24, 0x74	; 116
    156c:	99 40       	sbci	r25, 0x09	; 9
    156e:	08 f0       	brcs	.+2      	; 0x1572 <__vector_23+0xb4>
    1570:	4f c0       	rjmp	.+158    	; 0x1610 <__vector_23+0x152>
            adc_trigger_high_gain();
        } else {
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
    1572:	26 58       	subi	r18, 0x86	; 134
    1574:	31 09       	sbc	r19, r1
    1576:	a4 ef       	ldi	r26, 0xF4	; 244
    1578:	b0 e0       	ldi	r27, 0x00	; 0
    157a:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <__umulhisi3>
    157e:	aa 27       	eor	r26, r26
    1580:	bb 27       	eor	r27, r27
            if (bitindex <= 7) { // Data bit received.
    1582:	88 30       	cpi	r24, 0x08	; 8
    1584:	08 f4       	brcc	.+2      	; 0x1588 <__vector_23+0xca>
    1586:	7b c0       	rjmp	.+246    	; 0x167e <__vector_23+0x1c0>
                rx_bytevalue |= (1<<bitindex);
            } else {             // Stop bit received.
                rx_leadingbit = 1;
    1588:	40 93 43 07 	sts	0x0743, r20	; 0x800743 <rx_leadingbit>
                if (rx_leadingbyte) {
    158c:	80 91 87 07 	lds	r24, 0x0787	; 0x800787 <rx_leadingbyte>
    1590:	81 11       	cpse	r24, r1
    1592:	52 c0       	rjmp	.+164    	; 0x1638 <__vector_23+0x17a>
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
                        rx_byteindex = 0;
                    }
                } else {
                    rawmsg[rx_byteindex] = rx_bytevalue;
    1594:	80 91 61 07 	lds	r24, 0x0761	; 0x800761 <rx_byteindex>
    1598:	e8 2f       	mov	r30, r24
    159a:	f0 e0       	ldi	r31, 0x00	; 0
    159c:	e3 57       	subi	r30, 0x73	; 115
    159e:	f8 4f       	sbci	r31, 0xF8	; 248
    15a0:	90 91 9b 07 	lds	r25, 0x079B	; 0x80079b <rx_bytevalue>
    15a4:	90 83       	st	Z, r25
                    rx_byteindex++;
    15a6:	8f 5f       	subi	r24, 0xFF	; 255
    15a8:	80 93 61 07 	sts	0x0761, r24	; 0x800761 <rx_byteindex>
                    if (rx_byteindex == sizeof(message_t)) {
    15ac:	8c 30       	cpi	r24, 0x0C	; 12
    15ae:	39 f6       	brne	.-114    	; 0x153e <__vector_23+0x80>
                        rx_timer_off();
    15b0:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
    15b4:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    15b8:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
                        rx_leadingbyte = 1;
    15bc:	40 93 87 07 	sts	0x0787, r20	; 0x800787 <rx_leadingbyte>
                        rx_busy = 0;
    15c0:	10 92 6a 07 	sts	0x076A, r1	; 0x80076a <rx_busy>

                        if (rx_msg.crc == message_crc(&rx_msg))
    15c4:	c0 91 97 07 	lds	r28, 0x0797	; 0x800797 <rx_msg+0xa>
    15c8:	d0 91 98 07 	lds	r29, 0x0798	; 0x800798 <rx_msg+0xb>
    15cc:	8d e8       	ldi	r24, 0x8D	; 141
    15ce:	97 e0       	ldi	r25, 0x07	; 7
    15d0:	0e 94 66 0c 	call	0x18cc	; 0x18cc <message_crc>
    15d4:	c8 17       	cp	r28, r24
    15d6:	d9 07       	cpc	r29, r25
    15d8:	09 f0       	breq	.+2      	; 0x15dc <__vector_23+0x11e>
    15da:	b1 cf       	rjmp	.-158    	; 0x153e <__vector_23+0x80>
}

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
    15dc:	80 91 96 07 	lds	r24, 0x0796	; 0x800796 <rx_msg+0x9>
    15e0:	87 ff       	sbrs	r24, 7
    15e2:	61 c0       	rjmp	.+194    	; 0x16a6 <__vector_23+0x1e8>
        kilo_message_rx(&rx_msg, &rx_dist);
        return;
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
    15e4:	98 e7       	ldi	r25, 0x78	; 120
    15e6:	98 0f       	add	r25, r24
    15e8:	93 30       	cpi	r25, 0x03	; 3
    15ea:	30 f0       	brcs	.+12     	; 0x15f8 <__vector_23+0x13a>
        motors_off();
    15ec:	53 98       	cbi	0x0a, 3	; 10
    15ee:	23 98       	cbi	0x04, 3	; 4
    15f0:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>
    15f4:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
    switch (rx_msg.type) {
    15f8:	90 e0       	ldi	r25, 0x00	; 0
    15fa:	fc 01       	movw	r30, r24
    15fc:	e0 58       	subi	r30, 0x80	; 128
    15fe:	f1 09       	sbc	r31, r1
    1600:	eb 30       	cpi	r30, 0x0B	; 11
    1602:	f1 05       	cpc	r31, r1
    1604:	08 f0       	brcs	.+2      	; 0x1608 <__vector_23+0x14a>
    1606:	9b cf       	rjmp	.-202    	; 0x153e <__vector_23+0x80>
    1608:	e5 5c       	subi	r30, 0xC5	; 197
    160a:	ff 4f       	sbci	r31, 0xFF	; 255
    160c:	0c 94 df 0d 	jmp	0x1bbe	; 0x1bbe <__tablejump2__>
            adc_trigger_low_gain();
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
            rx_timer_off();
    1610:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
    1614:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1618:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
            rx_leadingbit = 1;
    161c:	40 93 43 07 	sts	0x0743, r20	; 0x800743 <rx_leadingbit>
            rx_leadingbyte = 1;
    1620:	40 93 87 07 	sts	0x0787, r20	; 0x800787 <rx_leadingbyte>
            rx_busy = 0;
    1624:	10 92 6a 07 	sts	0x076A, r1	; 0x80076a <rx_busy>
            adc_trigger_high_gain();
    1628:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
    162c:	83 ea       	ldi	r24, 0xA3	; 163
    162e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    1632:	40 93 7b 00 	sts	0x007B, r20	; 0x80007b <__DATA_REGION_ORIGIN__+0x1b>
    1636:	83 cf       	rjmp	.-250    	; 0x153e <__vector_23+0x80>
            if (bitindex <= 7) { // Data bit received.
                rx_bytevalue |= (1<<bitindex);
            } else {             // Stop bit received.
                rx_leadingbit = 1;
                if (rx_leadingbyte) {
                    adc_finish_conversion();
    1638:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    163c:	86 fd       	sbrc	r24, 6
    163e:	fc cf       	rjmp	.-8      	; 0x1638 <__vector_23+0x17a>
                    rx_dist.low_gain = ADCW;
    1640:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
    1644:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
    1648:	90 93 63 07 	sts	0x0763, r25	; 0x800763 <rx_dist+0x1>
    164c:	80 93 62 07 	sts	0x0762, r24	; 0x800762 <rx_dist>
                    adc_trigger_high_gain();
    1650:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
    1654:	83 ea       	ldi	r24, 0xA3	; 163
    1656:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    165a:	81 e0       	ldi	r24, 0x01	; 1
    165c:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__DATA_REGION_ORIGIN__+0x1b>
                    if (rx_bytevalue != 0) { // Collision detected.
    1660:	90 91 9b 07 	lds	r25, 0x079B	; 0x80079b <rx_bytevalue>
    1664:	99 23       	and	r25, r25
    1666:	d1 f0       	breq	.+52     	; 0x169c <__vector_23+0x1de>
                        rx_timer_off();
    1668:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
    166c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1670:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
                        rx_leadingbyte = 1;
    1674:	80 93 87 07 	sts	0x0787, r24	; 0x800787 <rx_leadingbyte>
                        rx_busy = 0;
    1678:	10 92 6a 07 	sts	0x076A, r1	; 0x80076a <rx_busy>
    167c:	60 cf       	rjmp	.-320    	; 0x153e <__vector_23+0x80>
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
            if (bitindex <= 7) { // Data bit received.
                rx_bytevalue |= (1<<bitindex);
    167e:	21 e0       	ldi	r18, 0x01	; 1
    1680:	30 e0       	ldi	r19, 0x00	; 0
    1682:	f9 01       	movw	r30, r18
    1684:	02 c0       	rjmp	.+4      	; 0x168a <__vector_23+0x1cc>
    1686:	ee 0f       	add	r30, r30
    1688:	ff 1f       	adc	r31, r31
    168a:	8a 95       	dec	r24
    168c:	e2 f7       	brpl	.-8      	; 0x1686 <__vector_23+0x1c8>
    168e:	cf 01       	movw	r24, r30
    1690:	90 91 9b 07 	lds	r25, 0x079B	; 0x80079b <rx_bytevalue>
    1694:	89 2b       	or	r24, r25
    1696:	80 93 9b 07 	sts	0x079B, r24	; 0x80079b <rx_bytevalue>
    169a:	51 cf       	rjmp	.-350    	; 0x153e <__vector_23+0x80>
                    if (rx_bytevalue != 0) { // Collision detected.
                        rx_timer_off();
                        rx_leadingbyte = 1;
                        rx_busy = 0;
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
    169c:	10 92 87 07 	sts	0x0787, r1	; 0x800787 <rx_leadingbyte>
                        rx_byteindex = 0;
    16a0:	10 92 61 07 	sts	0x0761, r1	; 0x800761 <rx_byteindex>
    16a4:	4c cf       	rjmp	.-360    	; 0x153e <__vector_23+0x80>

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
        kilo_message_rx(&rx_msg, &rx_dist);
    16a6:	e0 91 05 01 	lds	r30, 0x0105	; 0x800105 <kilo_message_rx>
    16aa:	f0 91 06 01 	lds	r31, 0x0106	; 0x800106 <kilo_message_rx+0x1>
    16ae:	62 e6       	ldi	r22, 0x62	; 98
    16b0:	77 e0       	ldi	r23, 0x07	; 7
    16b2:	8d e8       	ldi	r24, 0x8D	; 141
    16b4:	97 e0       	ldi	r25, 0x07	; 7
    16b6:	09 95       	icall
    16b8:	42 cf       	rjmp	.-380    	; 0x153e <__vector_23+0x80>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
    16ba:	80 91 8d 07 	lds	r24, 0x078D	; 0x80078d <rx_msg>
    16be:	82 30       	cpi	r24, 0x02	; 2
    16c0:	09 f4       	brne	.+2      	; 0x16c4 <__vector_23+0x206>
    16c2:	dd c0       	rjmp	.+442    	; 0x187e <__vector_23+0x3c0>
    16c4:	08 f4       	brcc	.+2      	; 0x16c8 <__vector_23+0x20a>
    16c6:	ba c0       	rjmp	.+372    	; 0x183c <__vector_23+0x37e>
    16c8:	83 30       	cpi	r24, 0x03	; 3
    16ca:	09 f4       	brne	.+2      	; 0x16ce <__vector_23+0x210>
    16cc:	c6 c0       	rjmp	.+396    	; 0x185a <__vector_23+0x39c>
    16ce:	84 30       	cpi	r24, 0x04	; 4
    16d0:	09 f0       	breq	.+2      	; 0x16d4 <__vector_23+0x216>
    16d2:	b1 c0       	rjmp	.+354    	; 0x1836 <__vector_23+0x378>
                        cur_motion = MOVE_RIGHT;
                        kilo_turn_right = calibmsg->turn_right;
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
    16d4:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <cur_motion>
    16d8:	90 91 93 07 	lds	r25, 0x0793	; 0x800793 <rx_msg+0x6>
    16dc:	83 30       	cpi	r24, 0x03	; 3
    16de:	09 f4       	brne	.+2      	; 0x16e2 <__vector_23+0x224>
    16e0:	e3 c0       	rjmp	.+454    	; 0x18a8 <__vector_23+0x3ea>
    16e2:	80 91 92 07 	lds	r24, 0x0792	; 0x800792 <rx_msg+0x5>
                        prev_motion = MOVE_STOP;
    16e6:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <prev_motion>
                        cur_motion = MOVE_STRAIGHT;
    16ea:	23 e0       	ldi	r18, 0x03	; 3
    16ec:	20 93 20 01 	sts	0x0120, r18	; 0x800120 <cur_motion>
                        kilo_straight_left = calibmsg->straight_left;
    16f0:	80 93 9e 07 	sts	0x079E, r24	; 0x80079e <kilo_straight_left>
                        kilo_straight_right = calibmsg->straight_right;
    16f4:	90 93 9f 07 	sts	0x079F, r25	; 0x80079f <kilo_straight_right>
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
    16f8:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <kilo_state>
    16fc:	86 30       	cpi	r24, 0x06	; 6
    16fe:	09 f4       	brne	.+2      	; 0x1702 <__vector_23+0x244>
    1700:	1e cf       	rjmp	.-452    	; 0x153e <__vector_23+0x80>
                motors_on();
    1702:	53 9a       	sbi	0x0a, 3	; 10
    1704:	23 9a       	sbi	0x04, 3	; 4
    1706:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>
    170a:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
                kilo_state = MOVING;
    170e:	86 e0       	ldi	r24, 0x06	; 6
    1710:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <kilo_state>
    1714:	14 cf       	rjmp	.-472    	; 0x153e <__vector_23+0x80>
            }
            break;
        case READUID:
            if (kilo_state != MOVING) {
    1716:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <kilo_state>
    171a:	86 30       	cpi	r24, 0x06	; 6
    171c:	99 f0       	breq	.+38     	; 0x1744 <__vector_23+0x286>
                motors_on();
    171e:	53 9a       	sbi	0x0a, 3	; 10
    1720:	23 9a       	sbi	0x04, 3	; 4
    1722:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>
    1726:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
    172a:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
    172c:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
    172e:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
    1730:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
    1732:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
    1734:	3c 98       	cbi	0x07, 4	; 7
            break;
        case READUID:
            if (kilo_state != MOVING) {
                motors_on();
                set_color(RGB(0,0,0));
                prev_motion = cur_motion = MOVE_STOP;
    1736:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <cur_motion>
    173a:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <prev_motion>
                kilo_state = MOVING;
    173e:	86 e0       	ldi	r24, 0x06	; 6
    1740:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <kilo_state>
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
    1744:	81 e0       	ldi	r24, 0x01	; 1
    1746:	90 e0       	ldi	r25, 0x00	; 0
    1748:	9c 01       	movw	r18, r24
    174a:	00 90 8d 07 	lds	r0, 0x078D	; 0x80078d <rx_msg>
    174e:	02 c0       	rjmp	.+4      	; 0x1754 <__vector_23+0x296>
    1750:	22 0f       	add	r18, r18
    1752:	33 1f       	adc	r19, r19
    1754:	0a 94       	dec	r0
    1756:	e2 f7       	brpl	.-8      	; 0x1750 <__vector_23+0x292>
    1758:	80 91 9c 07 	lds	r24, 0x079C	; 0x80079c <kilo_uid>
    175c:	90 91 9d 07 	lds	r25, 0x079D	; 0x80079d <kilo_uid+0x1>
    1760:	82 23       	and	r24, r18
    1762:	93 23       	and	r25, r19
    1764:	89 2b       	or	r24, r25
    1766:	09 f0       	breq	.+2      	; 0x176a <__vector_23+0x2ac>
    1768:	86 c0       	rjmp	.+268    	; 0x1876 <__vector_23+0x3b8>
                cur_motion = MOVE_LEFT;
            else
                cur_motion = MOVE_STOP;
    176a:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <cur_motion>
                    }
                }
            }
        }
    }
}
    176e:	e7 ce       	rjmp	.-562    	; 0x153e <__vector_23+0x80>
            break;
        case SLEEP:
            kilo_state = SLEEPING;
            break;
        case WAKEUP:
            kilo_state = IDLE;
    1770:	81 e0       	ldi	r24, 0x01	; 1
    1772:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <kilo_state>
    1776:	e3 ce       	rjmp	.-570    	; 0x153e <__vector_23+0x80>
        case BOOT:
            tx_timer_off();
            bootload();
            break;
        case RESET:
            reset();
    1778:	e0 e0       	ldi	r30, 0x00	; 0
    177a:	f0 e0       	ldi	r31, 0x00	; 0
    177c:	09 95       	icall
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
        motors_off();
    switch (rx_msg.type) {
        case BOOT:
            tx_timer_off();
    177e:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
    1782:	8d 7f       	andi	r24, 0xFD	; 253
    1784:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
    1788:	16 bc       	out	0x26, r1	; 38
            bootload();
    178a:	e0 e0       	ldi	r30, 0x00	; 0
    178c:	f0 e7       	ldi	r31, 0x70	; 112
    178e:	09 95       	icall
            break;
        case RESET:
            reset();
            break;
        case SLEEP:
            kilo_state = SLEEPING;
    1790:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <kilo_state>
    1794:	d4 ce       	rjmp	.-600    	; 0x153e <__vector_23+0x80>
            break;
        case CHARGE:
            kilo_state = CHARGING;
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
    1796:	82 e0       	ldi	r24, 0x02	; 2
    1798:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <kilo_state>
    179c:	d0 ce       	rjmp	.-608    	; 0x153e <__vector_23+0x80>
            break;
        case WAKEUP:
            kilo_state = IDLE;
            break;
        case CHARGE:
            kilo_state = CHARGING;
    179e:	85 e0       	ldi	r24, 0x05	; 5
    17a0:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <kilo_state>
    17a4:	cc ce       	rjmp	.-616    	; 0x153e <__vector_23+0x80>
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
            break;
        case RUN:
            if (kilo_state != SETUP && kilo_state != RUNNING) {
    17a6:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <kilo_state>
    17aa:	83 30       	cpi	r24, 0x03	; 3
    17ac:	09 f4       	brne	.+2      	; 0x17b0 <__vector_23+0x2f2>
    17ae:	c7 ce       	rjmp	.-626    	; 0x153e <__vector_23+0x80>
    17b0:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <kilo_state>
    17b4:	84 30       	cpi	r24, 0x04	; 4
    17b6:	09 f4       	brne	.+2      	; 0x17ba <__vector_23+0x2fc>
    17b8:	c2 ce       	rjmp	.-636    	; 0x153e <__vector_23+0x80>
                motors_on();
    17ba:	53 9a       	sbi	0x0a, 3	; 10
    17bc:	23 9a       	sbi	0x04, 3	; 4
    17be:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>
    17c2:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
                kilo_state = SETUP;
    17c6:	83 e0       	ldi	r24, 0x03	; 3
    17c8:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <kilo_state>
    17cc:	b8 ce       	rjmp	.-656    	; 0x153e <__vector_23+0x80>
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
                case CALIB_SAVE:
                    if (kilo_state == MOVING) {
    17ce:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <kilo_state>
    17d2:	86 30       	cpi	r24, 0x06	; 6
    17d4:	09 f0       	breq	.+2      	; 0x17d8 <__vector_23+0x31a>
    17d6:	b3 ce       	rjmp	.-666    	; 0x153e <__vector_23+0x80>
                        eeprom_write_byte(EEPROM_UID, kilo_uid&0xFF);
    17d8:	60 91 9c 07 	lds	r22, 0x079C	; 0x80079c <kilo_uid>
    17dc:	80 eb       	ldi	r24, 0xB0	; 176
    17de:	90 e0       	ldi	r25, 0x00	; 0
    17e0:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_UID+1, (kilo_uid>>8)&0xFF);
    17e4:	60 91 9d 07 	lds	r22, 0x079D	; 0x80079d <kilo_uid+0x1>
    17e8:	81 eb       	ldi	r24, 0xB1	; 177
    17ea:	90 e0       	ldi	r25, 0x00	; 0
    17ec:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_ROTATE, kilo_turn_left);
    17f0:	60 91 a0 07 	lds	r22, 0x07A0	; 0x8007a0 <kilo_turn_left>
    17f4:	85 e0       	ldi	r24, 0x05	; 5
    17f6:	90 e0       	ldi	r25, 0x00	; 0
    17f8:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_ROTATE, kilo_turn_right);
    17fc:	60 91 8c 07 	lds	r22, 0x078C	; 0x80078c <kilo_turn_right>
    1800:	89 e0       	ldi	r24, 0x09	; 9
    1802:	90 e0       	ldi	r25, 0x00	; 0
    1804:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_STRAIGHT, kilo_straight_left);
    1808:	60 91 9e 07 	lds	r22, 0x079E	; 0x80079e <kilo_straight_left>
    180c:	8c e0       	ldi	r24, 0x0C	; 12
    180e:	90 e0       	ldi	r25, 0x00	; 0
    1810:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_STRAIGHT, kilo_straight_right);
    1814:	60 91 9f 07 	lds	r22, 0x079F	; 0x80079f <kilo_straight_right>
    1818:	84 e1       	ldi	r24, 0x14	; 20
    181a:	90 e0       	ldi	r25, 0x00	; 0
    181c:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <eeprom_write_byte>
                        motors_off();
    1820:	53 98       	cbi	0x0a, 3	; 10
    1822:	23 98       	cbi	0x04, 3	; 4
    1824:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>
    1828:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
                        kilo_state = IDLE;
    182c:	81 e0       	ldi	r24, 0x01	; 1
    182e:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <kilo_state>
    1832:	80 91 8d 07 	lds	r24, 0x078D	; 0x80078d <rx_msg>
                        kilo_straight_left = calibmsg->straight_left;
                        kilo_straight_right = calibmsg->straight_right;
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
    1836:	81 11       	cpse	r24, r1
    1838:	5f cf       	rjmp	.-322    	; 0x16f8 <__vector_23+0x23a>
    183a:	81 ce       	rjmp	.-766    	; 0x153e <__vector_23+0x80>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
    183c:	88 23       	and	r24, r24
    183e:	39 f2       	breq	.-114    	; 0x17ce <__vector_23+0x310>
    1840:	81 30       	cpi	r24, 0x01	; 1
    1842:	c9 f7       	brne	.-14     	; 0x1836 <__vector_23+0x378>
                        motors_off();
                        kilo_state = IDLE;
                    }
                    break;
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
    1844:	80 91 8e 07 	lds	r24, 0x078E	; 0x80078e <rx_msg+0x1>
    1848:	90 91 8f 07 	lds	r25, 0x078F	; 0x80078f <rx_msg+0x2>
    184c:	90 93 9d 07 	sts	0x079D, r25	; 0x80079d <kilo_uid+0x1>
    1850:	80 93 9c 07 	sts	0x079C, r24	; 0x80079c <kilo_uid>
                    cur_motion = MOVE_STOP;
    1854:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <cur_motion>
    1858:	4f cf       	rjmp	.-354    	; 0x16f8 <__vector_23+0x23a>
                        cur_motion = MOVE_LEFT;
                        kilo_turn_left = calibmsg->turn_left;
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
    185a:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <cur_motion>
    185e:	82 30       	cpi	r24, 0x02	; 2
    1860:	71 f1       	breq	.+92     	; 0x18be <__vector_23+0x400>
    1862:	80 91 91 07 	lds	r24, 0x0791	; 0x800791 <rx_msg+0x4>
                        prev_motion = MOVE_STOP;
    1866:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <prev_motion>
                        cur_motion = MOVE_RIGHT;
    186a:	92 e0       	ldi	r25, 0x02	; 2
    186c:	90 93 20 01 	sts	0x0120, r25	; 0x800120 <cur_motion>
                        kilo_turn_right = calibmsg->turn_right;
    1870:	80 93 8c 07 	sts	0x078C, r24	; 0x80078c <kilo_turn_right>
    1874:	41 cf       	rjmp	.-382    	; 0x16f8 <__vector_23+0x23a>
                prev_motion = cur_motion = MOVE_STOP;
                kilo_state = MOVING;
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
                cur_motion = MOVE_LEFT;
    1876:	81 e0       	ldi	r24, 0x01	; 1
    1878:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <cur_motion>
    187c:	60 ce       	rjmp	.-832    	; 0x153e <__vector_23+0x80>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
    187e:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <cur_motion>
    1882:	81 30       	cpi	r24, 0x01	; 1
    1884:	51 f0       	breq	.+20     	; 0x189a <__vector_23+0x3dc>
    1886:	80 91 90 07 	lds	r24, 0x0790	; 0x800790 <rx_msg+0x3>
                        prev_motion = MOVE_STOP;
    188a:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <prev_motion>
                        cur_motion = MOVE_LEFT;
    188e:	91 e0       	ldi	r25, 0x01	; 1
    1890:	90 93 20 01 	sts	0x0120, r25	; 0x800120 <cur_motion>
                        kilo_turn_left = calibmsg->turn_left;
    1894:	80 93 a0 07 	sts	0x07A0, r24	; 0x8007a0 <kilo_turn_left>
    1898:	2f cf       	rjmp	.-418    	; 0x16f8 <__vector_23+0x23a>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
    189a:	80 91 90 07 	lds	r24, 0x0790	; 0x800790 <rx_msg+0x3>
    189e:	90 91 a0 07 	lds	r25, 0x07A0	; 0x8007a0 <kilo_turn_left>
    18a2:	89 13       	cpse	r24, r25
    18a4:	f2 cf       	rjmp	.-28     	; 0x188a <__vector_23+0x3cc>
    18a6:	28 cf       	rjmp	.-432    	; 0x16f8 <__vector_23+0x23a>
                        cur_motion = MOVE_RIGHT;
                        kilo_turn_right = calibmsg->turn_right;
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
    18a8:	80 91 9f 07 	lds	r24, 0x079F	; 0x80079f <kilo_straight_right>
    18ac:	98 13       	cpse	r25, r24
    18ae:	19 cf       	rjmp	.-462    	; 0x16e2 <__vector_23+0x224>
    18b0:	80 91 92 07 	lds	r24, 0x0792	; 0x800792 <rx_msg+0x5>
    18b4:	20 91 9e 07 	lds	r18, 0x079E	; 0x80079e <kilo_straight_left>
    18b8:	82 13       	cpse	r24, r18
    18ba:	15 cf       	rjmp	.-470    	; 0x16e6 <__vector_23+0x228>
    18bc:	1d cf       	rjmp	.-454    	; 0x16f8 <__vector_23+0x23a>
                        cur_motion = MOVE_LEFT;
                        kilo_turn_left = calibmsg->turn_left;
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
    18be:	80 91 91 07 	lds	r24, 0x0791	; 0x800791 <rx_msg+0x4>
    18c2:	90 91 8c 07 	lds	r25, 0x078C	; 0x80078c <kilo_turn_right>
    18c6:	89 13       	cpse	r24, r25
    18c8:	ce cf       	rjmp	.-100    	; 0x1866 <__vector_23+0x3a8>
    18ca:	16 cf       	rjmp	.-468    	; 0x16f8 <__vector_23+0x23a>

000018cc <message_crc>:
#include "message.h"
#include <util/crc16.h>  // for optimized crc routines

uint16_t message_crc(const message_t *msg) {
    18cc:	fc 01       	movw	r30, r24
static __inline__ uint16_t
_crc_ccitt_update (uint16_t __crc, uint8_t __data)
{
    uint16_t __ret;

    __asm__ __volatile__ (
    18ce:	80 81       	ld	r24, Z
    18d0:	2f ef       	ldi	r18, 0xFF	; 255
    18d2:	3f ef       	ldi	r19, 0xFF	; 255
    18d4:	28 27       	eor	r18, r24
    18d6:	02 2e       	mov	r0, r18
    18d8:	22 95       	swap	r18
    18da:	20 7f       	andi	r18, 0xF0	; 240
    18dc:	20 25       	eor	r18, r0
    18de:	03 2e       	mov	r0, r19
    18e0:	32 2f       	mov	r19, r18
    18e2:	22 95       	swap	r18
    18e4:	2f 70       	andi	r18, 0x0F	; 15
    18e6:	02 26       	eor	r0, r18
    18e8:	26 95       	lsr	r18
    18ea:	32 27       	eor	r19, r18
    18ec:	23 27       	eor	r18, r19
    18ee:	22 0f       	add	r18, r18
    18f0:	22 0f       	add	r18, r18
    18f2:	22 0f       	add	r18, r18
    18f4:	20 25       	eor	r18, r0
    18f6:	81 81       	ldd	r24, Z+1	; 0x01
    18f8:	28 27       	eor	r18, r24
    18fa:	02 2e       	mov	r0, r18
    18fc:	22 95       	swap	r18
    18fe:	20 7f       	andi	r18, 0xF0	; 240
    1900:	20 25       	eor	r18, r0
    1902:	03 2e       	mov	r0, r19
    1904:	32 2f       	mov	r19, r18
    1906:	22 95       	swap	r18
    1908:	2f 70       	andi	r18, 0x0F	; 15
    190a:	02 26       	eor	r0, r18
    190c:	26 95       	lsr	r18
    190e:	32 27       	eor	r19, r18
    1910:	23 27       	eor	r18, r19
    1912:	22 0f       	add	r18, r18
    1914:	22 0f       	add	r18, r18
    1916:	22 0f       	add	r18, r18
    1918:	20 25       	eor	r18, r0
    191a:	82 81       	ldd	r24, Z+2	; 0x02
    191c:	28 27       	eor	r18, r24
    191e:	02 2e       	mov	r0, r18
    1920:	22 95       	swap	r18
    1922:	20 7f       	andi	r18, 0xF0	; 240
    1924:	20 25       	eor	r18, r0
    1926:	03 2e       	mov	r0, r19
    1928:	32 2f       	mov	r19, r18
    192a:	22 95       	swap	r18
    192c:	2f 70       	andi	r18, 0x0F	; 15
    192e:	02 26       	eor	r0, r18
    1930:	26 95       	lsr	r18
    1932:	32 27       	eor	r19, r18
    1934:	23 27       	eor	r18, r19
    1936:	22 0f       	add	r18, r18
    1938:	22 0f       	add	r18, r18
    193a:	22 0f       	add	r18, r18
    193c:	20 25       	eor	r18, r0
    193e:	83 81       	ldd	r24, Z+3	; 0x03
    1940:	28 27       	eor	r18, r24
    1942:	02 2e       	mov	r0, r18
    1944:	22 95       	swap	r18
    1946:	20 7f       	andi	r18, 0xF0	; 240
    1948:	20 25       	eor	r18, r0
    194a:	03 2e       	mov	r0, r19
    194c:	32 2f       	mov	r19, r18
    194e:	22 95       	swap	r18
    1950:	2f 70       	andi	r18, 0x0F	; 15
    1952:	02 26       	eor	r0, r18
    1954:	26 95       	lsr	r18
    1956:	32 27       	eor	r19, r18
    1958:	23 27       	eor	r18, r19
    195a:	22 0f       	add	r18, r18
    195c:	22 0f       	add	r18, r18
    195e:	22 0f       	add	r18, r18
    1960:	20 25       	eor	r18, r0
    1962:	84 81       	ldd	r24, Z+4	; 0x04
    1964:	28 27       	eor	r18, r24
    1966:	02 2e       	mov	r0, r18
    1968:	22 95       	swap	r18
    196a:	20 7f       	andi	r18, 0xF0	; 240
    196c:	20 25       	eor	r18, r0
    196e:	03 2e       	mov	r0, r19
    1970:	32 2f       	mov	r19, r18
    1972:	22 95       	swap	r18
    1974:	2f 70       	andi	r18, 0x0F	; 15
    1976:	02 26       	eor	r0, r18
    1978:	26 95       	lsr	r18
    197a:	32 27       	eor	r19, r18
    197c:	23 27       	eor	r18, r19
    197e:	22 0f       	add	r18, r18
    1980:	22 0f       	add	r18, r18
    1982:	22 0f       	add	r18, r18
    1984:	20 25       	eor	r18, r0
    1986:	85 81       	ldd	r24, Z+5	; 0x05
    1988:	28 27       	eor	r18, r24
    198a:	02 2e       	mov	r0, r18
    198c:	22 95       	swap	r18
    198e:	20 7f       	andi	r18, 0xF0	; 240
    1990:	20 25       	eor	r18, r0
    1992:	03 2e       	mov	r0, r19
    1994:	32 2f       	mov	r19, r18
    1996:	22 95       	swap	r18
    1998:	2f 70       	andi	r18, 0x0F	; 15
    199a:	02 26       	eor	r0, r18
    199c:	26 95       	lsr	r18
    199e:	32 27       	eor	r19, r18
    19a0:	23 27       	eor	r18, r19
    19a2:	22 0f       	add	r18, r18
    19a4:	22 0f       	add	r18, r18
    19a6:	22 0f       	add	r18, r18
    19a8:	20 25       	eor	r18, r0
    19aa:	86 81       	ldd	r24, Z+6	; 0x06
    19ac:	28 27       	eor	r18, r24
    19ae:	02 2e       	mov	r0, r18
    19b0:	22 95       	swap	r18
    19b2:	20 7f       	andi	r18, 0xF0	; 240
    19b4:	20 25       	eor	r18, r0
    19b6:	03 2e       	mov	r0, r19
    19b8:	32 2f       	mov	r19, r18
    19ba:	22 95       	swap	r18
    19bc:	2f 70       	andi	r18, 0x0F	; 15
    19be:	02 26       	eor	r0, r18
    19c0:	26 95       	lsr	r18
    19c2:	32 27       	eor	r19, r18
    19c4:	23 27       	eor	r18, r19
    19c6:	22 0f       	add	r18, r18
    19c8:	22 0f       	add	r18, r18
    19ca:	22 0f       	add	r18, r18
    19cc:	20 25       	eor	r18, r0
    19ce:	87 81       	ldd	r24, Z+7	; 0x07
    19d0:	28 27       	eor	r18, r24
    19d2:	02 2e       	mov	r0, r18
    19d4:	22 95       	swap	r18
    19d6:	20 7f       	andi	r18, 0xF0	; 240
    19d8:	20 25       	eor	r18, r0
    19da:	03 2e       	mov	r0, r19
    19dc:	32 2f       	mov	r19, r18
    19de:	22 95       	swap	r18
    19e0:	2f 70       	andi	r18, 0x0F	; 15
    19e2:	02 26       	eor	r0, r18
    19e4:	26 95       	lsr	r18
    19e6:	32 27       	eor	r19, r18
    19e8:	23 27       	eor	r18, r19
    19ea:	22 0f       	add	r18, r18
    19ec:	22 0f       	add	r18, r18
    19ee:	22 0f       	add	r18, r18
    19f0:	20 25       	eor	r18, r0
    19f2:	80 85       	ldd	r24, Z+8	; 0x08
    19f4:	28 27       	eor	r18, r24
    19f6:	02 2e       	mov	r0, r18
    19f8:	22 95       	swap	r18
    19fa:	20 7f       	andi	r18, 0xF0	; 240
    19fc:	20 25       	eor	r18, r0
    19fe:	03 2e       	mov	r0, r19
    1a00:	32 2f       	mov	r19, r18
    1a02:	22 95       	swap	r18
    1a04:	2f 70       	andi	r18, 0x0F	; 15
    1a06:	02 26       	eor	r0, r18
    1a08:	26 95       	lsr	r18
    1a0a:	32 27       	eor	r19, r18
    1a0c:	23 27       	eor	r18, r19
    1a0e:	22 0f       	add	r18, r18
    1a10:	22 0f       	add	r18, r18
    1a12:	22 0f       	add	r18, r18
    1a14:	20 25       	eor	r18, r0
    1a16:	41 85       	ldd	r20, Z+9	; 0x09
    1a18:	c9 01       	movw	r24, r18
    1a1a:	84 27       	eor	r24, r20
    1a1c:	08 2e       	mov	r0, r24
    1a1e:	82 95       	swap	r24
    1a20:	80 7f       	andi	r24, 0xF0	; 240
    1a22:	80 25       	eor	r24, r0
    1a24:	09 2e       	mov	r0, r25
    1a26:	98 2f       	mov	r25, r24
    1a28:	82 95       	swap	r24
    1a2a:	8f 70       	andi	r24, 0x0F	; 15
    1a2c:	08 26       	eor	r0, r24
    1a2e:	86 95       	lsr	r24
    1a30:	98 27       	eor	r25, r24
    1a32:	89 27       	eor	r24, r25
    1a34:	88 0f       	add	r24, r24
    1a36:	88 0f       	add	r24, r24
    1a38:	88 0f       	add	r24, r24
    1a3a:	80 25       	eor	r24, r0
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    return crc;
}
    1a3c:	08 95       	ret

00001a3e <message_send>:
.global message_send

message_send:
    ; save interrupt state
    ; sreg = SREG
    in sreg, SREG
    1a3e:	0f b6       	in	r0, 0x3f	; 63
#ifndef OHC
    cli
    1a40:	f8 94       	cli
#endif
    ; ddreg = IR_DDR
    in  ddrreg,  IR_DDR
    1a42:	a4 b1       	in	r26, 0x04	; 4

    ; IR_DDR |= tx_mask
    lds tmpreg1, tx_mask
    1a44:	20 91 60 07 	lds	r18, 0x0760	; 0x800760 <tx_mask>
    or tmpreg1, ddrreg
    1a48:	2a 2b       	or	r18, r26
    out IR_DDR, tmpreg1
    1a4a:	24 b9       	out	0x04, r18	; 4

    ldi tmpreg1, 0x01
    1a4c:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    1a4e:	30 91 60 07 	lds	r19, 0x0760	; 0x800760 <tx_mask>
    1a52:	20 30       	cpi	r18, 0x00	; 0
    1a54:	29 f0       	breq	.+10     	; 0x1a60 <message_send+0x22>
    1a56:	00 00       	nop
    1a58:	25 b1       	in	r18, 0x05	; 5
    1a5a:	23 2b       	or	r18, r19
    1a5c:	25 b9       	out	0x05, r18	; 5
    1a5e:	04 c0       	rjmp	.+8      	; 0x1a68 <message_send+0x2a>
    1a60:	00 00       	nop
    1a62:	00 00       	nop
    1a64:	00 00       	nop
    1a66:	00 c0       	rjmp	.+0      	; 0x1a68 <message_send+0x2a>
    1a68:	00 00       	nop
    1a6a:	00 00       	nop
    1a6c:	00 00       	nop
    1a6e:	30 95       	com	r19
    1a70:	25 b1       	in	r18, 0x05	; 5
    1a72:	23 23       	and	r18, r19
    1a74:	25 b9       	out	0x05, r18	; 5
    delay_cycles (2*rx_bitcycles-irsend_cycles)
    1a76:	2e ea       	ldi	r18, 0xAE	; 174
    1a78:	2a 95       	dec	r18
    1a7a:	f1 f7       	brne	.-4      	; 0x1a78 <message_send+0x3a>

    ldi tmpreg1, rx_bitcycles*7/8
    1a7c:	2b ee       	ldi	r18, 0xEB	; 235

00001a7e <checkcollision>:
checkcollision:
    ; if (ACSR&(1<<ACO)) == 0 goto nocollision
    in tmpreg2, ACSR
    1a7e:	30 b7       	in	r19, 0x30	; 48
    sbrs tmpreg2, ACO
    1a80:	35 ff       	sbrs	r19, 5
    rjmp nocollision
    1a82:	0a c0       	rjmp	.+20     	; 0x1a98 <nocollision>
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    1a84:	a4 b9       	out	0x04, r26	; 4
    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    1a86:	30 91 60 07 	lds	r19, 0x0760	; 0x800760 <tx_mask>
    com tmpreg2
    1a8a:	30 95       	com	r19
    in tmpreg1, IR_PORT
    1a8c:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    1a8e:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    1a90:	25 b9       	out	0x05, r18	; 5
    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    1a92:	0f be       	out	0x3f, r0	; 63
    return 0
    1a94:	80 e0       	ldi	r24, 0x00	; 0
    1a96:	08 95       	ret

00001a98 <nocollision>:
nocollision:
    nop
    1a98:	00 00       	nop
    dec tmpreg1
    1a9a:	2a 95       	dec	r18
    brne checkcollision
    1a9c:	81 f7       	brne	.-32     	; 0x1a7e <checkcollision>

    ldi tmpreg1, 0x01
    1a9e:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    1aa0:	30 91 60 07 	lds	r19, 0x0760	; 0x800760 <tx_mask>
    1aa4:	20 30       	cpi	r18, 0x00	; 0
    1aa6:	29 f0       	breq	.+10     	; 0x1ab2 <nocollision+0x1a>
    1aa8:	00 00       	nop
    1aaa:	25 b1       	in	r18, 0x05	; 5
    1aac:	23 2b       	or	r18, r19
    1aae:	25 b9       	out	0x05, r18	; 5
    1ab0:	04 c0       	rjmp	.+8      	; 0x1aba <nocollision+0x22>
    1ab2:	00 00       	nop
    1ab4:	00 00       	nop
    1ab6:	00 00       	nop
    1ab8:	00 c0       	rjmp	.+0      	; 0x1aba <nocollision+0x22>
    1aba:	00 00       	nop
    1abc:	00 00       	nop
    1abe:	00 00       	nop
    1ac0:	30 95       	com	r19
    1ac2:	25 b1       	in	r18, 0x05	; 5
    1ac4:	23 23       	and	r18, r19
    1ac6:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles)
    1ac8:	00 00       	nop
    1aca:	24 e5       	ldi	r18, 0x54	; 84
    1acc:	2a 95       	dec	r18
    1ace:	f1 f7       	brne	.-4      	; 0x1acc <nocollision+0x34>

    movw r30, r24     ; // copy msg pointer in r24:r25 to r30:r31
    1ad0:	fc 01       	movw	r30, r24
    ldi byteidx, 12
    1ad2:	8c e0       	ldi	r24, 0x0C	; 12

00001ad4 <sendbyte>:

sendbyte:
    ; byteval = msg[i++]<<1 | (1<<0) | (1<<9)
    ld bytevalL, Z+
    1ad4:	61 91       	ld	r22, Z+
    ldi bytevalH, 0x00
    1ad6:	70 e0       	ldi	r23, 0x00	; 0
    add bytevalL, bytevalL
    1ad8:	66 0f       	add	r22, r22
    adc bytevalH, bytevalH
    1ada:	77 1f       	adc	r23, r23
    ori bytevalL, 0x01
    1adc:	61 60       	ori	r22, 0x01	; 1
    ori bytevalH, 0x02
    1ade:	72 60       	ori	r23, 0x02	; 2
    ; bitidex = 10
    ldi bitidx, 10
    1ae0:	9a e0       	ldi	r25, 0x0A	; 10
    ; bitmask = 0x00001
    ldi bitmaskL, 0x01
    1ae2:	41 e0       	ldi	r20, 0x01	; 1
    ldi bitmaskH, 0x00
    1ae4:	50 e0       	ldi	r21, 0x00	; 0

00001ae6 <sendbit>:

    ; 9 cycles per iteration + irsend
sendbit:
    ; tmpreg = (byteval&bytemask)
    movw tmpreg1, bitmaskL
    1ae6:	9a 01       	movw	r18, r20
    and tmpreg1, bytevalL
    1ae8:	26 23       	and	r18, r22
    and tmpreg2, bytevalH
    1aea:	37 23       	and	r19, r23
    or  tmpreg1, tmpreg2
    1aec:	23 2b       	or	r18, r19

    ; irsend tmpreg
    irsend
    1aee:	30 91 60 07 	lds	r19, 0x0760	; 0x800760 <tx_mask>
    1af2:	20 30       	cpi	r18, 0x00	; 0
    1af4:	29 f0       	breq	.+10     	; 0x1b00 <sendbit+0x1a>
    1af6:	00 00       	nop
    1af8:	25 b1       	in	r18, 0x05	; 5
    1afa:	23 2b       	or	r18, r19
    1afc:	25 b9       	out	0x05, r18	; 5
    1afe:	04 c0       	rjmp	.+8      	; 0x1b08 <sendbit+0x22>
    1b00:	00 00       	nop
    1b02:	00 00       	nop
    1b04:	00 00       	nop
    1b06:	00 c0       	rjmp	.+0      	; 0x1b08 <sendbit+0x22>
    1b08:	00 00       	nop
    1b0a:	00 00       	nop
    1b0c:	00 00       	nop
    1b0e:	30 95       	com	r19
    1b10:	25 b1       	in	r18, 0x05	; 5
    1b12:	23 23       	and	r18, r19
    1b14:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles-9)
    1b16:	00 00       	nop
    1b18:	21 e5       	ldi	r18, 0x51	; 81
    1b1a:	2a 95       	dec	r18
    1b1c:	f1 f7       	brne	.-4      	; 0x1b1a <sendbit+0x34>

    ; bitmask <<= 1
    add bitmaskL, bitmaskL
    1b1e:	44 0f       	add	r20, r20
    adc bitmaskH, bitmaskH
    1b20:	55 1f       	adc	r21, r21

    ; if (bitidex--) goto sendbit
    dec bitidx
    1b22:	9a 95       	dec	r25
    brne sendbit
    1b24:	01 f7       	brne	.-64     	; 0x1ae6 <sendbit>

    ; if (byteidx--) goto sendbyte
    dec byteidx
    1b26:	8a 95       	dec	r24
    brne sendbyte
    1b28:	a9 f6       	brne	.-86     	; 0x1ad4 <sendbyte>

    ; ACSR |= (1<<ACI)
    in tmpreg1, ACSR
    1b2a:	20 b7       	in	r18, 0x30	; 48
    ori tmpreg1, (1<<ACI)
    1b2c:	20 61       	ori	r18, 0x10	; 16
    out ACSR, tmpreg1
    1b2e:	20 bf       	out	0x30, r18	; 48
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    1b30:	a4 b9       	out	0x04, r26	; 4

    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    1b32:	30 91 60 07 	lds	r19, 0x0760	; 0x800760 <tx_mask>
    com tmpreg2
    1b36:	30 95       	com	r19
    in tmpreg1, IR_PORT
    1b38:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    1b3a:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    1b3c:	25 b9       	out	0x05, r18	; 5

    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    1b3e:	0f be       	out	0x3f, r0	; 63
    return 1
    1b40:	81 e0       	ldi	r24, 0x01	; 1
    1b42:	08 95       	ret

00001b44 <main>:

/*-------------------------------------------------------------------*/
/* Main function                                                     */
/*-------------------------------------------------------------------*/
int main() {
   kilo_init();
    1b44:	0e 94 86 03 	call	0x70c	; 0x70c <kilo_init>
   
   /* Communication callbacks */
   kilo_message_tx=message_tx;
    1b48:	81 e7       	ldi	r24, 0x71	; 113
    1b4a:	90 e0       	ldi	r25, 0x00	; 0
    1b4c:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <kilo_message_tx+0x1>
    1b50:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <kilo_message_tx>
   kilo_message_tx_success = tx_message_success;
    1b54:	87 e8       	ldi	r24, 0x87	; 135
    1b56:	90 e0       	ldi	r25, 0x00	; 0
    1b58:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <kilo_message_tx_success+0x1>
    1b5c:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <kilo_message_tx_success>
   kilo_message_rx=message_rx;
    1b60:	8d e8       	ldi	r24, 0x8D	; 141
    1b62:	90 e0       	ldi	r25, 0x00	; 0
    1b64:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <kilo_message_rx+0x1>
    1b68:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <kilo_message_rx>
   
   /* start main loop */
   kilo_start(setup, loop);
    1b6c:	63 e1       	ldi	r22, 0x13	; 19
    1b6e:	71 e0       	ldi	r23, 0x01	; 1
    1b70:	8a eb       	ldi	r24, 0xBA	; 186
    1b72:	90 e0       	ldi	r25, 0x00	; 0
    1b74:	0e 94 82 04 	call	0x904	; 0x904 <kilo_start>

   return 0;
}
    1b78:	80 e0       	ldi	r24, 0x00	; 0
    1b7a:	90 e0       	ldi	r25, 0x00	; 0
    1b7c:	08 95       	ret

00001b7e <__udivmodqi4>:
    1b7e:	99 1b       	sub	r25, r25
    1b80:	79 e0       	ldi	r23, 0x09	; 9
    1b82:	04 c0       	rjmp	.+8      	; 0x1b8c <__udivmodqi4_ep>

00001b84 <__udivmodqi4_loop>:
    1b84:	99 1f       	adc	r25, r25
    1b86:	96 17       	cp	r25, r22
    1b88:	08 f0       	brcs	.+2      	; 0x1b8c <__udivmodqi4_ep>
    1b8a:	96 1b       	sub	r25, r22

00001b8c <__udivmodqi4_ep>:
    1b8c:	88 1f       	adc	r24, r24
    1b8e:	7a 95       	dec	r23
    1b90:	c9 f7       	brne	.-14     	; 0x1b84 <__udivmodqi4_loop>
    1b92:	80 95       	com	r24
    1b94:	08 95       	ret

00001b96 <__divmodhi4>:
    1b96:	97 fb       	bst	r25, 7
    1b98:	07 2e       	mov	r0, r23
    1b9a:	16 f4       	brtc	.+4      	; 0x1ba0 <__divmodhi4+0xa>
    1b9c:	00 94       	com	r0
    1b9e:	07 d0       	rcall	.+14     	; 0x1bae <__divmodhi4_neg1>
    1ba0:	77 fd       	sbrc	r23, 7
    1ba2:	09 d0       	rcall	.+18     	; 0x1bb6 <__divmodhi4_neg2>
    1ba4:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <__udivmodhi4>
    1ba8:	07 fc       	sbrc	r0, 7
    1baa:	05 d0       	rcall	.+10     	; 0x1bb6 <__divmodhi4_neg2>
    1bac:	3e f4       	brtc	.+14     	; 0x1bbc <__divmodhi4_exit>

00001bae <__divmodhi4_neg1>:
    1bae:	90 95       	com	r25
    1bb0:	81 95       	neg	r24
    1bb2:	9f 4f       	sbci	r25, 0xFF	; 255
    1bb4:	08 95       	ret

00001bb6 <__divmodhi4_neg2>:
    1bb6:	70 95       	com	r23
    1bb8:	61 95       	neg	r22
    1bba:	7f 4f       	sbci	r23, 0xFF	; 255

00001bbc <__divmodhi4_exit>:
    1bbc:	08 95       	ret

00001bbe <__tablejump2__>:
    1bbe:	ee 0f       	add	r30, r30
    1bc0:	ff 1f       	adc	r31, r31
    1bc2:	05 90       	lpm	r0, Z+
    1bc4:	f4 91       	lpm	r31, Z
    1bc6:	e0 2d       	mov	r30, r0
    1bc8:	09 94       	ijmp

00001bca <__umulhisi3>:
    1bca:	a2 9f       	mul	r26, r18
    1bcc:	b0 01       	movw	r22, r0
    1bce:	b3 9f       	mul	r27, r19
    1bd0:	c0 01       	movw	r24, r0
    1bd2:	a3 9f       	mul	r26, r19
    1bd4:	70 0d       	add	r23, r0
    1bd6:	81 1d       	adc	r24, r1
    1bd8:	11 24       	eor	r1, r1
    1bda:	91 1d       	adc	r25, r1
    1bdc:	b2 9f       	mul	r27, r18
    1bde:	70 0d       	add	r23, r0
    1be0:	81 1d       	adc	r24, r1
    1be2:	11 24       	eor	r1, r1
    1be4:	91 1d       	adc	r25, r1
    1be6:	08 95       	ret

00001be8 <__udivmodhi4>:
    1be8:	aa 1b       	sub	r26, r26
    1bea:	bb 1b       	sub	r27, r27
    1bec:	51 e1       	ldi	r21, 0x11	; 17
    1bee:	07 c0       	rjmp	.+14     	; 0x1bfe <__udivmodhi4_ep>

00001bf0 <__udivmodhi4_loop>:
    1bf0:	aa 1f       	adc	r26, r26
    1bf2:	bb 1f       	adc	r27, r27
    1bf4:	a6 17       	cp	r26, r22
    1bf6:	b7 07       	cpc	r27, r23
    1bf8:	10 f0       	brcs	.+4      	; 0x1bfe <__udivmodhi4_ep>
    1bfa:	a6 1b       	sub	r26, r22
    1bfc:	b7 0b       	sbc	r27, r23

00001bfe <__udivmodhi4_ep>:
    1bfe:	88 1f       	adc	r24, r24
    1c00:	99 1f       	adc	r25, r25
    1c02:	5a 95       	dec	r21
    1c04:	a9 f7       	brne	.-22     	; 0x1bf0 <__udivmodhi4_loop>
    1c06:	80 95       	com	r24
    1c08:	90 95       	com	r25
    1c0a:	bc 01       	movw	r22, r24
    1c0c:	cd 01       	movw	r24, r26
    1c0e:	08 95       	ret

00001c10 <__subsf3>:
    1c10:	50 58       	subi	r21, 0x80	; 128

00001c12 <__addsf3>:
    1c12:	bb 27       	eor	r27, r27
    1c14:	aa 27       	eor	r26, r26
    1c16:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <__addsf3x>
    1c1a:	0c 94 71 0f 	jmp	0x1ee2	; 0x1ee2 <__fp_round>
    1c1e:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <__fp_pscA>
    1c22:	38 f0       	brcs	.+14     	; 0x1c32 <__addsf3+0x20>
    1c24:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <__fp_pscB>
    1c28:	20 f0       	brcs	.+8      	; 0x1c32 <__addsf3+0x20>
    1c2a:	39 f4       	brne	.+14     	; 0x1c3a <__addsf3+0x28>
    1c2c:	9f 3f       	cpi	r25, 0xFF	; 255
    1c2e:	19 f4       	brne	.+6      	; 0x1c36 <__addsf3+0x24>
    1c30:	26 f4       	brtc	.+8      	; 0x1c3a <__addsf3+0x28>
    1c32:	0c 94 60 0f 	jmp	0x1ec0	; 0x1ec0 <__fp_nan>
    1c36:	0e f4       	brtc	.+2      	; 0x1c3a <__addsf3+0x28>
    1c38:	e0 95       	com	r30
    1c3a:	e7 fb       	bst	r30, 7
    1c3c:	0c 94 5a 0f 	jmp	0x1eb4	; 0x1eb4 <__fp_inf>

00001c40 <__addsf3x>:
    1c40:	e9 2f       	mov	r30, r25
    1c42:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <__fp_split3>
    1c46:	58 f3       	brcs	.-42     	; 0x1c1e <__addsf3+0xc>
    1c48:	ba 17       	cp	r27, r26
    1c4a:	62 07       	cpc	r22, r18
    1c4c:	73 07       	cpc	r23, r19
    1c4e:	84 07       	cpc	r24, r20
    1c50:	95 07       	cpc	r25, r21
    1c52:	20 f0       	brcs	.+8      	; 0x1c5c <__addsf3x+0x1c>
    1c54:	79 f4       	brne	.+30     	; 0x1c74 <__addsf3x+0x34>
    1c56:	a6 f5       	brtc	.+104    	; 0x1cc0 <__addsf3x+0x80>
    1c58:	0c 94 a4 0f 	jmp	0x1f48	; 0x1f48 <__fp_zero>
    1c5c:	0e f4       	brtc	.+2      	; 0x1c60 <__addsf3x+0x20>
    1c5e:	e0 95       	com	r30
    1c60:	0b 2e       	mov	r0, r27
    1c62:	ba 2f       	mov	r27, r26
    1c64:	a0 2d       	mov	r26, r0
    1c66:	0b 01       	movw	r0, r22
    1c68:	b9 01       	movw	r22, r18
    1c6a:	90 01       	movw	r18, r0
    1c6c:	0c 01       	movw	r0, r24
    1c6e:	ca 01       	movw	r24, r20
    1c70:	a0 01       	movw	r20, r0
    1c72:	11 24       	eor	r1, r1
    1c74:	ff 27       	eor	r31, r31
    1c76:	59 1b       	sub	r21, r25
    1c78:	99 f0       	breq	.+38     	; 0x1ca0 <__addsf3x+0x60>
    1c7a:	59 3f       	cpi	r21, 0xF9	; 249
    1c7c:	50 f4       	brcc	.+20     	; 0x1c92 <__addsf3x+0x52>
    1c7e:	50 3e       	cpi	r21, 0xE0	; 224
    1c80:	68 f1       	brcs	.+90     	; 0x1cdc <__addsf3x+0x9c>
    1c82:	1a 16       	cp	r1, r26
    1c84:	f0 40       	sbci	r31, 0x00	; 0
    1c86:	a2 2f       	mov	r26, r18
    1c88:	23 2f       	mov	r18, r19
    1c8a:	34 2f       	mov	r19, r20
    1c8c:	44 27       	eor	r20, r20
    1c8e:	58 5f       	subi	r21, 0xF8	; 248
    1c90:	f3 cf       	rjmp	.-26     	; 0x1c78 <__addsf3x+0x38>
    1c92:	46 95       	lsr	r20
    1c94:	37 95       	ror	r19
    1c96:	27 95       	ror	r18
    1c98:	a7 95       	ror	r26
    1c9a:	f0 40       	sbci	r31, 0x00	; 0
    1c9c:	53 95       	inc	r21
    1c9e:	c9 f7       	brne	.-14     	; 0x1c92 <__addsf3x+0x52>
    1ca0:	7e f4       	brtc	.+30     	; 0x1cc0 <__addsf3x+0x80>
    1ca2:	1f 16       	cp	r1, r31
    1ca4:	ba 0b       	sbc	r27, r26
    1ca6:	62 0b       	sbc	r22, r18
    1ca8:	73 0b       	sbc	r23, r19
    1caa:	84 0b       	sbc	r24, r20
    1cac:	ba f0       	brmi	.+46     	; 0x1cdc <__addsf3x+0x9c>
    1cae:	91 50       	subi	r25, 0x01	; 1
    1cb0:	a1 f0       	breq	.+40     	; 0x1cda <__addsf3x+0x9a>
    1cb2:	ff 0f       	add	r31, r31
    1cb4:	bb 1f       	adc	r27, r27
    1cb6:	66 1f       	adc	r22, r22
    1cb8:	77 1f       	adc	r23, r23
    1cba:	88 1f       	adc	r24, r24
    1cbc:	c2 f7       	brpl	.-16     	; 0x1cae <__addsf3x+0x6e>
    1cbe:	0e c0       	rjmp	.+28     	; 0x1cdc <__addsf3x+0x9c>
    1cc0:	ba 0f       	add	r27, r26
    1cc2:	62 1f       	adc	r22, r18
    1cc4:	73 1f       	adc	r23, r19
    1cc6:	84 1f       	adc	r24, r20
    1cc8:	48 f4       	brcc	.+18     	; 0x1cdc <__addsf3x+0x9c>
    1cca:	87 95       	ror	r24
    1ccc:	77 95       	ror	r23
    1cce:	67 95       	ror	r22
    1cd0:	b7 95       	ror	r27
    1cd2:	f7 95       	ror	r31
    1cd4:	9e 3f       	cpi	r25, 0xFE	; 254
    1cd6:	08 f0       	brcs	.+2      	; 0x1cda <__addsf3x+0x9a>
    1cd8:	b0 cf       	rjmp	.-160    	; 0x1c3a <__addsf3+0x28>
    1cda:	93 95       	inc	r25
    1cdc:	88 0f       	add	r24, r24
    1cde:	08 f0       	brcs	.+2      	; 0x1ce2 <__addsf3x+0xa2>
    1ce0:	99 27       	eor	r25, r25
    1ce2:	ee 0f       	add	r30, r30
    1ce4:	97 95       	ror	r25
    1ce6:	87 95       	ror	r24
    1ce8:	08 95       	ret

00001cea <__divsf3>:
    1cea:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <__divsf3x>
    1cee:	0c 94 71 0f 	jmp	0x1ee2	; 0x1ee2 <__fp_round>
    1cf2:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <__fp_pscB>
    1cf6:	58 f0       	brcs	.+22     	; 0x1d0e <__divsf3+0x24>
    1cf8:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <__fp_pscA>
    1cfc:	40 f0       	brcs	.+16     	; 0x1d0e <__divsf3+0x24>
    1cfe:	29 f4       	brne	.+10     	; 0x1d0a <__divsf3+0x20>
    1d00:	5f 3f       	cpi	r21, 0xFF	; 255
    1d02:	29 f0       	breq	.+10     	; 0x1d0e <__divsf3+0x24>
    1d04:	0c 94 5a 0f 	jmp	0x1eb4	; 0x1eb4 <__fp_inf>
    1d08:	51 11       	cpse	r21, r1
    1d0a:	0c 94 a5 0f 	jmp	0x1f4a	; 0x1f4a <__fp_szero>
    1d0e:	0c 94 60 0f 	jmp	0x1ec0	; 0x1ec0 <__fp_nan>

00001d12 <__divsf3x>:
    1d12:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <__fp_split3>
    1d16:	68 f3       	brcs	.-38     	; 0x1cf2 <__divsf3+0x8>

00001d18 <__divsf3_pse>:
    1d18:	99 23       	and	r25, r25
    1d1a:	b1 f3       	breq	.-20     	; 0x1d08 <__divsf3+0x1e>
    1d1c:	55 23       	and	r21, r21
    1d1e:	91 f3       	breq	.-28     	; 0x1d04 <__divsf3+0x1a>
    1d20:	95 1b       	sub	r25, r21
    1d22:	55 0b       	sbc	r21, r21
    1d24:	bb 27       	eor	r27, r27
    1d26:	aa 27       	eor	r26, r26
    1d28:	62 17       	cp	r22, r18
    1d2a:	73 07       	cpc	r23, r19
    1d2c:	84 07       	cpc	r24, r20
    1d2e:	38 f0       	brcs	.+14     	; 0x1d3e <__divsf3_pse+0x26>
    1d30:	9f 5f       	subi	r25, 0xFF	; 255
    1d32:	5f 4f       	sbci	r21, 0xFF	; 255
    1d34:	22 0f       	add	r18, r18
    1d36:	33 1f       	adc	r19, r19
    1d38:	44 1f       	adc	r20, r20
    1d3a:	aa 1f       	adc	r26, r26
    1d3c:	a9 f3       	breq	.-22     	; 0x1d28 <__divsf3_pse+0x10>
    1d3e:	35 d0       	rcall	.+106    	; 0x1daa <__divsf3_pse+0x92>
    1d40:	0e 2e       	mov	r0, r30
    1d42:	3a f0       	brmi	.+14     	; 0x1d52 <__divsf3_pse+0x3a>
    1d44:	e0 e8       	ldi	r30, 0x80	; 128
    1d46:	32 d0       	rcall	.+100    	; 0x1dac <__divsf3_pse+0x94>
    1d48:	91 50       	subi	r25, 0x01	; 1
    1d4a:	50 40       	sbci	r21, 0x00	; 0
    1d4c:	e6 95       	lsr	r30
    1d4e:	00 1c       	adc	r0, r0
    1d50:	ca f7       	brpl	.-14     	; 0x1d44 <__divsf3_pse+0x2c>
    1d52:	2b d0       	rcall	.+86     	; 0x1daa <__divsf3_pse+0x92>
    1d54:	fe 2f       	mov	r31, r30
    1d56:	29 d0       	rcall	.+82     	; 0x1daa <__divsf3_pse+0x92>
    1d58:	66 0f       	add	r22, r22
    1d5a:	77 1f       	adc	r23, r23
    1d5c:	88 1f       	adc	r24, r24
    1d5e:	bb 1f       	adc	r27, r27
    1d60:	26 17       	cp	r18, r22
    1d62:	37 07       	cpc	r19, r23
    1d64:	48 07       	cpc	r20, r24
    1d66:	ab 07       	cpc	r26, r27
    1d68:	b0 e8       	ldi	r27, 0x80	; 128
    1d6a:	09 f0       	breq	.+2      	; 0x1d6e <__divsf3_pse+0x56>
    1d6c:	bb 0b       	sbc	r27, r27
    1d6e:	80 2d       	mov	r24, r0
    1d70:	bf 01       	movw	r22, r30
    1d72:	ff 27       	eor	r31, r31
    1d74:	93 58       	subi	r25, 0x83	; 131
    1d76:	5f 4f       	sbci	r21, 0xFF	; 255
    1d78:	3a f0       	brmi	.+14     	; 0x1d88 <__divsf3_pse+0x70>
    1d7a:	9e 3f       	cpi	r25, 0xFE	; 254
    1d7c:	51 05       	cpc	r21, r1
    1d7e:	78 f0       	brcs	.+30     	; 0x1d9e <__divsf3_pse+0x86>
    1d80:	0c 94 5a 0f 	jmp	0x1eb4	; 0x1eb4 <__fp_inf>
    1d84:	0c 94 a5 0f 	jmp	0x1f4a	; 0x1f4a <__fp_szero>
    1d88:	5f 3f       	cpi	r21, 0xFF	; 255
    1d8a:	e4 f3       	brlt	.-8      	; 0x1d84 <__divsf3_pse+0x6c>
    1d8c:	98 3e       	cpi	r25, 0xE8	; 232
    1d8e:	d4 f3       	brlt	.-12     	; 0x1d84 <__divsf3_pse+0x6c>
    1d90:	86 95       	lsr	r24
    1d92:	77 95       	ror	r23
    1d94:	67 95       	ror	r22
    1d96:	b7 95       	ror	r27
    1d98:	f7 95       	ror	r31
    1d9a:	9f 5f       	subi	r25, 0xFF	; 255
    1d9c:	c9 f7       	brne	.-14     	; 0x1d90 <__divsf3_pse+0x78>
    1d9e:	88 0f       	add	r24, r24
    1da0:	91 1d       	adc	r25, r1
    1da2:	96 95       	lsr	r25
    1da4:	87 95       	ror	r24
    1da6:	97 f9       	bld	r25, 7
    1da8:	08 95       	ret
    1daa:	e1 e0       	ldi	r30, 0x01	; 1
    1dac:	66 0f       	add	r22, r22
    1dae:	77 1f       	adc	r23, r23
    1db0:	88 1f       	adc	r24, r24
    1db2:	bb 1f       	adc	r27, r27
    1db4:	62 17       	cp	r22, r18
    1db6:	73 07       	cpc	r23, r19
    1db8:	84 07       	cpc	r24, r20
    1dba:	ba 07       	cpc	r27, r26
    1dbc:	20 f0       	brcs	.+8      	; 0x1dc6 <__divsf3_pse+0xae>
    1dbe:	62 1b       	sub	r22, r18
    1dc0:	73 0b       	sbc	r23, r19
    1dc2:	84 0b       	sbc	r24, r20
    1dc4:	ba 0b       	sbc	r27, r26
    1dc6:	ee 1f       	adc	r30, r30
    1dc8:	88 f7       	brcc	.-30     	; 0x1dac <__divsf3_pse+0x94>
    1dca:	e0 95       	com	r30
    1dcc:	08 95       	ret

00001dce <__fixsfsi>:
    1dce:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <__fixunssfsi>
    1dd2:	68 94       	set
    1dd4:	b1 11       	cpse	r27, r1
    1dd6:	0c 94 a5 0f 	jmp	0x1f4a	; 0x1f4a <__fp_szero>
    1dda:	08 95       	ret

00001ddc <__fixunssfsi>:
    1ddc:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <__fp_splitA>
    1de0:	88 f0       	brcs	.+34     	; 0x1e04 <__fixunssfsi+0x28>
    1de2:	9f 57       	subi	r25, 0x7F	; 127
    1de4:	98 f0       	brcs	.+38     	; 0x1e0c <__fixunssfsi+0x30>
    1de6:	b9 2f       	mov	r27, r25
    1de8:	99 27       	eor	r25, r25
    1dea:	b7 51       	subi	r27, 0x17	; 23
    1dec:	b0 f0       	brcs	.+44     	; 0x1e1a <__fixunssfsi+0x3e>
    1dee:	e1 f0       	breq	.+56     	; 0x1e28 <__fixunssfsi+0x4c>
    1df0:	66 0f       	add	r22, r22
    1df2:	77 1f       	adc	r23, r23
    1df4:	88 1f       	adc	r24, r24
    1df6:	99 1f       	adc	r25, r25
    1df8:	1a f0       	brmi	.+6      	; 0x1e00 <__fixunssfsi+0x24>
    1dfa:	ba 95       	dec	r27
    1dfc:	c9 f7       	brne	.-14     	; 0x1df0 <__fixunssfsi+0x14>
    1dfe:	14 c0       	rjmp	.+40     	; 0x1e28 <__fixunssfsi+0x4c>
    1e00:	b1 30       	cpi	r27, 0x01	; 1
    1e02:	91 f0       	breq	.+36     	; 0x1e28 <__fixunssfsi+0x4c>
    1e04:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <__fp_zero>
    1e08:	b1 e0       	ldi	r27, 0x01	; 1
    1e0a:	08 95       	ret
    1e0c:	0c 94 a4 0f 	jmp	0x1f48	; 0x1f48 <__fp_zero>
    1e10:	67 2f       	mov	r22, r23
    1e12:	78 2f       	mov	r23, r24
    1e14:	88 27       	eor	r24, r24
    1e16:	b8 5f       	subi	r27, 0xF8	; 248
    1e18:	39 f0       	breq	.+14     	; 0x1e28 <__fixunssfsi+0x4c>
    1e1a:	b9 3f       	cpi	r27, 0xF9	; 249
    1e1c:	cc f3       	brlt	.-14     	; 0x1e10 <__fixunssfsi+0x34>
    1e1e:	86 95       	lsr	r24
    1e20:	77 95       	ror	r23
    1e22:	67 95       	ror	r22
    1e24:	b3 95       	inc	r27
    1e26:	d9 f7       	brne	.-10     	; 0x1e1e <__fixunssfsi+0x42>
    1e28:	3e f4       	brtc	.+14     	; 0x1e38 <__fixunssfsi+0x5c>
    1e2a:	90 95       	com	r25
    1e2c:	80 95       	com	r24
    1e2e:	70 95       	com	r23
    1e30:	61 95       	neg	r22
    1e32:	7f 4f       	sbci	r23, 0xFF	; 255
    1e34:	8f 4f       	sbci	r24, 0xFF	; 255
    1e36:	9f 4f       	sbci	r25, 0xFF	; 255
    1e38:	08 95       	ret

00001e3a <__floatunsisf>:
    1e3a:	e8 94       	clt
    1e3c:	09 c0       	rjmp	.+18     	; 0x1e50 <__floatsisf+0x12>

00001e3e <__floatsisf>:
    1e3e:	97 fb       	bst	r25, 7
    1e40:	3e f4       	brtc	.+14     	; 0x1e50 <__floatsisf+0x12>
    1e42:	90 95       	com	r25
    1e44:	80 95       	com	r24
    1e46:	70 95       	com	r23
    1e48:	61 95       	neg	r22
    1e4a:	7f 4f       	sbci	r23, 0xFF	; 255
    1e4c:	8f 4f       	sbci	r24, 0xFF	; 255
    1e4e:	9f 4f       	sbci	r25, 0xFF	; 255
    1e50:	99 23       	and	r25, r25
    1e52:	a9 f0       	breq	.+42     	; 0x1e7e <__floatsisf+0x40>
    1e54:	f9 2f       	mov	r31, r25
    1e56:	96 e9       	ldi	r25, 0x96	; 150
    1e58:	bb 27       	eor	r27, r27
    1e5a:	93 95       	inc	r25
    1e5c:	f6 95       	lsr	r31
    1e5e:	87 95       	ror	r24
    1e60:	77 95       	ror	r23
    1e62:	67 95       	ror	r22
    1e64:	b7 95       	ror	r27
    1e66:	f1 11       	cpse	r31, r1
    1e68:	f8 cf       	rjmp	.-16     	; 0x1e5a <__floatsisf+0x1c>
    1e6a:	fa f4       	brpl	.+62     	; 0x1eaa <__floatsisf+0x6c>
    1e6c:	bb 0f       	add	r27, r27
    1e6e:	11 f4       	brne	.+4      	; 0x1e74 <__floatsisf+0x36>
    1e70:	60 ff       	sbrs	r22, 0
    1e72:	1b c0       	rjmp	.+54     	; 0x1eaa <__floatsisf+0x6c>
    1e74:	6f 5f       	subi	r22, 0xFF	; 255
    1e76:	7f 4f       	sbci	r23, 0xFF	; 255
    1e78:	8f 4f       	sbci	r24, 0xFF	; 255
    1e7a:	9f 4f       	sbci	r25, 0xFF	; 255
    1e7c:	16 c0       	rjmp	.+44     	; 0x1eaa <__floatsisf+0x6c>
    1e7e:	88 23       	and	r24, r24
    1e80:	11 f0       	breq	.+4      	; 0x1e86 <__floatsisf+0x48>
    1e82:	96 e9       	ldi	r25, 0x96	; 150
    1e84:	11 c0       	rjmp	.+34     	; 0x1ea8 <__floatsisf+0x6a>
    1e86:	77 23       	and	r23, r23
    1e88:	21 f0       	breq	.+8      	; 0x1e92 <__floatsisf+0x54>
    1e8a:	9e e8       	ldi	r25, 0x8E	; 142
    1e8c:	87 2f       	mov	r24, r23
    1e8e:	76 2f       	mov	r23, r22
    1e90:	05 c0       	rjmp	.+10     	; 0x1e9c <__floatsisf+0x5e>
    1e92:	66 23       	and	r22, r22
    1e94:	71 f0       	breq	.+28     	; 0x1eb2 <__floatsisf+0x74>
    1e96:	96 e8       	ldi	r25, 0x86	; 134
    1e98:	86 2f       	mov	r24, r22
    1e9a:	70 e0       	ldi	r23, 0x00	; 0
    1e9c:	60 e0       	ldi	r22, 0x00	; 0
    1e9e:	2a f0       	brmi	.+10     	; 0x1eaa <__floatsisf+0x6c>
    1ea0:	9a 95       	dec	r25
    1ea2:	66 0f       	add	r22, r22
    1ea4:	77 1f       	adc	r23, r23
    1ea6:	88 1f       	adc	r24, r24
    1ea8:	da f7       	brpl	.-10     	; 0x1ea0 <__floatsisf+0x62>
    1eaa:	88 0f       	add	r24, r24
    1eac:	96 95       	lsr	r25
    1eae:	87 95       	ror	r24
    1eb0:	97 f9       	bld	r25, 7
    1eb2:	08 95       	ret

00001eb4 <__fp_inf>:
    1eb4:	97 f9       	bld	r25, 7
    1eb6:	9f 67       	ori	r25, 0x7F	; 127
    1eb8:	80 e8       	ldi	r24, 0x80	; 128
    1eba:	70 e0       	ldi	r23, 0x00	; 0
    1ebc:	60 e0       	ldi	r22, 0x00	; 0
    1ebe:	08 95       	ret

00001ec0 <__fp_nan>:
    1ec0:	9f ef       	ldi	r25, 0xFF	; 255
    1ec2:	80 ec       	ldi	r24, 0xC0	; 192
    1ec4:	08 95       	ret

00001ec6 <__fp_pscA>:
    1ec6:	00 24       	eor	r0, r0
    1ec8:	0a 94       	dec	r0
    1eca:	16 16       	cp	r1, r22
    1ecc:	17 06       	cpc	r1, r23
    1ece:	18 06       	cpc	r1, r24
    1ed0:	09 06       	cpc	r0, r25
    1ed2:	08 95       	ret

00001ed4 <__fp_pscB>:
    1ed4:	00 24       	eor	r0, r0
    1ed6:	0a 94       	dec	r0
    1ed8:	12 16       	cp	r1, r18
    1eda:	13 06       	cpc	r1, r19
    1edc:	14 06       	cpc	r1, r20
    1ede:	05 06       	cpc	r0, r21
    1ee0:	08 95       	ret

00001ee2 <__fp_round>:
    1ee2:	09 2e       	mov	r0, r25
    1ee4:	03 94       	inc	r0
    1ee6:	00 0c       	add	r0, r0
    1ee8:	11 f4       	brne	.+4      	; 0x1eee <__fp_round+0xc>
    1eea:	88 23       	and	r24, r24
    1eec:	52 f0       	brmi	.+20     	; 0x1f02 <__fp_round+0x20>
    1eee:	bb 0f       	add	r27, r27
    1ef0:	40 f4       	brcc	.+16     	; 0x1f02 <__fp_round+0x20>
    1ef2:	bf 2b       	or	r27, r31
    1ef4:	11 f4       	brne	.+4      	; 0x1efa <__fp_round+0x18>
    1ef6:	60 ff       	sbrs	r22, 0
    1ef8:	04 c0       	rjmp	.+8      	; 0x1f02 <__fp_round+0x20>
    1efa:	6f 5f       	subi	r22, 0xFF	; 255
    1efc:	7f 4f       	sbci	r23, 0xFF	; 255
    1efe:	8f 4f       	sbci	r24, 0xFF	; 255
    1f00:	9f 4f       	sbci	r25, 0xFF	; 255
    1f02:	08 95       	ret

00001f04 <__fp_split3>:
    1f04:	57 fd       	sbrc	r21, 7
    1f06:	90 58       	subi	r25, 0x80	; 128
    1f08:	44 0f       	add	r20, r20
    1f0a:	55 1f       	adc	r21, r21
    1f0c:	59 f0       	breq	.+22     	; 0x1f24 <__fp_splitA+0x10>
    1f0e:	5f 3f       	cpi	r21, 0xFF	; 255
    1f10:	71 f0       	breq	.+28     	; 0x1f2e <__fp_splitA+0x1a>
    1f12:	47 95       	ror	r20

00001f14 <__fp_splitA>:
    1f14:	88 0f       	add	r24, r24
    1f16:	97 fb       	bst	r25, 7
    1f18:	99 1f       	adc	r25, r25
    1f1a:	61 f0       	breq	.+24     	; 0x1f34 <__fp_splitA+0x20>
    1f1c:	9f 3f       	cpi	r25, 0xFF	; 255
    1f1e:	79 f0       	breq	.+30     	; 0x1f3e <__fp_splitA+0x2a>
    1f20:	87 95       	ror	r24
    1f22:	08 95       	ret
    1f24:	12 16       	cp	r1, r18
    1f26:	13 06       	cpc	r1, r19
    1f28:	14 06       	cpc	r1, r20
    1f2a:	55 1f       	adc	r21, r21
    1f2c:	f2 cf       	rjmp	.-28     	; 0x1f12 <__fp_split3+0xe>
    1f2e:	46 95       	lsr	r20
    1f30:	f1 df       	rcall	.-30     	; 0x1f14 <__fp_splitA>
    1f32:	08 c0       	rjmp	.+16     	; 0x1f44 <__fp_splitA+0x30>
    1f34:	16 16       	cp	r1, r22
    1f36:	17 06       	cpc	r1, r23
    1f38:	18 06       	cpc	r1, r24
    1f3a:	99 1f       	adc	r25, r25
    1f3c:	f1 cf       	rjmp	.-30     	; 0x1f20 <__fp_splitA+0xc>
    1f3e:	86 95       	lsr	r24
    1f40:	71 05       	cpc	r23, r1
    1f42:	61 05       	cpc	r22, r1
    1f44:	08 94       	sec
    1f46:	08 95       	ret

00001f48 <__fp_zero>:
    1f48:	e8 94       	clt

00001f4a <__fp_szero>:
    1f4a:	bb 27       	eor	r27, r27
    1f4c:	66 27       	eor	r22, r22
    1f4e:	77 27       	eor	r23, r23
    1f50:	cb 01       	movw	r24, r22
    1f52:	97 f9       	bld	r25, 7
    1f54:	08 95       	ret

00001f56 <__mulsf3>:
    1f56:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <__mulsf3x>
    1f5a:	0c 94 71 0f 	jmp	0x1ee2	; 0x1ee2 <__fp_round>
    1f5e:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <__fp_pscA>
    1f62:	38 f0       	brcs	.+14     	; 0x1f72 <__mulsf3+0x1c>
    1f64:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <__fp_pscB>
    1f68:	20 f0       	brcs	.+8      	; 0x1f72 <__mulsf3+0x1c>
    1f6a:	95 23       	and	r25, r21
    1f6c:	11 f0       	breq	.+4      	; 0x1f72 <__mulsf3+0x1c>
    1f6e:	0c 94 5a 0f 	jmp	0x1eb4	; 0x1eb4 <__fp_inf>
    1f72:	0c 94 60 0f 	jmp	0x1ec0	; 0x1ec0 <__fp_nan>
    1f76:	11 24       	eor	r1, r1
    1f78:	0c 94 a5 0f 	jmp	0x1f4a	; 0x1f4a <__fp_szero>

00001f7c <__mulsf3x>:
    1f7c:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <__fp_split3>
    1f80:	70 f3       	brcs	.-36     	; 0x1f5e <__mulsf3+0x8>

00001f82 <__mulsf3_pse>:
    1f82:	95 9f       	mul	r25, r21
    1f84:	c1 f3       	breq	.-16     	; 0x1f76 <__mulsf3+0x20>
    1f86:	95 0f       	add	r25, r21
    1f88:	50 e0       	ldi	r21, 0x00	; 0
    1f8a:	55 1f       	adc	r21, r21
    1f8c:	62 9f       	mul	r22, r18
    1f8e:	f0 01       	movw	r30, r0
    1f90:	72 9f       	mul	r23, r18
    1f92:	bb 27       	eor	r27, r27
    1f94:	f0 0d       	add	r31, r0
    1f96:	b1 1d       	adc	r27, r1
    1f98:	63 9f       	mul	r22, r19
    1f9a:	aa 27       	eor	r26, r26
    1f9c:	f0 0d       	add	r31, r0
    1f9e:	b1 1d       	adc	r27, r1
    1fa0:	aa 1f       	adc	r26, r26
    1fa2:	64 9f       	mul	r22, r20
    1fa4:	66 27       	eor	r22, r22
    1fa6:	b0 0d       	add	r27, r0
    1fa8:	a1 1d       	adc	r26, r1
    1faa:	66 1f       	adc	r22, r22
    1fac:	82 9f       	mul	r24, r18
    1fae:	22 27       	eor	r18, r18
    1fb0:	b0 0d       	add	r27, r0
    1fb2:	a1 1d       	adc	r26, r1
    1fb4:	62 1f       	adc	r22, r18
    1fb6:	73 9f       	mul	r23, r19
    1fb8:	b0 0d       	add	r27, r0
    1fba:	a1 1d       	adc	r26, r1
    1fbc:	62 1f       	adc	r22, r18
    1fbe:	83 9f       	mul	r24, r19
    1fc0:	a0 0d       	add	r26, r0
    1fc2:	61 1d       	adc	r22, r1
    1fc4:	22 1f       	adc	r18, r18
    1fc6:	74 9f       	mul	r23, r20
    1fc8:	33 27       	eor	r19, r19
    1fca:	a0 0d       	add	r26, r0
    1fcc:	61 1d       	adc	r22, r1
    1fce:	23 1f       	adc	r18, r19
    1fd0:	84 9f       	mul	r24, r20
    1fd2:	60 0d       	add	r22, r0
    1fd4:	21 1d       	adc	r18, r1
    1fd6:	82 2f       	mov	r24, r18
    1fd8:	76 2f       	mov	r23, r22
    1fda:	6a 2f       	mov	r22, r26
    1fdc:	11 24       	eor	r1, r1
    1fde:	9f 57       	subi	r25, 0x7F	; 127
    1fe0:	50 40       	sbci	r21, 0x00	; 0
    1fe2:	9a f0       	brmi	.+38     	; 0x200a <__mulsf3_pse+0x88>
    1fe4:	f1 f0       	breq	.+60     	; 0x2022 <__mulsf3_pse+0xa0>
    1fe6:	88 23       	and	r24, r24
    1fe8:	4a f0       	brmi	.+18     	; 0x1ffc <__mulsf3_pse+0x7a>
    1fea:	ee 0f       	add	r30, r30
    1fec:	ff 1f       	adc	r31, r31
    1fee:	bb 1f       	adc	r27, r27
    1ff0:	66 1f       	adc	r22, r22
    1ff2:	77 1f       	adc	r23, r23
    1ff4:	88 1f       	adc	r24, r24
    1ff6:	91 50       	subi	r25, 0x01	; 1
    1ff8:	50 40       	sbci	r21, 0x00	; 0
    1ffa:	a9 f7       	brne	.-22     	; 0x1fe6 <__mulsf3_pse+0x64>
    1ffc:	9e 3f       	cpi	r25, 0xFE	; 254
    1ffe:	51 05       	cpc	r21, r1
    2000:	80 f0       	brcs	.+32     	; 0x2022 <__mulsf3_pse+0xa0>
    2002:	0c 94 5a 0f 	jmp	0x1eb4	; 0x1eb4 <__fp_inf>
    2006:	0c 94 a5 0f 	jmp	0x1f4a	; 0x1f4a <__fp_szero>
    200a:	5f 3f       	cpi	r21, 0xFF	; 255
    200c:	e4 f3       	brlt	.-8      	; 0x2006 <__mulsf3_pse+0x84>
    200e:	98 3e       	cpi	r25, 0xE8	; 232
    2010:	d4 f3       	brlt	.-12     	; 0x2006 <__mulsf3_pse+0x84>
    2012:	86 95       	lsr	r24
    2014:	77 95       	ror	r23
    2016:	67 95       	ror	r22
    2018:	b7 95       	ror	r27
    201a:	f7 95       	ror	r31
    201c:	e7 95       	ror	r30
    201e:	9f 5f       	subi	r25, 0xFF	; 255
    2020:	c1 f7       	brne	.-16     	; 0x2012 <__mulsf3_pse+0x90>
    2022:	fe 2b       	or	r31, r30
    2024:	88 0f       	add	r24, r24
    2026:	91 1d       	adc	r25, r1
    2028:	96 95       	lsr	r25
    202a:	87 95       	ror	r24
    202c:	97 f9       	bld	r25, 7
    202e:	08 95       	ret

00002030 <do_rand>:
    2030:	8f 92       	push	r8
    2032:	9f 92       	push	r9
    2034:	af 92       	push	r10
    2036:	bf 92       	push	r11
    2038:	cf 92       	push	r12
    203a:	df 92       	push	r13
    203c:	ef 92       	push	r14
    203e:	ff 92       	push	r15
    2040:	cf 93       	push	r28
    2042:	df 93       	push	r29
    2044:	ec 01       	movw	r28, r24
    2046:	68 81       	ld	r22, Y
    2048:	79 81       	ldd	r23, Y+1	; 0x01
    204a:	8a 81       	ldd	r24, Y+2	; 0x02
    204c:	9b 81       	ldd	r25, Y+3	; 0x03
    204e:	61 15       	cp	r22, r1
    2050:	71 05       	cpc	r23, r1
    2052:	81 05       	cpc	r24, r1
    2054:	91 05       	cpc	r25, r1
    2056:	21 f4       	brne	.+8      	; 0x2060 <do_rand+0x30>
    2058:	64 e2       	ldi	r22, 0x24	; 36
    205a:	79 ed       	ldi	r23, 0xD9	; 217
    205c:	8b e5       	ldi	r24, 0x5B	; 91
    205e:	97 e0       	ldi	r25, 0x07	; 7
    2060:	2d e1       	ldi	r18, 0x1D	; 29
    2062:	33 ef       	ldi	r19, 0xF3	; 243
    2064:	41 e0       	ldi	r20, 0x01	; 1
    2066:	50 e0       	ldi	r21, 0x00	; 0
    2068:	0e 94 8a 10 	call	0x2114	; 0x2114 <__divmodsi4>
    206c:	49 01       	movw	r8, r18
    206e:	5a 01       	movw	r10, r20
    2070:	9b 01       	movw	r18, r22
    2072:	ac 01       	movw	r20, r24
    2074:	a7 ea       	ldi	r26, 0xA7	; 167
    2076:	b1 e4       	ldi	r27, 0x41	; 65
    2078:	0e 94 a9 10 	call	0x2152	; 0x2152 <__muluhisi3>
    207c:	6b 01       	movw	r12, r22
    207e:	7c 01       	movw	r14, r24
    2080:	ac ee       	ldi	r26, 0xEC	; 236
    2082:	b4 ef       	ldi	r27, 0xF4	; 244
    2084:	a5 01       	movw	r20, r10
    2086:	94 01       	movw	r18, r8
    2088:	0e 94 b7 10 	call	0x216e	; 0x216e <__mulohisi3>
    208c:	dc 01       	movw	r26, r24
    208e:	cb 01       	movw	r24, r22
    2090:	8c 0d       	add	r24, r12
    2092:	9d 1d       	adc	r25, r13
    2094:	ae 1d       	adc	r26, r14
    2096:	bf 1d       	adc	r27, r15
    2098:	b7 ff       	sbrs	r27, 7
    209a:	03 c0       	rjmp	.+6      	; 0x20a2 <do_rand+0x72>
    209c:	01 97       	sbiw	r24, 0x01	; 1
    209e:	a1 09       	sbc	r26, r1
    20a0:	b0 48       	sbci	r27, 0x80	; 128
    20a2:	88 83       	st	Y, r24
    20a4:	99 83       	std	Y+1, r25	; 0x01
    20a6:	aa 83       	std	Y+2, r26	; 0x02
    20a8:	bb 83       	std	Y+3, r27	; 0x03
    20aa:	9f 77       	andi	r25, 0x7F	; 127
    20ac:	df 91       	pop	r29
    20ae:	cf 91       	pop	r28
    20b0:	ff 90       	pop	r15
    20b2:	ef 90       	pop	r14
    20b4:	df 90       	pop	r13
    20b6:	cf 90       	pop	r12
    20b8:	bf 90       	pop	r11
    20ba:	af 90       	pop	r10
    20bc:	9f 90       	pop	r9
    20be:	8f 90       	pop	r8
    20c0:	08 95       	ret

000020c2 <rand_r>:
    20c2:	0e 94 18 10 	call	0x2030	; 0x2030 <do_rand>
    20c6:	08 95       	ret

000020c8 <rand>:
    20c8:	87 e0       	ldi	r24, 0x07	; 7
    20ca:	91 e0       	ldi	r25, 0x01	; 1
    20cc:	0e 94 18 10 	call	0x2030	; 0x2030 <do_rand>
    20d0:	08 95       	ret

000020d2 <srand>:
    20d2:	a0 e0       	ldi	r26, 0x00	; 0
    20d4:	b0 e0       	ldi	r27, 0x00	; 0
    20d6:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <next>
    20da:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <next+0x1>
    20de:	a0 93 09 01 	sts	0x0109, r26	; 0x800109 <next+0x2>
    20e2:	b0 93 0a 01 	sts	0x010A, r27	; 0x80010a <next+0x3>
    20e6:	08 95       	ret

000020e8 <eeprom_read_byte>:
    20e8:	f9 99       	sbic	0x1f, 1	; 31
    20ea:	fe cf       	rjmp	.-4      	; 0x20e8 <eeprom_read_byte>
    20ec:	92 bd       	out	0x22, r25	; 34
    20ee:	81 bd       	out	0x21, r24	; 33
    20f0:	f8 9a       	sbi	0x1f, 0	; 31
    20f2:	99 27       	eor	r25, r25
    20f4:	80 b5       	in	r24, 0x20	; 32
    20f6:	08 95       	ret

000020f8 <eeprom_write_byte>:
    20f8:	26 2f       	mov	r18, r22

000020fa <eeprom_write_r18>:
    20fa:	f9 99       	sbic	0x1f, 1	; 31
    20fc:	fe cf       	rjmp	.-4      	; 0x20fa <eeprom_write_r18>
    20fe:	1f ba       	out	0x1f, r1	; 31
    2100:	92 bd       	out	0x22, r25	; 34
    2102:	81 bd       	out	0x21, r24	; 33
    2104:	20 bd       	out	0x20, r18	; 32
    2106:	0f b6       	in	r0, 0x3f	; 63
    2108:	f8 94       	cli
    210a:	fa 9a       	sbi	0x1f, 2	; 31
    210c:	f9 9a       	sbi	0x1f, 1	; 31
    210e:	0f be       	out	0x3f, r0	; 63
    2110:	01 96       	adiw	r24, 0x01	; 1
    2112:	08 95       	ret

00002114 <__divmodsi4>:
    2114:	05 2e       	mov	r0, r21
    2116:	97 fb       	bst	r25, 7
    2118:	1e f4       	brtc	.+6      	; 0x2120 <__divmodsi4+0xc>
    211a:	00 94       	com	r0
    211c:	0e 94 a1 10 	call	0x2142	; 0x2142 <__negsi2>
    2120:	57 fd       	sbrc	r21, 7
    2122:	07 d0       	rcall	.+14     	; 0x2132 <__divmodsi4_neg2>
    2124:	0e 94 bc 10 	call	0x2178	; 0x2178 <__udivmodsi4>
    2128:	07 fc       	sbrc	r0, 7
    212a:	03 d0       	rcall	.+6      	; 0x2132 <__divmodsi4_neg2>
    212c:	4e f4       	brtc	.+18     	; 0x2140 <__divmodsi4_exit>
    212e:	0c 94 a1 10 	jmp	0x2142	; 0x2142 <__negsi2>

00002132 <__divmodsi4_neg2>:
    2132:	50 95       	com	r21
    2134:	40 95       	com	r20
    2136:	30 95       	com	r19
    2138:	21 95       	neg	r18
    213a:	3f 4f       	sbci	r19, 0xFF	; 255
    213c:	4f 4f       	sbci	r20, 0xFF	; 255
    213e:	5f 4f       	sbci	r21, 0xFF	; 255

00002140 <__divmodsi4_exit>:
    2140:	08 95       	ret

00002142 <__negsi2>:
    2142:	90 95       	com	r25
    2144:	80 95       	com	r24
    2146:	70 95       	com	r23
    2148:	61 95       	neg	r22
    214a:	7f 4f       	sbci	r23, 0xFF	; 255
    214c:	8f 4f       	sbci	r24, 0xFF	; 255
    214e:	9f 4f       	sbci	r25, 0xFF	; 255
    2150:	08 95       	ret

00002152 <__muluhisi3>:
    2152:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <__umulhisi3>
    2156:	a5 9f       	mul	r26, r21
    2158:	90 0d       	add	r25, r0
    215a:	b4 9f       	mul	r27, r20
    215c:	90 0d       	add	r25, r0
    215e:	a4 9f       	mul	r26, r20
    2160:	80 0d       	add	r24, r0
    2162:	91 1d       	adc	r25, r1
    2164:	11 24       	eor	r1, r1
    2166:	08 95       	ret

00002168 <__mulshisi3>:
    2168:	b7 ff       	sbrs	r27, 7
    216a:	0c 94 a9 10 	jmp	0x2152	; 0x2152 <__muluhisi3>

0000216e <__mulohisi3>:
    216e:	0e 94 a9 10 	call	0x2152	; 0x2152 <__muluhisi3>
    2172:	82 1b       	sub	r24, r18
    2174:	93 0b       	sbc	r25, r19
    2176:	08 95       	ret

00002178 <__udivmodsi4>:
    2178:	a1 e2       	ldi	r26, 0x21	; 33
    217a:	1a 2e       	mov	r1, r26
    217c:	aa 1b       	sub	r26, r26
    217e:	bb 1b       	sub	r27, r27
    2180:	fd 01       	movw	r30, r26
    2182:	0d c0       	rjmp	.+26     	; 0x219e <__udivmodsi4_ep>

00002184 <__udivmodsi4_loop>:
    2184:	aa 1f       	adc	r26, r26
    2186:	bb 1f       	adc	r27, r27
    2188:	ee 1f       	adc	r30, r30
    218a:	ff 1f       	adc	r31, r31
    218c:	a2 17       	cp	r26, r18
    218e:	b3 07       	cpc	r27, r19
    2190:	e4 07       	cpc	r30, r20
    2192:	f5 07       	cpc	r31, r21
    2194:	20 f0       	brcs	.+8      	; 0x219e <__udivmodsi4_ep>
    2196:	a2 1b       	sub	r26, r18
    2198:	b3 0b       	sbc	r27, r19
    219a:	e4 0b       	sbc	r30, r20
    219c:	f5 0b       	sbc	r31, r21

0000219e <__udivmodsi4_ep>:
    219e:	66 1f       	adc	r22, r22
    21a0:	77 1f       	adc	r23, r23
    21a2:	88 1f       	adc	r24, r24
    21a4:	99 1f       	adc	r25, r25
    21a6:	1a 94       	dec	r1
    21a8:	69 f7       	brne	.-38     	; 0x2184 <__udivmodsi4_loop>
    21aa:	60 95       	com	r22
    21ac:	70 95       	com	r23
    21ae:	80 95       	com	r24
    21b0:	90 95       	com	r25
    21b2:	9b 01       	movw	r18, r22
    21b4:	ac 01       	movw	r20, r24
    21b6:	bd 01       	movw	r22, r26
    21b8:	cf 01       	movw	r24, r30
    21ba:	08 95       	ret

000021bc <_exit>:
    21bc:	f8 94       	cli

000021be <__stop_program>:
    21be:	ff cf       	rjmp	.-2      	; 0x21be <__stop_program>
